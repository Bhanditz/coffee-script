/**
 * CoffeeScript Compiler v1.2.1-pre
 * http://coffeescript.org
 *
 * Copyright 2011, Jeremy Ashkenas
 * Released under the MIT License
 */
(function(root) {
  var CoffeeScript = function() {
    function require(path){ return require[path]; }
    require['./helpers'] = new function() {
  var exports = this;
  // Generated by CoffeeScript 1.2.1-pre
(function() {
  var extend, flatten;

  exports.starts = function(string, literal, start) {
    return literal === string.substr(start, literal.length);
  };

  exports.ends = function(string, literal, back) {
    var len;
    len = literal.length;
    return literal === string.substr(string.length - len - (back || 0), len);
  };

  exports.compact = function(array) {
    var item, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      item = array[_i];
      if (item) _results.push(item);
    }
    return _results;
  };

  exports.count = function(string, substr) {
    var num, pos;
    num = pos = 0;
    if (!substr.length) return 1 / 0;
    while (pos = 1 + string.indexOf(substr, pos)) {
      num++;
    }
    return num;
  };

  exports.merge = function(options, overrides) {
    return extend(extend({}, options), overrides);
  };

  extend = exports.extend = function(object, properties) {
    var key, val;
    for (key in properties) {
      val = properties[key];
      object[key] = val;
    }
    return object;
  };

  exports.flatten = flatten = function(array) {
    var element, flattened, _i, _len;
    flattened = [];
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      element = array[_i];
      if (element instanceof Array) {
        flattened = flattened.concat(flatten(element));
      } else {
        flattened.push(element);
      }
    }
    return flattened;
  };

  exports.del = function(obj, key) {
    var val;
    val = obj[key];
    delete obj[key];
    return val;
  };

  exports.last = function(array, back) {
    return array[array.length - (back || 0) - 1];
  };

}).call(this);

};require['./rewriter'] = new function() {
  var exports = this;
  // Generated by CoffeeScript 1.2.1-pre
(function() {
  var BALANCED_PAIRS, EXPRESSION_CLOSE, EXPRESSION_END, EXPRESSION_START, IMPLICIT_BLOCK, IMPLICIT_CALL, IMPLICIT_END, IMPLICIT_FUNC, IMPLICIT_UNSPACED_CALL, INVERSES, LINEBREAKS, SINGLE_CLOSERS, SINGLE_LINERS, left, rite, _i, _len, _ref,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  exports.Rewriter = (function() {

    Rewriter.name = 'Rewriter';

    function Rewriter() {}

    Rewriter.prototype.rewrite = function(tokens) {
      this.tokens = tokens;
      this.removeLeadingNewlines();
      this.removeMidExpressionNewlines();
      this.closeOpenCalls();
      this.closeOpenIndexes();
      this.addImplicitIndentation();
      this.tagPostfixConditionals();
      this.addImplicitBraces();
      this.addImplicitParentheses();
      return this.tokens;
    };

    Rewriter.prototype.scanTokens = function(block) {
      var i, token, tokens;
      tokens = this.tokens;
      i = 0;
      while (token = tokens[i]) {
        i += block.call(this, token, i, tokens);
      }
      return true;
    };

    Rewriter.prototype.detectEnd = function(i, condition, action) {
      var levels, token, tokens, _ref, _ref2;
      tokens = this.tokens;
      levels = 0;
      while (token = tokens[i]) {
        if (levels === 0 && condition.call(this, token, i)) {
          return action.call(this, token, i);
        }
        if (!token || levels < 0) return action.call(this, token, i - 1);
        if (_ref = token[0], __indexOf.call(EXPRESSION_START, _ref) >= 0) {
          levels += 1;
        } else if (_ref2 = token[0], __indexOf.call(EXPRESSION_END, _ref2) >= 0) {
          levels -= 1;
        }
        i += 1;
      }
      return i - 1;
    };

    Rewriter.prototype.removeLeadingNewlines = function() {
      var i, tag, _i, _len, _ref;
      _ref = this.tokens;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        tag = _ref[i][0];
        if (tag !== 'TERMINATOR') break;
      }
      if (i) return this.tokens.splice(0, i);
    };

    Rewriter.prototype.removeMidExpressionNewlines = function() {
      return this.scanTokens(function(token, i, tokens) {
        var _ref;
        if (!(token[0] === 'TERMINATOR' && (_ref = this.tag(i + 1), __indexOf.call(EXPRESSION_CLOSE, _ref) >= 0))) {
          return 1;
        }
        tokens.splice(i, 1);
        return 0;
      });
    };

    Rewriter.prototype.closeOpenCalls = function() {
      var action, condition;
      condition = function(token, i) {
        var _ref;
        return ((_ref = token[0]) === ')' || _ref === 'CALL_END') || token[0] === 'OUTDENT' && this.tag(i - 1) === ')';
      };
      action = function(token, i) {
        return this.tokens[token[0] === 'OUTDENT' ? i - 1 : i][0] = 'CALL_END';
      };
      return this.scanTokens(function(token, i) {
        if (token[0] === 'CALL_START') this.detectEnd(i + 1, condition, action);
        return 1;
      });
    };

    Rewriter.prototype.closeOpenIndexes = function() {
      var action, condition;
      condition = function(token, i) {
        var _ref;
        return (_ref = token[0]) === ']' || _ref === 'INDEX_END';
      };
      action = function(token, i) {
        return token[0] = 'INDEX_END';
      };
      return this.scanTokens(function(token, i) {
        if (token[0] === 'INDEX_START') this.detectEnd(i + 1, condition, action);
        return 1;
      });
    };

    Rewriter.prototype.addImplicitBraces = function() {
      var action, condition, sameLine, stack, start, startIndent, startsLine;
      stack = [];
      start = null;
      startsLine = null;
      sameLine = true;
      startIndent = 0;
      condition = function(token, i) {
        var one, tag, three, two, _ref, _ref2;
        _ref = this.tokens.slice(i + 1, (i + 3) + 1 || 9e9), one = _ref[0], two = _ref[1], three = _ref[2];
        if ('HERECOMMENT' === (one != null ? one[0] : void 0)) return false;
        tag = token[0];
        if (__indexOf.call(LINEBREAKS, tag) >= 0) sameLine = false;
        return (((tag === 'TERMINATOR' || tag === 'OUTDENT') || (__indexOf.call(IMPLICIT_END, tag) >= 0 && sameLine)) && ((!startsLine && this.tag(i - 1) !== ',') || !((two != null ? two[0] : void 0) === ':' || (one != null ? one[0] : void 0) === '@' && (three != null ? three[0] : void 0) === ':'))) || (tag === ',' && one && ((_ref2 = one[0]) !== 'IDENTIFIER' && _ref2 !== 'NUMBER' && _ref2 !== 'STRING' && _ref2 !== '@' && _ref2 !== 'TERMINATOR' && _ref2 !== 'OUTDENT'));
      };
      action = function(token, i) {
        var tok;
        tok = this.generate('}', '}', token[2]);
        return this.tokens.splice(i, 0, tok);
      };
      return this.scanTokens(function(token, i, tokens) {
        var ago, idx, prevTag, tag, tok, value, _ref, _ref2;
        if (_ref = (tag = token[0]), __indexOf.call(EXPRESSION_START, _ref) >= 0) {
          stack.push([(tag === 'INDENT' && this.tag(i - 1) === '{' ? '{' : tag), i]);
          return 1;
        }
        if (__indexOf.call(EXPRESSION_END, tag) >= 0) {
          start = stack.pop();
          return 1;
        }
        if (!(tag === ':' && ((ago = this.tag(i - 2)) === ':' || ((_ref2 = stack[stack.length - 1]) != null ? _ref2[0] : void 0) !== '{'))) {
          return 1;
        }
        sameLine = true;
        stack.push(['{']);
        idx = ago === '@' ? i - 2 : i - 1;
        while (this.tag(idx - 2) === 'HERECOMMENT') {
          idx -= 2;
        }
        prevTag = this.tag(idx - 1);
        startsLine = !prevTag || (__indexOf.call(LINEBREAKS, prevTag) >= 0);
        value = new String('{');
        value.generated = true;
        tok = this.generate('{', value, token[2]);
        tokens.splice(idx, 0, tok);
        this.detectEnd(i + 2, condition, action);
        return 2;
      });
    };

    Rewriter.prototype.addImplicitParentheses = function() {
      var action, condition, noCall, seenControl, seenSingle;
      noCall = seenSingle = seenControl = false;
      condition = function(token, i) {
        var post, tag, _ref, _ref2;
        tag = token[0];
        if (!seenSingle && token.fromThen) return true;
        if (tag === 'IF' || tag === 'ELSE' || tag === 'CATCH' || tag === '->' || tag === '=>' || tag === 'CLASS') {
          seenSingle = true;
        }
        if (tag === 'IF' || tag === 'ELSE' || tag === 'SWITCH' || tag === 'TRY' || tag === '=') {
          seenControl = true;
        }
        if ((tag === '.' || tag === '?.' || tag === '::') && this.tag(i - 1) === 'OUTDENT') {
          return true;
        }
        return !token.generated && this.tag(i - 1) !== ',' && (__indexOf.call(IMPLICIT_END, tag) >= 0 || (tag === 'INDENT' && !seenControl)) && (tag !== 'INDENT' || (((_ref = this.tag(i - 2)) !== 'CLASS' && _ref !== 'EXTENDS') && (_ref2 = this.tag(i - 1), __indexOf.call(IMPLICIT_BLOCK, _ref2) < 0) && !((post = this.tokens[i + 1]) && post.generated && post[0] === '{')));
      };
      action = function(token, i) {
        return this.tokens.splice(i, 0, this.generate('CALL_END', ')', token[2]));
      };
      return this.scanTokens(function(token, i, tokens) {
        var callObject, current, next, prev, tag, _ref, _ref2, _ref3;
        tag = token[0];
        if (tag === 'CLASS' || tag === 'IF') noCall = true;
        _ref = tokens.slice(i - 1, (i + 1) + 1 || 9e9), prev = _ref[0], current = _ref[1], next = _ref[2];
        callObject = !noCall && tag === 'INDENT' && next && next.generated && next[0] === '{' && prev && (_ref2 = prev[0], __indexOf.call(IMPLICIT_FUNC, _ref2) >= 0);
        seenSingle = false;
        seenControl = false;
        if (__indexOf.call(LINEBREAKS, tag) >= 0) noCall = false;
        if (prev && !prev.spaced && tag === '?') token.call = true;
        if (token.fromThen) return 1;
        if (!(callObject || (prev != null ? prev.spaced : void 0) && (prev.call || (_ref3 = prev[0], __indexOf.call(IMPLICIT_FUNC, _ref3) >= 0)) && (__indexOf.call(IMPLICIT_CALL, tag) >= 0 || !(token.spaced || token.newLine) && __indexOf.call(IMPLICIT_UNSPACED_CALL, tag) >= 0))) {
          return 1;
        }
        tokens.splice(i, 0, this.generate('CALL_START', '(', token[2]));
        this.detectEnd(i + 1, condition, action);
        if (prev[0] === '?') prev[0] = 'FUNC_EXIST';
        return 2;
      });
    };

    Rewriter.prototype.addImplicitIndentation = function() {
      var action, condition, indent, outdent, starter;
      starter = indent = outdent = null;
      condition = function(token, i) {
        var _ref;
        return token[1] !== ';' && (_ref = token[0], __indexOf.call(SINGLE_CLOSERS, _ref) >= 0) && !(token[0] === 'ELSE' && (starter !== 'IF' && starter !== 'THEN'));
      };
      action = function(token, i) {
        return this.tokens.splice((this.tag(i - 1) === ',' ? i - 1 : i), 0, outdent);
      };
      return this.scanTokens(function(token, i, tokens) {
        var tag, _ref, _ref2;
        tag = token[0];
        if (tag === 'TERMINATOR' && this.tag(i + 1) === 'THEN') {
          tokens.splice(i, 1);
          return 0;
        }
        if (tag === 'ELSE' && this.tag(i - 1) !== 'OUTDENT') {
          tokens.splice.apply(tokens, [i, 0].concat(__slice.call(this.indentation(token))));
          return 2;
        }
        if (tag === 'CATCH' && ((_ref = this.tag(i + 2)) === 'OUTDENT' || _ref === 'TERMINATOR' || _ref === 'FINALLY')) {
          tokens.splice.apply(tokens, [i + 2, 0].concat(__slice.call(this.indentation(token))));
          return 4;
        }
        if (__indexOf.call(SINGLE_LINERS, tag) >= 0 && this.tag(i + 1) !== 'INDENT' && !(tag === 'ELSE' && this.tag(i + 1) === 'IF')) {
          starter = tag;
          _ref2 = this.indentation(token, true), indent = _ref2[0], outdent = _ref2[1];
          if (starter === 'THEN') indent.fromThen = true;
          tokens.splice(i + 1, 0, indent);
          this.detectEnd(i + 2, condition, action);
          if (tag === 'THEN') tokens.splice(i, 1);
          return 1;
        }
        return 1;
      });
    };

    Rewriter.prototype.tagPostfixConditionals = function() {
      var action, condition, original;
      original = null;
      condition = function(token, i) {
        var _ref;
        return (_ref = token[0]) === 'TERMINATOR' || _ref === 'INDENT';
      };
      action = function(token, i) {
        if (token[0] !== 'INDENT' || (token.generated && !token.fromThen)) {
          return original[0] = 'POST_' + original[0];
        }
      };
      return this.scanTokens(function(token, i) {
        if (token[0] !== 'IF') return 1;
        original = token;
        this.detectEnd(i + 1, condition, action);
        return 1;
      });
    };

    Rewriter.prototype.indentation = function(token, implicit) {
      var indent, outdent;
      if (implicit == null) implicit = false;
      indent = ['INDENT', 2, token[2]];
      outdent = ['OUTDENT', 2, token[2]];
      if (implicit) indent.generated = outdent.generated = true;
      return [indent, outdent];
    };

    Rewriter.prototype.generate = function(tag, value, line) {
      var tok;
      tok = [tag, value, line];
      tok.generated = true;
      return tok;
    };

    Rewriter.prototype.tag = function(i) {
      var _ref;
      return (_ref = this.tokens[i]) != null ? _ref[0] : void 0;
    };

    return Rewriter;

  })();

  BALANCED_PAIRS = [['(', ')'], ['[', ']'], ['{', '}'], ['INDENT', 'OUTDENT'], ['CALL_START', 'CALL_END'], ['PARAM_START', 'PARAM_END'], ['INDEX_START', 'INDEX_END']];

  exports.INVERSES = INVERSES = {};

  EXPRESSION_START = [];

  EXPRESSION_END = [];

  for (_i = 0, _len = BALANCED_PAIRS.length; _i < _len; _i++) {
    _ref = BALANCED_PAIRS[_i], left = _ref[0], rite = _ref[1];
    EXPRESSION_START.push(INVERSES[rite] = left);
    EXPRESSION_END.push(INVERSES[left] = rite);
  }

  EXPRESSION_CLOSE = ['CATCH', 'WHEN', 'ELSE', 'FINALLY'].concat(EXPRESSION_END);

  IMPLICIT_FUNC = ['IDENTIFIER', 'SUPER', ')', 'CALL_END', ']', 'INDEX_END', '@', 'THIS', 'DEFER', 'TAMEREQUIRE'];

  IMPLICIT_CALL = ['IDENTIFIER', 'NUMBER', 'STRING', 'JS', 'REGEX', 'NEW', 'PARAM_START', 'CLASS', 'IF', 'TRY', 'SWITCH', 'THIS', 'BOOL', 'UNARY', 'SUPER', 'DEFER', 'TAMEREQUIRE', '@', '->', '=>', '[', '(', '{', '--', '++'];

  IMPLICIT_UNSPACED_CALL = ['+', '-'];

  IMPLICIT_BLOCK = ['->', '=>', '{', '[', ','];

  IMPLICIT_END = ['POST_IF', 'FOR', 'WHILE', 'UNTIL', 'WHEN', 'BY', 'LOOP', 'TERMINATOR', 'AWAIT'];

  SINGLE_LINERS = ['ELSE', '->', '=>', 'TRY', 'FINALLY', 'THEN'];

  SINGLE_CLOSERS = ['TERMINATOR', 'CATCH', 'FINALLY', 'ELSE', 'OUTDENT', 'LEADING_WHEN'];

  LINEBREAKS = ['TERMINATOR', 'INDENT', 'OUTDENT'];

}).call(this);

};require['./lexer'] = new function() {
  var exports = this;
  // Generated by CoffeeScript 1.2.1-pre
(function() {
  var BOOL, CALLABLE, CODE, COFFEE_ALIASES, COFFEE_ALIAS_MAP, COFFEE_KEYWORDS, COMMENT, COMPARE, COMPOUND_ASSIGN, HEREDOC, HEREDOC_ILLEGAL, HEREDOC_INDENT, HEREGEX, HEREGEX_OMIT, IDENTIFIER, INDEXABLE, INVERSES, JSTOKEN, JS_FORBIDDEN, JS_KEYWORDS, LINE_BREAK, LINE_CONTINUER, LOGIC, Lexer, MATH, MULTILINER, MULTI_DENT, NOT_REGEX, NOT_SPACED_REGEX, NUMBER, OPERATOR, REGEX, RELATION, RESERVED, Rewriter, SHIFT, SIMPLESTR, TRAILING_SPACES, UNARY, WHITESPACE, compact, count, key, last, starts, _ref, _ref2,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ref = require('./rewriter'), Rewriter = _ref.Rewriter, INVERSES = _ref.INVERSES;

  _ref2 = require('./helpers'), count = _ref2.count, starts = _ref2.starts, compact = _ref2.compact, last = _ref2.last;

  exports.Lexer = Lexer = (function() {

    Lexer.name = 'Lexer';

    function Lexer() {}

    Lexer.prototype.tokenize = function(code, opts) {
      var debug, i, ret, t, tag;
      if (opts == null) opts = {};
      if (WHITESPACE.test(code)) code = "\n" + code;
      code = code.replace(/\r/g, '').replace(TRAILING_SPACES, '');
      this.code = code;
      this.line = opts.line || 0;
      this.indent = 0;
      this.indebt = 0;
      this.outdebt = 0;
      this.indents = [];
      this.ends = [];
      this.tokens = [];
      i = 0;
      while (this.chunk = code.slice(i)) {
        i += this.identifierToken() || this.commentToken() || this.whitespaceToken() || this.lineToken() || this.heredocToken() || this.stringToken() || this.numberToken() || this.regexToken() || this.jsToken() || this.literalToken();
      }
      this.closeIndentation();
      if (tag = this.ends.pop()) this.error("missing " + tag);
      if (opts.rewrite === false) return this.tokens;
      debug = false;
      if (debug) {
        console.log(((function() {
          var _i, _len, _ref3, _results;
          _ref3 = this.tokens;
          _results = [];
          for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
            t = _ref3[_i];
            _results.push(t[0] + '/' + t[1]);
          }
          return _results;
        }).call(this)).join(' '));
      }
      ret = (new Rewriter).rewrite(this.tokens);
      if (debug) {
        console.log(((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = ret.length; _i < _len; _i++) {
            t = ret[_i];
            _results.push(t[0] + '/' + t[1]);
          }
          return _results;
        })()).join(' '));
      }
      return ret;
    };

    Lexer.prototype.identifierToken = function() {
      var colon, forcedIdentifier, id, input, match, prev, tag, _ref3, _ref4;
      if (!(match = IDENTIFIER.exec(this.chunk))) return 0;
      input = match[0], id = match[1], colon = match[2];
      if (id === 'own' && this.tag() === 'FOR') {
        this.token('OWN', id);
        return id.length;
      }
      forcedIdentifier = colon || (prev = last(this.tokens)) && (((_ref3 = prev[0]) === '.' || _ref3 === '?.' || _ref3 === '::') || !prev.spaced && prev[0] === '@') && id !== 'defer';
      tag = 'IDENTIFIER';
      if (!forcedIdentifier && (__indexOf.call(JS_KEYWORDS, id) >= 0 || __indexOf.call(COFFEE_KEYWORDS, id) >= 0)) {
        tag = id.toUpperCase();
        if (tag === 'WHEN' && (_ref4 = this.tag(), __indexOf.call(LINE_BREAK, _ref4) >= 0)) {
          tag = 'LEADING_WHEN';
        } else if (tag === 'FOR') {
          this.seenFor = true;
        } else if (tag === 'UNLESS') {
          tag = 'IF';
        } else if (__indexOf.call(UNARY, tag) >= 0) {
          tag = 'UNARY';
        } else if (__indexOf.call(RELATION, tag) >= 0) {
          if (tag !== 'INSTANCEOF' && this.seenFor) {
            tag = 'FOR' + tag;
            this.seenFor = false;
          } else {
            tag = 'RELATION';
            if (this.value() === '!') {
              this.tokens.pop();
              id = '!' + id;
            }
          }
        }
      }
      if (__indexOf.call(['eval', 'arguments'].concat(JS_FORBIDDEN), id) >= 0) {
        if (forcedIdentifier) {
          tag = 'IDENTIFIER';
          id = new String(id);
          id.reserved = true;
        } else if (__indexOf.call(RESERVED, id) >= 0) {
          this.error("reserved word \"" + id + "\"");
        }
      }
      if (!forcedIdentifier) {
        if (__indexOf.call(COFFEE_ALIASES, id) >= 0) id = COFFEE_ALIAS_MAP[id];
        tag = (function() {
          switch (id) {
            case '!':
              return 'UNARY';
            case '==':
            case '!=':
              return 'COMPARE';
            case '&&':
            case '||':
              return 'LOGIC';
            case 'true':
            case 'false':
            case 'null':
            case 'undefined':
              return 'BOOL';
            case 'break':
            case 'continue':
              return 'STATEMENT';
            default:
              return tag;
          }
        })();
      }
      this.token(tag, id);
      if (colon) this.token(':', ':');
      return input.length;
    };

    Lexer.prototype.numberToken = function() {
      var binaryLiteral, lexedLength, match, number;
      if (!(match = NUMBER.exec(this.chunk))) return 0;
      number = match[0];
      lexedLength = number.length;
      if (binaryLiteral = /0b([01]+)/i.exec(number)) {
        number = (parseInt(binaryLiteral[1], 2)).toString();
      }
      this.token('NUMBER', number);
      return lexedLength;
    };

    Lexer.prototype.stringToken = function() {
      var match, string;
      switch (this.chunk.charAt(0)) {
        case "'":
          if (!(match = SIMPLESTR.exec(this.chunk))) return 0;
          this.token('STRING', (string = match[0]).replace(MULTILINER, '\\\n'));
          break;
        case '"':
          if (!(string = this.balancedString(this.chunk, '"'))) return 0;
          if (0 < string.indexOf('#{', 1)) {
            this.interpolateString(string.slice(1, -1));
          } else {
            this.token('STRING', this.escapeLines(string));
          }
          break;
        default:
          return 0;
      }
      this.line += count(string, '\n');
      return string.length;
    };

    Lexer.prototype.heredocToken = function() {
      var doc, heredoc, match, quote;
      if (!(match = HEREDOC.exec(this.chunk))) return 0;
      heredoc = match[0];
      quote = heredoc.charAt(0);
      doc = this.sanitizeHeredoc(match[2], {
        quote: quote,
        indent: null
      });
      if (quote === '"' && 0 <= doc.indexOf('#{')) {
        this.interpolateString(doc, {
          heredoc: true
        });
      } else {
        this.token('STRING', this.makeString(doc, quote, true));
      }
      this.line += count(heredoc, '\n');
      return heredoc.length;
    };

    Lexer.prototype.commentToken = function() {
      var comment, here, match;
      if (!(match = this.chunk.match(COMMENT))) return 0;
      comment = match[0], here = match[1];
      if (here) {
        this.token('HERECOMMENT', this.sanitizeHeredoc(here, {
          herecomment: true,
          indent: Array(this.indent + 1).join(' ')
        }));
        this.token('TERMINATOR', '\n');
      }
      this.line += count(comment, '\n');
      return comment.length;
    };

    Lexer.prototype.jsToken = function() {
      var match, script;
      if (!(this.chunk.charAt(0) === '`' && (match = JSTOKEN.exec(this.chunk)))) {
        return 0;
      }
      this.token('JS', (script = match[0]).slice(1, -1));
      return script.length;
    };

    Lexer.prototype.regexToken = function() {
      var flags, length, match, prev, regex, _ref3, _ref4;
      if (this.chunk.charAt(0) !== '/') return 0;
      if (match = HEREGEX.exec(this.chunk)) {
        length = this.heregexToken(match);
        this.line += count(match[0], '\n');
        return length;
      }
      prev = last(this.tokens);
      if (prev && (_ref3 = prev[0], __indexOf.call((prev.spaced ? NOT_REGEX : NOT_SPACED_REGEX), _ref3) >= 0)) {
        return 0;
      }
      if (!(match = REGEX.exec(this.chunk))) return 0;
      _ref4 = match, match = _ref4[0], regex = _ref4[1], flags = _ref4[2];
      if (regex.slice(0, 2) === '/*') {
        this.error('regular expressions cannot begin with `*`');
      }
      if (regex === '//') regex = '/(?:)/';
      this.token('REGEX', "" + regex + flags);
      return match.length;
    };

    Lexer.prototype.heregexToken = function(match) {
      var body, flags, heregex, re, tag, tokens, value, _i, _len, _ref3, _ref4, _ref5, _ref6;
      heregex = match[0], body = match[1], flags = match[2];
      if (0 > body.indexOf('#{')) {
        re = body.replace(HEREGEX_OMIT, '').replace(/\//g, '\\/');
        if (re.match(/^\*/)) {
          this.error('regular expressions cannot begin with `*`');
        }
        this.token('REGEX', "/" + (re || '(?:)') + "/" + flags);
        return heregex.length;
      }
      this.token('IDENTIFIER', 'RegExp');
      this.tokens.push(['CALL_START', '(']);
      tokens = [];
      _ref3 = this.interpolateString(body, {
        regex: true
      });
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        _ref4 = _ref3[_i], tag = _ref4[0], value = _ref4[1];
        if (tag === 'TOKENS') {
          tokens.push.apply(tokens, value);
        } else {
          if (!(value = value.replace(HEREGEX_OMIT, ''))) continue;
          value = value.replace(/\\/g, '\\\\');
          tokens.push(['STRING', this.makeString(value, '"', true)]);
        }
        tokens.push(['+', '+']);
      }
      tokens.pop();
      if (((_ref5 = tokens[0]) != null ? _ref5[0] : void 0) !== 'STRING') {
        this.tokens.push(['STRING', '""'], ['+', '+']);
      }
      (_ref6 = this.tokens).push.apply(_ref6, tokens);
      if (flags) this.tokens.push([',', ','], ['STRING', '"' + flags + '"']);
      this.token(')', ')');
      return heregex.length;
    };

    Lexer.prototype.lineToken = function() {
      var diff, indent, match, noNewlines, prev, size;
      if (!(match = MULTI_DENT.exec(this.chunk))) return 0;
      indent = match[0];
      this.line += count(indent, '\n');
      this.seenFor = false;
      prev = last(this.tokens, 1);
      size = indent.length - 1 - indent.lastIndexOf('\n');
      noNewlines = this.unfinished();
      if (size - this.indebt === this.indent) {
        if (noNewlines) {
          this.suppressNewlines();
        } else {
          this.newlineToken();
        }
        return indent.length;
      }
      if (size > this.indent) {
        if (noNewlines) {
          this.indebt = size - this.indent;
          this.suppressNewlines();
          return indent.length;
        }
        diff = size - this.indent + this.outdebt;
        this.token('INDENT', diff);
        this.indents.push(diff);
        this.ends.push('OUTDENT');
        this.outdebt = this.indebt = 0;
      } else {
        this.indebt = 0;
        this.outdentToken(this.indent - size, noNewlines);
      }
      this.indent = size;
      return indent.length;
    };

    Lexer.prototype.outdentToken = function(moveOut, noNewlines) {
      var dent, len;
      while (moveOut > 0) {
        len = this.indents.length - 1;
        if (this.indents[len] === void 0) {
          moveOut = 0;
        } else if (this.indents[len] === this.outdebt) {
          moveOut -= this.outdebt;
          this.outdebt = 0;
        } else if (this.indents[len] < this.outdebt) {
          this.outdebt -= this.indents[len];
          moveOut -= this.indents[len];
        } else {
          dent = this.indents.pop() - this.outdebt;
          moveOut -= dent;
          this.outdebt = 0;
          this.pair('OUTDENT');
          this.token('OUTDENT', dent);
        }
      }
      if (dent) this.outdebt -= moveOut;
      while (this.value() === ';') {
        this.tokens.pop();
      }
      if (!(this.tag() === 'TERMINATOR' || noNewlines)) {
        this.token('TERMINATOR', '\n');
      }
      return this;
    };

    Lexer.prototype.whitespaceToken = function() {
      var match, nline, prev;
      if (!((match = WHITESPACE.exec(this.chunk)) || (nline = this.chunk.charAt(0) === '\n'))) {
        return 0;
      }
      prev = last(this.tokens);
      if (prev) prev[match ? 'spaced' : 'newLine'] = true;
      if (match) {
        return match[0].length;
      } else {
        return 0;
      }
    };

    Lexer.prototype.newlineToken = function() {
      while (this.value() === ';') {
        this.tokens.pop();
      }
      if (this.tag() !== 'TERMINATOR') this.token('TERMINATOR', '\n');
      return this;
    };

    Lexer.prototype.suppressNewlines = function() {
      if (this.value() === '\\') this.tokens.pop();
      return this;
    };

    Lexer.prototype.literalToken = function() {
      var match, prev, tag, value, _ref3, _ref4, _ref5, _ref6;
      if (match = OPERATOR.exec(this.chunk)) {
        value = match[0];
        if (CODE.test(value)) this.tagParameters();
      } else {
        value = this.chunk.charAt(0);
      }
      tag = value;
      prev = last(this.tokens);
      if (value === '=' && prev) {
        if (!prev[1].reserved && (_ref3 = prev[1], __indexOf.call(JS_FORBIDDEN, _ref3) >= 0)) {
          this.error("reserved word \"" + (this.value()) + "\" can't be assigned");
        }
        if ((_ref4 = prev[1]) === '||' || _ref4 === '&&') {
          prev[0] = 'COMPOUND_ASSIGN';
          prev[1] += '=';
          return value.length;
        }
      }
      if (value === ';') {
        this.seenFor = false;
        tag = 'TERMINATOR';
      } else if (__indexOf.call(MATH, value) >= 0) {
        tag = 'MATH';
      } else if (__indexOf.call(COMPARE, value) >= 0) {
        tag = 'COMPARE';
      } else if (__indexOf.call(COMPOUND_ASSIGN, value) >= 0) {
        tag = 'COMPOUND_ASSIGN';
      } else if (__indexOf.call(UNARY, value) >= 0) {
        tag = 'UNARY';
      } else if (__indexOf.call(SHIFT, value) >= 0) {
        tag = 'SHIFT';
      } else if (__indexOf.call(LOGIC, value) >= 0 || value === '?' && (prev != null ? prev.spaced : void 0)) {
        tag = 'LOGIC';
      } else if (prev && !prev.spaced) {
        if (value === '(' && (_ref5 = prev[0], __indexOf.call(CALLABLE, _ref5) >= 0)) {
          if (prev[0] === '?') prev[0] = 'FUNC_EXIST';
          tag = 'CALL_START';
        } else if (value === '[' && (_ref6 = prev[0], __indexOf.call(INDEXABLE, _ref6) >= 0)) {
          tag = 'INDEX_START';
          switch (prev[0]) {
            case '?':
              prev[0] = 'INDEX_SOAK';
          }
        }
      }
      switch (value) {
        case '(':
        case '{':
        case '[':
          this.ends.push(INVERSES[value]);
          break;
        case ')':
        case '}':
        case ']':
          this.pair(value);
      }
      this.token(tag, value);
      return value.length;
    };

    Lexer.prototype.sanitizeHeredoc = function(doc, options) {
      var attempt, herecomment, indent, match, _ref3;
      indent = options.indent, herecomment = options.herecomment;
      if (herecomment) {
        if (HEREDOC_ILLEGAL.test(doc)) {
          this.error("block comment cannot contain \"*/\", starting");
        }
        if (doc.indexOf('\n') <= 0) return doc;
      } else {
        while (match = HEREDOC_INDENT.exec(doc)) {
          attempt = match[1];
          if (indent === null || (0 < (_ref3 = attempt.length) && _ref3 < indent.length)) {
            indent = attempt;
          }
        }
      }
      if (indent) doc = doc.replace(RegExp("\\n" + indent, "g"), '\n');
      if (!herecomment) doc = doc.replace(/^\n/, '');
      return doc;
    };

    Lexer.prototype.tagParameters = function() {
      var i, stack, tok, tokens;
      if (this.tag() !== ')') return this;
      stack = [];
      tokens = this.tokens;
      i = tokens.length;
      tokens[--i][0] = 'PARAM_END';
      while (tok = tokens[--i]) {
        switch (tok[0]) {
          case ')':
            stack.push(tok);
            break;
          case '(':
          case 'CALL_START':
            if (stack.length) {
              stack.pop();
            } else if (tok[0] === '(') {
              tok[0] = 'PARAM_START';
              return this;
            } else {
              return this;
            }
        }
      }
      return this;
    };

    Lexer.prototype.closeIndentation = function() {
      return this.outdentToken(this.indent);
    };

    Lexer.prototype.balancedString = function(str, end) {
      var continueCount, i, letter, match, prev, stack, _i, _ref3;
      continueCount = 0;
      stack = [end];
      for (i = _i = 1, _ref3 = str.length; 1 <= _ref3 ? _i < _ref3 : _i > _ref3; i = 1 <= _ref3 ? ++_i : --_i) {
        if (continueCount) {
          --continueCount;
          continue;
        }
        switch (letter = str.charAt(i)) {
          case '\\':
            ++continueCount;
            continue;
          case end:
            stack.pop();
            if (!stack.length) return str.slice(0, i + 1 || 9e9);
            end = stack[stack.length - 1];
            continue;
        }
        if (end === '}' && (letter === '"' || letter === "'")) {
          stack.push(end = letter);
        } else if (end === '}' && letter === '/' && (match = HEREGEX.exec(str.slice(i)) || REGEX.exec(str.slice(i)))) {
          continueCount += match[0].length - 1;
        } else if (end === '}' && letter === '{') {
          stack.push(end = '}');
        } else if (end === '"' && prev === '#' && letter === '{') {
          stack.push(end = '}');
        }
        prev = letter;
      }
      return this.error("missing " + (stack.pop()) + ", starting");
    };

    Lexer.prototype.interpolateString = function(str, options) {
      var expr, heredoc, i, inner, interpolated, len, letter, nested, pi, regex, tag, tokens, value, _i, _len, _ref3, _ref4, _ref5;
      if (options == null) options = {};
      heredoc = options.heredoc, regex = options.regex;
      tokens = [];
      pi = 0;
      i = -1;
      while (letter = str.charAt(i += 1)) {
        if (letter === '\\') {
          i += 1;
          continue;
        }
        if (!(letter === '#' && str.charAt(i + 1) === '{' && (expr = this.balancedString(str.slice(i + 1), '}')))) {
          continue;
        }
        if (pi < i) tokens.push(['NEOSTRING', str.slice(pi, i)]);
        inner = expr.slice(1, -1);
        if (inner.length) {
          nested = new Lexer().tokenize(inner, {
            line: this.line,
            rewrite: false
          });
          nested.pop();
          if (((_ref3 = nested[0]) != null ? _ref3[0] : void 0) === 'TERMINATOR') {
            nested.shift();
          }
          if (len = nested.length) {
            if (len > 1) {
              nested.unshift(['(', '(', this.line]);
              nested.push([')', ')', this.line]);
            }
            tokens.push(['TOKENS', nested]);
          }
        }
        i += expr.length;
        pi = i + 1;
      }
      if ((i > pi && pi < str.length)) tokens.push(['NEOSTRING', str.slice(pi)]);
      if (regex) return tokens;
      if (!tokens.length) return this.token('STRING', '""');
      if (tokens[0][0] !== 'NEOSTRING') tokens.unshift(['', '']);
      if (interpolated = tokens.length > 1) this.token('(', '(');
      for (i = _i = 0, _len = tokens.length; _i < _len; i = ++_i) {
        _ref4 = tokens[i], tag = _ref4[0], value = _ref4[1];
        if (i) this.token('+', '+');
        if (tag === 'TOKENS') {
          (_ref5 = this.tokens).push.apply(_ref5, value);
        } else {
          this.token('STRING', this.makeString(value, '"', heredoc));
        }
      }
      if (interpolated) this.token(')', ')');
      return tokens;
    };

    Lexer.prototype.pair = function(tag) {
      var size, wanted;
      if (tag !== (wanted = last(this.ends))) {
        if ('OUTDENT' !== wanted) this.error("unmatched " + tag);
        this.indent -= size = last(this.indents);
        this.outdentToken(size, true);
        return this.pair(tag);
      }
      return this.ends.pop();
    };

    Lexer.prototype.token = function(tag, value) {
      return this.tokens.push([tag, value, this.line]);
    };

    Lexer.prototype.tag = function(index, tag) {
      var tok;
      return (tok = last(this.tokens, index)) && (tag ? tok[0] = tag : tok[0]);
    };

    Lexer.prototype.value = function(index, val) {
      var tok;
      return (tok = last(this.tokens, index)) && (val ? tok[1] = val : tok[1]);
    };

    Lexer.prototype.unfinished = function() {
      var _ref3;
      return LINE_CONTINUER.test(this.chunk) || ((_ref3 = this.tag()) === '\\' || _ref3 === '.' || _ref3 === '?.' || _ref3 === 'UNARY' || _ref3 === 'MATH' || _ref3 === '+' || _ref3 === '-' || _ref3 === 'SHIFT' || _ref3 === 'RELATION' || _ref3 === 'COMPARE' || _ref3 === 'LOGIC' || _ref3 === 'THROW' || _ref3 === 'EXTENDS');
    };

    Lexer.prototype.escapeLines = function(str, heredoc) {
      return str.replace(MULTILINER, heredoc ? '\\n' : '');
    };

    Lexer.prototype.makeString = function(body, quote, heredoc) {
      if (!body) return quote + quote;
      body = body.replace(/\\([\s\S])/g, function(match, contents) {
        if (contents === '\n' || contents === quote) {
          return contents;
        } else {
          return match;
        }
      });
      body = body.replace(RegExp("" + quote, "g"), '\\$&');
      return quote + this.escapeLines(body, heredoc) + quote;
    };

    Lexer.prototype.error = function(message) {
      throw SyntaxError("" + message + " on line " + (this.line + 1));
    };

    return Lexer;

  })();

  JS_KEYWORDS = ['true', 'false', 'null', 'this', 'new', 'delete', 'typeof', 'in', 'instanceof', 'return', 'throw', 'break', 'continue', 'debugger', 'if', 'else', 'switch', 'for', 'while', 'do', 'try', 'catch', 'finally', 'class', 'extends', 'super'];

  COFFEE_KEYWORDS = ['undefined', 'then', 'unless', 'until', 'loop', 'of', 'by', 'when', 'await', 'defer', 'tameRequire'];

  COFFEE_ALIAS_MAP = {
    and: '&&',
    or: '||',
    is: '==',
    isnt: '!=',
    not: '!',
    yes: 'true',
    no: 'false',
    on: 'true',
    off: 'false'
  };

  COFFEE_ALIASES = (function() {
    var _results;
    _results = [];
    for (key in COFFEE_ALIAS_MAP) {
      _results.push(key);
    }
    return _results;
  })();

  COFFEE_KEYWORDS = COFFEE_KEYWORDS.concat(COFFEE_ALIASES);

  RESERVED = ['case', 'default', 'function', 'var', 'void', 'with', 'const', 'let', 'enum', 'export', 'import', 'native', '__hasProp', '__extends', '__slice', '__bind', '__indexOf'];

  JS_FORBIDDEN = JS_KEYWORDS.concat(RESERVED);

  exports.RESERVED = RESERVED.concat(JS_KEYWORDS).concat(COFFEE_KEYWORDS);

  IDENTIFIER = /^([$A-Za-z_\x7f-\uffff][$\w\x7f-\uffff]*)([^\n\S]*:(?!:))?/;

  NUMBER = /^0x[\da-f]+|^0b[01]+|^\d*\.?\d+(?:e[+-]?\d+)?/i;

  HEREDOC = /^("""|''')([\s\S]*?)(?:\n[^\n\S]*)?\1/;

  OPERATOR = /^(?:[-=]>|[-+*\/%<>&|^!?=]=|>>>=?|([-+:])\1|([&|<>])\2=?|\?\.|\.{2,3})/;

  WHITESPACE = /^[^\n\S]+/;

  COMMENT = /^###([^#][\s\S]*?)(?:###[^\n\S]*|(?:###)?$)|^(?:\s*#(?!##[^#]).*)+/;

  CODE = /^[-=]>/;

  MULTI_DENT = /^(?:\n[^\n\S]*)+/;

  SIMPLESTR = /^'[^\\']*(?:\\.[^\\']*)*'/;

  JSTOKEN = /^`[^\\`]*(?:\\.[^\\`]*)*`/;

  REGEX = /^(\/(?![\s=])[^[\/\n\\]*(?:(?:\\[\s\S]|\[[^\]\n\\]*(?:\\[\s\S][^\]\n\\]*)*])[^[\/\n\\]*)*\/)([imgy]{0,4})(?!\w)/;

  HEREGEX = /^\/{3}([\s\S]+?)\/{3}([imgy]{0,4})(?!\w)/;

  HEREGEX_OMIT = /\s+(?:#.*)?/g;

  MULTILINER = /\n/g;

  HEREDOC_INDENT = /\n+([^\n\S]*)/g;

  HEREDOC_ILLEGAL = /\*\//;

  LINE_CONTINUER = /^\s*(?:,|\??\.(?![.\d])|::)/;

  TRAILING_SPACES = /\s+$/;

  COMPOUND_ASSIGN = ['-=', '+=', '/=', '*=', '%=', '||=', '&&=', '?=', '<<=', '>>=', '>>>=', '&=', '^=', '|='];

  UNARY = ['!', '~', 'NEW', 'TYPEOF', 'DELETE', 'DO'];

  LOGIC = ['&&', '||', '&', '|', '^'];

  SHIFT = ['<<', '>>', '>>>'];

  COMPARE = ['==', '!=', '<', '>', '<=', '>='];

  MATH = ['*', '/', '%'];

  RELATION = ['IN', 'OF', 'INSTANCEOF'];

  BOOL = ['TRUE', 'FALSE', 'NULL', 'UNDEFINED'];

  NOT_REGEX = ['NUMBER', 'REGEX', 'BOOL', '++', '--', ']'];

  NOT_SPACED_REGEX = NOT_REGEX.concat(')', '}', 'THIS', 'IDENTIFIER', 'STRING');

  CALLABLE = ['IDENTIFIER', 'STRING', 'REGEX', ')', ']', '}', '?', '::', '@', 'THIS', 'SUPER', 'DEFER', 'TAMEREQUIRE'];

  INDEXABLE = CALLABLE.concat('NUMBER', 'BOOL');

  LINE_BREAK = ['INDENT', 'OUTDENT', 'TERMINATOR'];

}).call(this);

};require['./parser'] = new function() {
  var exports = this;
  /* Jison generated parser */
var parser = (function(){
undefined
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Root":3,"Body":4,"Block":5,"TERMINATOR":6,"Line":7,"Expression":8,"Statement":9,"Return":10,"Comment":11,"STATEMENT":12,"Require":13,"TAMEREQUIRE":14,"Arguments":15,"Await":16,"AWAIT":17,"Value":18,"Invocation":19,"Code":20,"Operation":21,"Assign":22,"If":23,"Try":24,"While":25,"For":26,"Switch":27,"Class":28,"Throw":29,"Defer":30,"INDENT":31,"OUTDENT":32,"Identifier":33,"IDENTIFIER":34,"AlphaNumeric":35,"NUMBER":36,"STRING":37,"Literal":38,"JS":39,"REGEX":40,"DEBUGGER":41,"BOOL":42,"Assignable":43,"=":44,"AssignObj":45,"ObjAssignable":46,":":47,"ThisProperty":48,"RETURN":49,"HERECOMMENT":50,"PARAM_START":51,"ParamList":52,"PARAM_END":53,"FuncGlyph":54,"->":55,"=>":56,"OptComma":57,",":58,"Param":59,"ParamVar":60,"...":61,"Array":62,"Object":63,"Splat":64,"SimpleAssignable":65,"Accessor":66,"Parenthetical":67,"Range":68,"This":69,".":70,"?.":71,"::":72,"Index":73,"INDEX_START":74,"IndexValue":75,"INDEX_END":76,"INDEX_SOAK":77,"Slice":78,"{":79,"AssignList":80,"}":81,"CLASS":82,"EXTENDS":83,"OptFuncExist":84,"SUPER":85,"DEFER":86,"FUNC_EXIST":87,"CALL_START":88,"CALL_END":89,"ArgList":90,"THIS":91,"@":92,"[":93,"]":94,"RangeDots":95,"..":96,"Arg":97,"SimpleArgs":98,"TRY":99,"Catch":100,"FINALLY":101,"CATCH":102,"THROW":103,"(":104,")":105,"WhileSource":106,"WHILE":107,"WHEN":108,"UNTIL":109,"Loop":110,"LOOP":111,"ForBody":112,"FOR":113,"ForStart":114,"ForSource":115,"ForVariables":116,"OWN":117,"ForValue":118,"FORIN":119,"FOROF":120,"BY":121,"SWITCH":122,"Whens":123,"ELSE":124,"When":125,"LEADING_WHEN":126,"IfBlock":127,"IF":128,"POST_IF":129,"UNARY":130,"-":131,"+":132,"--":133,"++":134,"?":135,"MATH":136,"SHIFT":137,"COMPARE":138,"LOGIC":139,"RELATION":140,"COMPOUND_ASSIGN":141,"$accept":0,"$end":1},
terminals_: {2:"error",6:"TERMINATOR",12:"STATEMENT",14:"TAMEREQUIRE",17:"AWAIT",31:"INDENT",32:"OUTDENT",34:"IDENTIFIER",36:"NUMBER",37:"STRING",39:"JS",40:"REGEX",41:"DEBUGGER",42:"BOOL",44:"=",47:":",49:"RETURN",50:"HERECOMMENT",51:"PARAM_START",53:"PARAM_END",55:"->",56:"=>",58:",",61:"...",70:".",71:"?.",72:"::",74:"INDEX_START",76:"INDEX_END",77:"INDEX_SOAK",79:"{",81:"}",82:"CLASS",83:"EXTENDS",85:"SUPER",86:"DEFER",87:"FUNC_EXIST",88:"CALL_START",89:"CALL_END",91:"THIS",92:"@",93:"[",94:"]",96:"..",99:"TRY",101:"FINALLY",102:"CATCH",103:"THROW",104:"(",105:")",107:"WHILE",108:"WHEN",109:"UNTIL",111:"LOOP",113:"FOR",117:"OWN",119:"FORIN",120:"FOROF",121:"BY",122:"SWITCH",124:"ELSE",126:"LEADING_WHEN",128:"IF",129:"POST_IF",130:"UNARY",131:"-",132:"+",133:"--",134:"++",135:"?",136:"MATH",137:"SHIFT",138:"COMPARE",139:"LOGIC",140:"RELATION",141:"COMPOUND_ASSIGN"},
productions_: [0,[3,0],[3,1],[3,2],[4,1],[4,3],[4,2],[7,1],[7,1],[9,1],[9,1],[9,1],[9,1],[13,2],[16,2],[16,2],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[5,2],[5,3],[33,1],[35,1],[35,1],[38,1],[38,1],[38,1],[38,1],[38,1],[22,3],[22,4],[22,5],[45,1],[45,3],[45,5],[45,1],[46,1],[46,1],[46,1],[10,2],[10,1],[11,1],[20,5],[20,2],[54,1],[54,1],[57,0],[57,1],[52,0],[52,1],[52,3],[59,1],[59,2],[59,3],[60,1],[60,1],[60,1],[60,1],[64,2],[65,1],[65,2],[65,2],[65,1],[43,1],[43,1],[43,1],[18,1],[18,1],[18,1],[18,1],[18,1],[66,2],[66,2],[66,2],[66,2],[66,1],[66,1],[73,3],[73,2],[75,1],[75,1],[63,4],[80,0],[80,1],[80,3],[80,4],[80,6],[28,1],[28,2],[28,3],[28,4],[28,2],[28,3],[28,4],[28,5],[19,3],[19,3],[19,1],[19,2],[30,2],[84,0],[84,1],[15,2],[15,4],[69,1],[69,1],[48,2],[62,2],[62,4],[95,1],[95,1],[68,5],[78,3],[78,2],[78,2],[78,1],[90,1],[90,3],[90,4],[90,4],[90,6],[97,1],[97,1],[98,1],[98,3],[24,2],[24,3],[24,4],[24,5],[100,3],[29,2],[67,3],[67,5],[106,2],[106,4],[106,2],[106,4],[25,2],[25,2],[25,2],[25,1],[110,2],[110,2],[26,2],[26,2],[26,2],[112,2],[112,2],[114,2],[114,3],[118,1],[118,1],[118,1],[116,1],[116,3],[115,2],[115,2],[115,4],[115,4],[115,4],[115,6],[115,6],[27,5],[27,7],[27,4],[27,6],[123,1],[123,2],[125,3],[125,4],[127,3],[127,5],[23,1],[23,3],[23,3],[23,3],[21,2],[21,2],[21,2],[21,2],[21,2],[21,2],[21,2],[21,2],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,5],[21,3]],
performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {

var $0 = $$.length - 1;
switch (yystate) {
case 1:return this.$ = new yy.Block;
break;
case 2:return this.$ = $$[$0];
break;
case 3:return this.$ = $$[$0-1];
break;
case 4:this.$ = yy.Block.wrap([$$[$0]]);
break;
case 5:this.$ = $$[$0-2].push($$[$0]);
break;
case 6:this.$ = $$[$0-1];
break;
case 7:this.$ = $$[$0];
break;
case 8:this.$ = $$[$0];
break;
case 9:this.$ = $$[$0];
break;
case 10:this.$ = $$[$0];
break;
case 11:this.$ = new yy.Literal($$[$0]);
break;
case 12:this.$ = $$[$0];
break;
case 13:this.$ = new yy.TameRequire($$[$0]);
break;
case 14:this.$ = new yy.Await($$[$0]);
break;
case 15:this.$ = new yy.Await(yy.Block.wrap([$$[$0]]));
break;
case 16:this.$ = $$[$0];
break;
case 17:this.$ = $$[$0];
break;
case 18:this.$ = $$[$0];
break;
case 19:this.$ = $$[$0];
break;
case 20:this.$ = $$[$0];
break;
case 21:this.$ = $$[$0];
break;
case 22:this.$ = $$[$0];
break;
case 23:this.$ = $$[$0];
break;
case 24:this.$ = $$[$0];
break;
case 25:this.$ = $$[$0];
break;
case 26:this.$ = $$[$0];
break;
case 27:this.$ = $$[$0];
break;
case 28:this.$ = $$[$0];
break;
case 29:this.$ = $$[$0];
break;
case 30:this.$ = new yy.Block;
break;
case 31:this.$ = $$[$0-1];
break;
case 32:this.$ = new yy.Literal($$[$0]);
break;
case 33:this.$ = new yy.Literal($$[$0]);
break;
case 34:this.$ = new yy.Literal($$[$0]);
break;
case 35:this.$ = $$[$0];
break;
case 36:this.$ = new yy.Literal($$[$0]);
break;
case 37:this.$ = new yy.Literal($$[$0]);
break;
case 38:this.$ = new yy.Literal($$[$0]);
break;
case 39:this.$ = (function () {
        var val;
        val = new yy.Literal($$[$0]);
        if ($$[$0] === 'undefined') val.isUndefined = true;
        return val;
      }());
break;
case 40:this.$ = new yy.Assign($$[$0-2], $$[$0]);
break;
case 41:this.$ = new yy.Assign($$[$0-3], $$[$0]);
break;
case 42:this.$ = new yy.Assign($$[$0-4], $$[$0-1]);
break;
case 43:this.$ = new yy.Value($$[$0]);
break;
case 44:this.$ = new yy.Assign(new yy.Value($$[$0-2]), $$[$0], 'object');
break;
case 45:this.$ = new yy.Assign(new yy.Value($$[$0-4]), $$[$0-1], 'object');
break;
case 46:this.$ = $$[$0];
break;
case 47:this.$ = $$[$0];
break;
case 48:this.$ = $$[$0];
break;
case 49:this.$ = $$[$0];
break;
case 50:this.$ = new yy.Return($$[$0]);
break;
case 51:this.$ = new yy.Return;
break;
case 52:this.$ = new yy.Comment($$[$0]);
break;
case 53:this.$ = new yy.Code($$[$0-3], $$[$0], $$[$0-1]);
break;
case 54:this.$ = new yy.Code([], $$[$0], $$[$0-1]);
break;
case 55:this.$ = 'func';
break;
case 56:this.$ = 'boundfunc';
break;
case 57:this.$ = $$[$0];
break;
case 58:this.$ = $$[$0];
break;
case 59:this.$ = [];
break;
case 60:this.$ = [$$[$0]];
break;
case 61:this.$ = $$[$0-2].concat($$[$0]);
break;
case 62:this.$ = new yy.Param($$[$0]);
break;
case 63:this.$ = new yy.Param($$[$0-1], null, true);
break;
case 64:this.$ = new yy.Param($$[$0-2], $$[$0]);
break;
case 65:this.$ = $$[$0];
break;
case 66:this.$ = $$[$0];
break;
case 67:this.$ = $$[$0];
break;
case 68:this.$ = $$[$0];
break;
case 69:this.$ = new yy.Splat($$[$0-1]);
break;
case 70:this.$ = new yy.Value($$[$0]);
break;
case 71:this.$ = $$[$0-1].add($$[$0]);
break;
case 72:this.$ = new yy.Value($$[$0-1], [].concat($$[$0]));
break;
case 73:this.$ = $$[$0];
break;
case 74:this.$ = $$[$0];
break;
case 75:this.$ = new yy.Value($$[$0]);
break;
case 76:this.$ = new yy.Value($$[$0]);
break;
case 77:this.$ = $$[$0];
break;
case 78:this.$ = new yy.Value($$[$0]);
break;
case 79:this.$ = new yy.Value($$[$0]);
break;
case 80:this.$ = new yy.Value($$[$0]);
break;
case 81:this.$ = $$[$0];
break;
case 82:this.$ = new yy.Access($$[$0]);
break;
case 83:this.$ = new yy.Access($$[$0]);
break;
case 84:this.$ = new yy.Access($$[$0], 'soak');
break;
case 85:this.$ = [new yy.Access(new yy.Literal('prototype')), new yy.Access($$[$0])];
break;
case 86:this.$ = new yy.Access(new yy.Literal('prototype'));
break;
case 87:this.$ = $$[$0];
break;
case 88:this.$ = $$[$0-1];
break;
case 89:this.$ = yy.extend($$[$0], {
          soak: true
        });
break;
case 90:this.$ = new yy.Index($$[$0]);
break;
case 91:this.$ = new yy.Slice($$[$0]);
break;
case 92:this.$ = new yy.Obj($$[$0-2], $$[$0-3].generated);
break;
case 93:this.$ = [];
break;
case 94:this.$ = [$$[$0]];
break;
case 95:this.$ = $$[$0-2].concat($$[$0]);
break;
case 96:this.$ = $$[$0-3].concat($$[$0]);
break;
case 97:this.$ = $$[$0-5].concat($$[$0-2]);
break;
case 98:this.$ = new yy.Class;
break;
case 99:this.$ = new yy.Class(null, null, $$[$0]);
break;
case 100:this.$ = new yy.Class(null, $$[$0]);
break;
case 101:this.$ = new yy.Class(null, $$[$0-1], $$[$0]);
break;
case 102:this.$ = new yy.Class($$[$0]);
break;
case 103:this.$ = new yy.Class($$[$0-1], null, $$[$0]);
break;
case 104:this.$ = new yy.Class($$[$0-2], $$[$0]);
break;
case 105:this.$ = new yy.Class($$[$0-3], $$[$0-1], $$[$0]);
break;
case 106:this.$ = new yy.Call($$[$0-2], $$[$0], $$[$0-1]);
break;
case 107:this.$ = new yy.Call($$[$0-2], $$[$0], $$[$0-1]);
break;
case 108:this.$ = new yy.Call('super', [new yy.Splat(new yy.Literal('arguments'))]);
break;
case 109:this.$ = new yy.Call('super', $$[$0]);
break;
case 110:this.$ = new yy.Defer($$[$0]);
break;
case 111:this.$ = false;
break;
case 112:this.$ = true;
break;
case 113:this.$ = [];
break;
case 114:this.$ = $$[$0-2];
break;
case 115:this.$ = new yy.Value(new yy.Literal('this'));
break;
case 116:this.$ = new yy.Value(new yy.Literal('this'));
break;
case 117:this.$ = new yy.Value(new yy.Literal('this'), [new yy.Access($$[$0])], 'this');
break;
case 118:this.$ = new yy.Arr([]);
break;
case 119:this.$ = new yy.Arr($$[$0-2]);
break;
case 120:this.$ = 'inclusive';
break;
case 121:this.$ = 'exclusive';
break;
case 122:this.$ = new yy.Range($$[$0-3], $$[$0-1], $$[$0-2]);
break;
case 123:this.$ = new yy.Range($$[$0-2], $$[$0], $$[$0-1]);
break;
case 124:this.$ = new yy.Range($$[$0-1], null, $$[$0]);
break;
case 125:this.$ = new yy.Range(null, $$[$0], $$[$0-1]);
break;
case 126:this.$ = new yy.Range(null, null, $$[$0]);
break;
case 127:this.$ = [$$[$0]];
break;
case 128:this.$ = $$[$0-2].concat($$[$0]);
break;
case 129:this.$ = $$[$0-3].concat($$[$0]);
break;
case 130:this.$ = $$[$0-2];
break;
case 131:this.$ = $$[$0-5].concat($$[$0-2]);
break;
case 132:this.$ = $$[$0];
break;
case 133:this.$ = $$[$0];
break;
case 134:this.$ = $$[$0];
break;
case 135:this.$ = [].concat($$[$0-2], $$[$0]);
break;
case 136:this.$ = new yy.Try($$[$0]);
break;
case 137:this.$ = new yy.Try($$[$0-1], $$[$0][0], $$[$0][1]);
break;
case 138:this.$ = new yy.Try($$[$0-2], null, null, $$[$0]);
break;
case 139:this.$ = new yy.Try($$[$0-3], $$[$0-2][0], $$[$0-2][1], $$[$0]);
break;
case 140:this.$ = [$$[$0-1], $$[$0]];
break;
case 141:this.$ = new yy.Throw($$[$0]);
break;
case 142:this.$ = new yy.Parens($$[$0-1]);
break;
case 143:this.$ = new yy.Parens($$[$0-2]);
break;
case 144:this.$ = new yy.While($$[$0]);
break;
case 145:this.$ = new yy.While($$[$0-2], {
          guard: $$[$0]
        });
break;
case 146:this.$ = new yy.While($$[$0], {
          invert: true
        });
break;
case 147:this.$ = new yy.While($$[$0-2], {
          invert: true,
          guard: $$[$0]
        });
break;
case 148:this.$ = $$[$0-1].addBody($$[$0]);
break;
case 149:this.$ = $$[$0].addBody(yy.Block.wrap([$$[$0-1]]));
break;
case 150:this.$ = $$[$0].addBody(yy.Block.wrap([$$[$0-1]]));
break;
case 151:this.$ = $$[$0];
break;
case 152:this.$ = new yy.While(new yy.Literal('true')).addBody($$[$0]);
break;
case 153:this.$ = new yy.While(new yy.Literal('true')).addBody(yy.Block.wrap([$$[$0]]));
break;
case 154:this.$ = new yy.For($$[$0-1], $$[$0]);
break;
case 155:this.$ = new yy.For($$[$0-1], $$[$0]);
break;
case 156:this.$ = new yy.For($$[$0], $$[$0-1]);
break;
case 157:this.$ = {
          source: new yy.Value($$[$0])
        };
break;
case 158:this.$ = (function () {
        $$[$0].own = $$[$0-1].own;
        $$[$0].name = $$[$0-1][0];
        $$[$0].index = $$[$0-1][1];
        return $$[$0];
      }());
break;
case 159:this.$ = $$[$0];
break;
case 160:this.$ = (function () {
        $$[$0].own = true;
        return $$[$0];
      }());
break;
case 161:this.$ = $$[$0];
break;
case 162:this.$ = new yy.Value($$[$0]);
break;
case 163:this.$ = new yy.Value($$[$0]);
break;
case 164:this.$ = [$$[$0]];
break;
case 165:this.$ = [$$[$0-2], $$[$0]];
break;
case 166:this.$ = {
          source: $$[$0]
        };
break;
case 167:this.$ = {
          source: $$[$0],
          object: true
        };
break;
case 168:this.$ = {
          source: $$[$0-2],
          guard: $$[$0]
        };
break;
case 169:this.$ = {
          source: $$[$0-2],
          guard: $$[$0],
          object: true
        };
break;
case 170:this.$ = {
          source: $$[$0-2],
          step: $$[$0]
        };
break;
case 171:this.$ = {
          source: $$[$0-4],
          guard: $$[$0-2],
          step: $$[$0]
        };
break;
case 172:this.$ = {
          source: $$[$0-4],
          step: $$[$0-2],
          guard: $$[$0]
        };
break;
case 173:this.$ = new yy.Switch($$[$0-3], $$[$0-1]);
break;
case 174:this.$ = new yy.Switch($$[$0-5], $$[$0-3], $$[$0-1]);
break;
case 175:this.$ = new yy.Switch(null, $$[$0-1]);
break;
case 176:this.$ = new yy.Switch(null, $$[$0-3], $$[$0-1]);
break;
case 177:this.$ = $$[$0];
break;
case 178:this.$ = $$[$0-1].concat($$[$0]);
break;
case 179:this.$ = [[$$[$0-1], $$[$0]]];
break;
case 180:this.$ = [[$$[$0-2], $$[$0-1]]];
break;
case 181:this.$ = new yy.If($$[$0-1], $$[$0], {
          type: $$[$0-2]
        });
break;
case 182:this.$ = $$[$0-4].addElse(new yy.If($$[$0-1], $$[$0], {
          type: $$[$0-2]
        }));
break;
case 183:this.$ = $$[$0];
break;
case 184:this.$ = $$[$0-2].addElse($$[$0]);
break;
case 185:this.$ = new yy.If($$[$0], yy.Block.wrap([$$[$0-2]]), {
          type: $$[$0-1],
          statement: true
        });
break;
case 186:this.$ = new yy.If($$[$0], yy.Block.wrap([$$[$0-2]]), {
          type: $$[$0-1],
          statement: true
        });
break;
case 187:this.$ = new yy.Op($$[$0-1], $$[$0]);
break;
case 188:this.$ = new yy.Op('-', $$[$0]);
break;
case 189:this.$ = new yy.Op('+', $$[$0]);
break;
case 190:this.$ = new yy.Op('--', $$[$0]);
break;
case 191:this.$ = new yy.Op('++', $$[$0]);
break;
case 192:this.$ = new yy.Op('--', $$[$0-1], null, true);
break;
case 193:this.$ = new yy.Op('++', $$[$0-1], null, true);
break;
case 194:this.$ = new yy.Existence($$[$0-1]);
break;
case 195:this.$ = new yy.Op('+', $$[$0-2], $$[$0]);
break;
case 196:this.$ = new yy.Op('-', $$[$0-2], $$[$0]);
break;
case 197:this.$ = new yy.Op($$[$0-1], $$[$0-2], $$[$0]);
break;
case 198:this.$ = new yy.Op($$[$0-1], $$[$0-2], $$[$0]);
break;
case 199:this.$ = new yy.Op($$[$0-1], $$[$0-2], $$[$0]);
break;
case 200:this.$ = new yy.Op($$[$0-1], $$[$0-2], $$[$0]);
break;
case 201:this.$ = (function () {
        if ($$[$0-1].charAt(0) === '!') {
          return new yy.Op($$[$0-1].slice(1), $$[$0-2], $$[$0]).invert();
        } else {
          return new yy.Op($$[$0-1], $$[$0-2], $$[$0]);
        }
      }());
break;
case 202:this.$ = new yy.Assign($$[$0-2], $$[$0], $$[$0-1]);
break;
case 203:this.$ = new yy.Assign($$[$0-4], $$[$0-1], $$[$0-3]);
break;
case 204:this.$ = new yy.Extends($$[$0-2], $$[$0]);
break;
}
},
table: [{1:[2,1],3:1,4:2,5:3,7:4,8:6,9:7,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,31:[1,5],33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{1:[3]},{1:[2,2],6:[1,78]},{6:[1,79]},{1:[2,4],6:[2,4],32:[2,4],105:[2,4]},{4:81,7:4,8:6,9:7,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,32:[1,80],33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{1:[2,7],6:[2,7],32:[2,7],105:[2,7],106:91,107:[1,69],109:[1,70],112:92,113:[1,72],114:73,129:[1,90],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[1,87],139:[1,88],140:[1,89]},{1:[2,8],6:[2,8],32:[2,8],105:[2,8],106:94,107:[1,69],109:[1,70],112:95,113:[1,72],114:73,129:[1,93]},{1:[2,16],6:[2,16],31:[2,16],32:[2,16],53:[2,16],58:[2,16],61:[2,16],66:97,70:[1,99],71:[1,100],72:[1,101],73:102,74:[1,103],76:[2,16],77:[1,104],81:[2,16],84:96,87:[1,98],88:[2,111],89:[2,16],94:[2,16],96:[2,16],105:[2,16],107:[2,16],108:[2,16],109:[2,16],113:[2,16],121:[2,16],129:[2,16],131:[2,16],132:[2,16],135:[2,16],136:[2,16],137:[2,16],138:[2,16],139:[2,16],140:[2,16]},{1:[2,17],6:[2,17],31:[2,17],32:[2,17],53:[2,17],58:[2,17],61:[2,17],66:106,70:[1,99],71:[1,100],72:[1,101],73:102,74:[1,103],76:[2,17],77:[1,104],81:[2,17],84:105,87:[1,98],88:[2,111],89:[2,17],94:[2,17],96:[2,17],105:[2,17],107:[2,17],108:[2,17],109:[2,17],113:[2,17],121:[2,17],129:[2,17],131:[2,17],132:[2,17],135:[2,17],136:[2,17],137:[2,17],138:[2,17],139:[2,17],140:[2,17]},{1:[2,18],6:[2,18],31:[2,18],32:[2,18],53:[2,18],58:[2,18],61:[2,18],76:[2,18],81:[2,18],89:[2,18],94:[2,18],96:[2,18],105:[2,18],107:[2,18],108:[2,18],109:[2,18],113:[2,18],121:[2,18],129:[2,18],131:[2,18],132:[2,18],135:[2,18],136:[2,18],137:[2,18],138:[2,18],139:[2,18],140:[2,18]},{1:[2,19],6:[2,19],31:[2,19],32:[2,19],53:[2,19],58:[2,19],61:[2,19],76:[2,19],81:[2,19],89:[2,19],94:[2,19],96:[2,19],105:[2,19],107:[2,19],108:[2,19],109:[2,19],113:[2,19],121:[2,19],129:[2,19],131:[2,19],132:[2,19],135:[2,19],136:[2,19],137:[2,19],138:[2,19],139:[2,19],140:[2,19]},{1:[2,20],6:[2,20],31:[2,20],32:[2,20],53:[2,20],58:[2,20],61:[2,20],76:[2,20],81:[2,20],89:[2,20],94:[2,20],96:[2,20],105:[2,20],107:[2,20],108:[2,20],109:[2,20],113:[2,20],121:[2,20],129:[2,20],131:[2,20],132:[2,20],135:[2,20],136:[2,20],137:[2,20],138:[2,20],139:[2,20],140:[2,20]},{1:[2,21],6:[2,21],31:[2,21],32:[2,21],53:[2,21],58:[2,21],61:[2,21],76:[2,21],81:[2,21],89:[2,21],94:[2,21],96:[2,21],105:[2,21],107:[2,21],108:[2,21],109:[2,21],113:[2,21],121:[2,21],129:[2,21],131:[2,21],132:[2,21],135:[2,21],136:[2,21],137:[2,21],138:[2,21],139:[2,21],140:[2,21]},{1:[2,22],6:[2,22],31:[2,22],32:[2,22],53:[2,22],58:[2,22],61:[2,22],76:[2,22],81:[2,22],89:[2,22],94:[2,22],96:[2,22],105:[2,22],107:[2,22],108:[2,22],109:[2,22],113:[2,22],121:[2,22],129:[2,22],131:[2,22],132:[2,22],135:[2,22],136:[2,22],137:[2,22],138:[2,22],139:[2,22],140:[2,22]},{1:[2,23],6:[2,23],31:[2,23],32:[2,23],53:[2,23],58:[2,23],61:[2,23],76:[2,23],81:[2,23],89:[2,23],94:[2,23],96:[2,23],105:[2,23],107:[2,23],108:[2,23],109:[2,23],113:[2,23],121:[2,23],129:[2,23],131:[2,23],132:[2,23],135:[2,23],136:[2,23],137:[2,23],138:[2,23],139:[2,23],140:[2,23]},{1:[2,24],6:[2,24],31:[2,24],32:[2,24],53:[2,24],58:[2,24],61:[2,24],76:[2,24],81:[2,24],89:[2,24],94:[2,24],96:[2,24],105:[2,24],107:[2,24],108:[2,24],109:[2,24],113:[2,24],121:[2,24],129:[2,24],131:[2,24],132:[2,24],135:[2,24],136:[2,24],137:[2,24],138:[2,24],139:[2,24],140:[2,24]},{1:[2,25],6:[2,25],31:[2,25],32:[2,25],53:[2,25],58:[2,25],61:[2,25],76:[2,25],81:[2,25],89:[2,25],94:[2,25],96:[2,25],105:[2,25],107:[2,25],108:[2,25],109:[2,25],113:[2,25],121:[2,25],129:[2,25],131:[2,25],132:[2,25],135:[2,25],136:[2,25],137:[2,25],138:[2,25],139:[2,25],140:[2,25]},{1:[2,26],6:[2,26],31:[2,26],32:[2,26],53:[2,26],58:[2,26],61:[2,26],76:[2,26],81:[2,26],89:[2,26],94:[2,26],96:[2,26],105:[2,26],107:[2,26],108:[2,26],109:[2,26],113:[2,26],121:[2,26],129:[2,26],131:[2,26],132:[2,26],135:[2,26],136:[2,26],137:[2,26],138:[2,26],139:[2,26],140:[2,26]},{1:[2,27],6:[2,27],31:[2,27],32:[2,27],53:[2,27],58:[2,27],61:[2,27],76:[2,27],81:[2,27],89:[2,27],94:[2,27],96:[2,27],105:[2,27],107:[2,27],108:[2,27],109:[2,27],113:[2,27],121:[2,27],129:[2,27],131:[2,27],132:[2,27],135:[2,27],136:[2,27],137:[2,27],138:[2,27],139:[2,27],140:[2,27]},{1:[2,28],6:[2,28],31:[2,28],32:[2,28],53:[2,28],58:[2,28],61:[2,28],76:[2,28],81:[2,28],89:[2,28],94:[2,28],96:[2,28],105:[2,28],107:[2,28],108:[2,28],109:[2,28],113:[2,28],121:[2,28],129:[2,28],131:[2,28],132:[2,28],135:[2,28],136:[2,28],137:[2,28],138:[2,28],139:[2,28],140:[2,28]},{1:[2,29],6:[2,29],31:[2,29],32:[2,29],53:[2,29],58:[2,29],61:[2,29],76:[2,29],81:[2,29],89:[2,29],94:[2,29],96:[2,29],105:[2,29],107:[2,29],108:[2,29],109:[2,29],113:[2,29],121:[2,29],129:[2,29],131:[2,29],132:[2,29],135:[2,29],136:[2,29],137:[2,29],138:[2,29],139:[2,29],140:[2,29]},{1:[2,9],6:[2,9],32:[2,9],105:[2,9],107:[2,9],109:[2,9],113:[2,9],129:[2,9]},{1:[2,10],6:[2,10],32:[2,10],105:[2,10],107:[2,10],109:[2,10],113:[2,10],129:[2,10]},{1:[2,11],6:[2,11],32:[2,11],105:[2,11],107:[2,11],109:[2,11],113:[2,11],129:[2,11]},{1:[2,12],6:[2,12],32:[2,12],105:[2,12],107:[2,12],109:[2,12],113:[2,12],129:[2,12]},{1:[2,77],6:[2,77],31:[2,77],32:[2,77],44:[1,107],53:[2,77],58:[2,77],61:[2,77],70:[2,77],71:[2,77],72:[2,77],74:[2,77],76:[2,77],77:[2,77],81:[2,77],87:[2,77],88:[2,77],89:[2,77],94:[2,77],96:[2,77],105:[2,77],107:[2,77],108:[2,77],109:[2,77],113:[2,77],121:[2,77],129:[2,77],131:[2,77],132:[2,77],135:[2,77],136:[2,77],137:[2,77],138:[2,77],139:[2,77],140:[2,77]},{1:[2,78],6:[2,78],31:[2,78],32:[2,78],53:[2,78],58:[2,78],61:[2,78],70:[2,78],71:[2,78],72:[2,78],74:[2,78],76:[2,78],77:[2,78],81:[2,78],87:[2,78],88:[2,78],89:[2,78],94:[2,78],96:[2,78],105:[2,78],107:[2,78],108:[2,78],109:[2,78],113:[2,78],121:[2,78],129:[2,78],131:[2,78],132:[2,78],135:[2,78],136:[2,78],137:[2,78],138:[2,78],139:[2,78],140:[2,78]},{1:[2,79],6:[2,79],31:[2,79],32:[2,79],53:[2,79],58:[2,79],61:[2,79],70:[2,79],71:[2,79],72:[2,79],74:[2,79],76:[2,79],77:[2,79],81:[2,79],87:[2,79],88:[2,79],89:[2,79],94:[2,79],96:[2,79],105:[2,79],107:[2,79],108:[2,79],109:[2,79],113:[2,79],121:[2,79],129:[2,79],131:[2,79],132:[2,79],135:[2,79],136:[2,79],137:[2,79],138:[2,79],139:[2,79],140:[2,79]},{1:[2,80],6:[2,80],31:[2,80],32:[2,80],53:[2,80],58:[2,80],61:[2,80],70:[2,80],71:[2,80],72:[2,80],74:[2,80],76:[2,80],77:[2,80],81:[2,80],87:[2,80],88:[2,80],89:[2,80],94:[2,80],96:[2,80],105:[2,80],107:[2,80],108:[2,80],109:[2,80],113:[2,80],121:[2,80],129:[2,80],131:[2,80],132:[2,80],135:[2,80],136:[2,80],137:[2,80],138:[2,80],139:[2,80],140:[2,80]},{1:[2,81],6:[2,81],31:[2,81],32:[2,81],53:[2,81],58:[2,81],61:[2,81],70:[2,81],71:[2,81],72:[2,81],74:[2,81],76:[2,81],77:[2,81],81:[2,81],87:[2,81],88:[2,81],89:[2,81],94:[2,81],96:[2,81],105:[2,81],107:[2,81],108:[2,81],109:[2,81],113:[2,81],121:[2,81],129:[2,81],131:[2,81],132:[2,81],135:[2,81],136:[2,81],137:[2,81],138:[2,81],139:[2,81],140:[2,81]},{1:[2,108],6:[2,108],15:108,31:[2,108],32:[2,108],53:[2,108],58:[2,108],61:[2,108],70:[2,108],71:[2,108],72:[2,108],74:[2,108],76:[2,108],77:[2,108],81:[2,108],87:[2,108],88:[1,109],89:[2,108],94:[2,108],96:[2,108],105:[2,108],107:[2,108],108:[2,108],109:[2,108],113:[2,108],121:[2,108],129:[2,108],131:[2,108],132:[2,108],135:[2,108],136:[2,108],137:[2,108],138:[2,108],139:[2,108],140:[2,108]},{33:113,34:[1,77],48:114,52:110,53:[2,59],58:[2,59],59:111,60:112,62:115,63:116,79:[1,74],92:[1,117],93:[1,118]},{5:119,31:[1,5]},{8:120,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{8:122,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{8:123,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{18:125,19:126,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:127,48:67,62:53,63:54,65:124,67:28,68:29,69:30,79:[1,74],85:[1,31],91:[1,62],92:[1,63],93:[1,61],104:[1,60]},{18:125,19:126,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:127,48:67,62:53,63:54,65:128,67:28,68:29,69:30,79:[1,74],85:[1,31],91:[1,62],92:[1,63],93:[1,61],104:[1,60]},{1:[2,74],6:[2,74],31:[2,74],32:[2,74],44:[2,74],53:[2,74],58:[2,74],61:[2,74],70:[2,74],71:[2,74],72:[2,74],74:[2,74],76:[2,74],77:[2,74],81:[2,74],83:[1,132],87:[2,74],88:[2,74],89:[2,74],94:[2,74],96:[2,74],105:[2,74],107:[2,74],108:[2,74],109:[2,74],113:[2,74],121:[2,74],129:[2,74],131:[2,74],132:[2,74],133:[1,129],134:[1,130],135:[2,74],136:[2,74],137:[2,74],138:[2,74],139:[2,74],140:[2,74],141:[1,131]},{1:[2,183],6:[2,183],31:[2,183],32:[2,183],53:[2,183],58:[2,183],61:[2,183],76:[2,183],81:[2,183],89:[2,183],94:[2,183],96:[2,183],105:[2,183],107:[2,183],108:[2,183],109:[2,183],113:[2,183],121:[2,183],124:[1,133],129:[2,183],131:[2,183],132:[2,183],135:[2,183],136:[2,183],137:[2,183],138:[2,183],139:[2,183],140:[2,183]},{5:134,31:[1,5]},{5:135,31:[1,5]},{1:[2,151],6:[2,151],31:[2,151],32:[2,151],53:[2,151],58:[2,151],61:[2,151],76:[2,151],81:[2,151],89:[2,151],94:[2,151],96:[2,151],105:[2,151],107:[2,151],108:[2,151],109:[2,151],113:[2,151],121:[2,151],129:[2,151],131:[2,151],132:[2,151],135:[2,151],136:[2,151],137:[2,151],138:[2,151],139:[2,151],140:[2,151]},{5:136,31:[1,5]},{8:137,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,31:[1,138],33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{1:[2,98],5:139,6:[2,98],18:125,19:126,31:[1,5],32:[2,98],33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:127,48:67,53:[2,98],58:[2,98],61:[2,98],62:53,63:54,65:141,67:28,68:29,69:30,76:[2,98],79:[1,74],81:[2,98],83:[1,140],85:[1,31],89:[2,98],91:[1,62],92:[1,63],93:[1,61],94:[2,98],96:[2,98],104:[1,60],105:[2,98],107:[2,98],108:[2,98],109:[2,98],113:[2,98],121:[2,98],129:[2,98],131:[2,98],132:[2,98],135:[2,98],136:[2,98],137:[2,98],138:[2,98],139:[2,98],140:[2,98]},{8:142,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{15:143,88:[1,109]},{5:144,8:145,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,31:[1,5],33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{1:[2,51],6:[2,51],8:146,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,32:[2,51],33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],105:[2,51],106:42,107:[2,51],109:[2,51],110:43,111:[1,71],112:44,113:[2,51],114:73,122:[1,45],127:40,128:[1,68],129:[2,51],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{1:[2,52],6:[2,52],31:[2,52],32:[2,52],58:[2,52],81:[2,52],105:[2,52],107:[2,52],109:[2,52],113:[2,52],129:[2,52]},{15:147,88:[1,109]},{1:[2,75],6:[2,75],31:[2,75],32:[2,75],44:[2,75],53:[2,75],58:[2,75],61:[2,75],70:[2,75],71:[2,75],72:[2,75],74:[2,75],76:[2,75],77:[2,75],81:[2,75],87:[2,75],88:[2,75],89:[2,75],94:[2,75],96:[2,75],105:[2,75],107:[2,75],108:[2,75],109:[2,75],113:[2,75],121:[2,75],129:[2,75],131:[2,75],132:[2,75],135:[2,75],136:[2,75],137:[2,75],138:[2,75],139:[2,75],140:[2,75]},{1:[2,76],6:[2,76],31:[2,76],32:[2,76],44:[2,76],53:[2,76],58:[2,76],61:[2,76],70:[2,76],71:[2,76],72:[2,76],74:[2,76],76:[2,76],77:[2,76],81:[2,76],87:[2,76],88:[2,76],89:[2,76],94:[2,76],96:[2,76],105:[2,76],107:[2,76],108:[2,76],109:[2,76],113:[2,76],121:[2,76],129:[2,76],131:[2,76],132:[2,76],135:[2,76],136:[2,76],137:[2,76],138:[2,76],139:[2,76],140:[2,76]},{1:[2,35],6:[2,35],31:[2,35],32:[2,35],53:[2,35],58:[2,35],61:[2,35],70:[2,35],71:[2,35],72:[2,35],74:[2,35],76:[2,35],77:[2,35],81:[2,35],87:[2,35],88:[2,35],89:[2,35],94:[2,35],96:[2,35],105:[2,35],107:[2,35],108:[2,35],109:[2,35],113:[2,35],121:[2,35],129:[2,35],131:[2,35],132:[2,35],135:[2,35],136:[2,35],137:[2,35],138:[2,35],139:[2,35],140:[2,35]},{1:[2,36],6:[2,36],31:[2,36],32:[2,36],53:[2,36],58:[2,36],61:[2,36],70:[2,36],71:[2,36],72:[2,36],74:[2,36],76:[2,36],77:[2,36],81:[2,36],87:[2,36],88:[2,36],89:[2,36],94:[2,36],96:[2,36],105:[2,36],107:[2,36],108:[2,36],109:[2,36],113:[2,36],121:[2,36],129:[2,36],131:[2,36],132:[2,36],135:[2,36],136:[2,36],137:[2,36],138:[2,36],139:[2,36],140:[2,36]},{1:[2,37],6:[2,37],31:[2,37],32:[2,37],53:[2,37],58:[2,37],61:[2,37],70:[2,37],71:[2,37],72:[2,37],74:[2,37],76:[2,37],77:[2,37],81:[2,37],87:[2,37],88:[2,37],89:[2,37],94:[2,37],96:[2,37],105:[2,37],107:[2,37],108:[2,37],109:[2,37],113:[2,37],121:[2,37],129:[2,37],131:[2,37],132:[2,37],135:[2,37],136:[2,37],137:[2,37],138:[2,37],139:[2,37],140:[2,37]},{1:[2,38],6:[2,38],31:[2,38],32:[2,38],53:[2,38],58:[2,38],61:[2,38],70:[2,38],71:[2,38],72:[2,38],74:[2,38],76:[2,38],77:[2,38],81:[2,38],87:[2,38],88:[2,38],89:[2,38],94:[2,38],96:[2,38],105:[2,38],107:[2,38],108:[2,38],109:[2,38],113:[2,38],121:[2,38],129:[2,38],131:[2,38],132:[2,38],135:[2,38],136:[2,38],137:[2,38],138:[2,38],139:[2,38],140:[2,38]},{1:[2,39],6:[2,39],31:[2,39],32:[2,39],53:[2,39],58:[2,39],61:[2,39],70:[2,39],71:[2,39],72:[2,39],74:[2,39],76:[2,39],77:[2,39],81:[2,39],87:[2,39],88:[2,39],89:[2,39],94:[2,39],96:[2,39],105:[2,39],107:[2,39],108:[2,39],109:[2,39],113:[2,39],121:[2,39],129:[2,39],131:[2,39],132:[2,39],135:[2,39],136:[2,39],137:[2,39],138:[2,39],139:[2,39],140:[2,39]},{4:148,7:4,8:6,9:7,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,31:[1,149],33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{8:150,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,31:[1,154],33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,64:155,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],90:152,91:[1,62],92:[1,63],93:[1,61],94:[1,151],97:153,99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{1:[2,115],6:[2,115],31:[2,115],32:[2,115],53:[2,115],58:[2,115],61:[2,115],70:[2,115],71:[2,115],72:[2,115],74:[2,115],76:[2,115],77:[2,115],81:[2,115],87:[2,115],88:[2,115],89:[2,115],94:[2,115],96:[2,115],105:[2,115],107:[2,115],108:[2,115],109:[2,115],113:[2,115],121:[2,115],129:[2,115],131:[2,115],132:[2,115],135:[2,115],136:[2,115],137:[2,115],138:[2,115],139:[2,115],140:[2,115]},{1:[2,116],6:[2,116],31:[2,116],32:[2,116],33:156,34:[1,77],53:[2,116],58:[2,116],61:[2,116],70:[2,116],71:[2,116],72:[2,116],74:[2,116],76:[2,116],77:[2,116],81:[2,116],87:[2,116],88:[2,116],89:[2,116],94:[2,116],96:[2,116],105:[2,116],107:[2,116],108:[2,116],109:[2,116],113:[2,116],121:[2,116],129:[2,116],131:[2,116],132:[2,116],135:[2,116],136:[2,116],137:[2,116],138:[2,116],139:[2,116],140:[2,116]},{31:[2,55]},{31:[2,56]},{1:[2,70],6:[2,70],31:[2,70],32:[2,70],44:[2,70],53:[2,70],58:[2,70],61:[2,70],70:[2,70],71:[2,70],72:[2,70],74:[2,70],76:[2,70],77:[2,70],81:[2,70],83:[2,70],87:[2,70],88:[2,70],89:[2,70],94:[2,70],96:[2,70],105:[2,70],107:[2,70],108:[2,70],109:[2,70],113:[2,70],121:[2,70],129:[2,70],131:[2,70],132:[2,70],133:[2,70],134:[2,70],135:[2,70],136:[2,70],137:[2,70],138:[2,70],139:[2,70],140:[2,70],141:[2,70]},{1:[2,73],6:[2,73],31:[2,73],32:[2,73],44:[2,73],53:[2,73],58:[2,73],61:[2,73],70:[2,73],71:[2,73],72:[2,73],74:[2,73],76:[2,73],77:[2,73],81:[2,73],83:[2,73],87:[2,73],88:[2,73],89:[2,73],94:[2,73],96:[2,73],105:[2,73],107:[2,73],108:[2,73],109:[2,73],113:[2,73],121:[2,73],129:[2,73],131:[2,73],132:[2,73],133:[2,73],134:[2,73],135:[2,73],136:[2,73],137:[2,73],138:[2,73],139:[2,73],140:[2,73],141:[2,73]},{8:157,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{8:158,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{8:159,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{5:160,8:161,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,31:[1,5],33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{33:166,34:[1,77],62:167,63:168,68:162,79:[1,74],93:[1,61],116:163,117:[1,164],118:165},{115:169,119:[1,170],120:[1,171]},{6:[2,93],11:175,31:[2,93],33:176,34:[1,77],35:177,36:[1,75],37:[1,76],45:173,46:174,48:178,50:[1,51],58:[2,93],80:172,81:[2,93],92:[1,117]},{1:[2,33],6:[2,33],31:[2,33],32:[2,33],47:[2,33],53:[2,33],58:[2,33],61:[2,33],70:[2,33],71:[2,33],72:[2,33],74:[2,33],76:[2,33],77:[2,33],81:[2,33],87:[2,33],88:[2,33],89:[2,33],94:[2,33],96:[2,33],105:[2,33],107:[2,33],108:[2,33],109:[2,33],113:[2,33],121:[2,33],129:[2,33],131:[2,33],132:[2,33],135:[2,33],136:[2,33],137:[2,33],138:[2,33],139:[2,33],140:[2,33]},{1:[2,34],6:[2,34],31:[2,34],32:[2,34],47:[2,34],53:[2,34],58:[2,34],61:[2,34],70:[2,34],71:[2,34],72:[2,34],74:[2,34],76:[2,34],77:[2,34],81:[2,34],87:[2,34],88:[2,34],89:[2,34],94:[2,34],96:[2,34],105:[2,34],107:[2,34],108:[2,34],109:[2,34],113:[2,34],121:[2,34],129:[2,34],131:[2,34],132:[2,34],135:[2,34],136:[2,34],137:[2,34],138:[2,34],139:[2,34],140:[2,34]},{1:[2,32],6:[2,32],31:[2,32],32:[2,32],44:[2,32],47:[2,32],53:[2,32],58:[2,32],61:[2,32],70:[2,32],71:[2,32],72:[2,32],74:[2,32],76:[2,32],77:[2,32],81:[2,32],83:[2,32],87:[2,32],88:[2,32],89:[2,32],94:[2,32],96:[2,32],105:[2,32],107:[2,32],108:[2,32],109:[2,32],113:[2,32],119:[2,32],120:[2,32],121:[2,32],129:[2,32],131:[2,32],132:[2,32],133:[2,32],134:[2,32],135:[2,32],136:[2,32],137:[2,32],138:[2,32],139:[2,32],140:[2,32],141:[2,32]},{1:[2,6],6:[2,6],7:179,8:6,9:7,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,32:[2,6],33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],105:[2,6],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{1:[2,3]},{1:[2,30],6:[2,30],31:[2,30],32:[2,30],53:[2,30],58:[2,30],61:[2,30],76:[2,30],81:[2,30],89:[2,30],94:[2,30],96:[2,30],101:[2,30],102:[2,30],105:[2,30],107:[2,30],108:[2,30],109:[2,30],113:[2,30],121:[2,30],124:[2,30],126:[2,30],129:[2,30],131:[2,30],132:[2,30],135:[2,30],136:[2,30],137:[2,30],138:[2,30],139:[2,30],140:[2,30]},{6:[1,78],32:[1,180]},{1:[2,194],6:[2,194],31:[2,194],32:[2,194],53:[2,194],58:[2,194],61:[2,194],76:[2,194],81:[2,194],89:[2,194],94:[2,194],96:[2,194],105:[2,194],107:[2,194],108:[2,194],109:[2,194],113:[2,194],121:[2,194],129:[2,194],131:[2,194],132:[2,194],135:[2,194],136:[2,194],137:[2,194],138:[2,194],139:[2,194],140:[2,194]},{8:181,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{8:182,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{8:183,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{8:184,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{8:185,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{8:186,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{8:187,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{8:188,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{1:[2,150],6:[2,150],31:[2,150],32:[2,150],53:[2,150],58:[2,150],61:[2,150],76:[2,150],81:[2,150],89:[2,150],94:[2,150],96:[2,150],105:[2,150],107:[2,150],108:[2,150],109:[2,150],113:[2,150],121:[2,150],129:[2,150],131:[2,150],132:[2,150],135:[2,150],136:[2,150],137:[2,150],138:[2,150],139:[2,150],140:[2,150]},{1:[2,155],6:[2,155],31:[2,155],32:[2,155],53:[2,155],58:[2,155],61:[2,155],76:[2,155],81:[2,155],89:[2,155],94:[2,155],96:[2,155],105:[2,155],107:[2,155],108:[2,155],109:[2,155],113:[2,155],121:[2,155],129:[2,155],131:[2,155],132:[2,155],135:[2,155],136:[2,155],137:[2,155],138:[2,155],139:[2,155],140:[2,155]},{8:189,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{1:[2,149],6:[2,149],31:[2,149],32:[2,149],53:[2,149],58:[2,149],61:[2,149],76:[2,149],81:[2,149],89:[2,149],94:[2,149],96:[2,149],105:[2,149],107:[2,149],108:[2,149],109:[2,149],113:[2,149],121:[2,149],129:[2,149],131:[2,149],132:[2,149],135:[2,149],136:[2,149],137:[2,149],138:[2,149],139:[2,149],140:[2,149]},{1:[2,154],6:[2,154],31:[2,154],32:[2,154],53:[2,154],58:[2,154],61:[2,154],76:[2,154],81:[2,154],89:[2,154],94:[2,154],96:[2,154],105:[2,154],107:[2,154],108:[2,154],109:[2,154],113:[2,154],121:[2,154],129:[2,154],131:[2,154],132:[2,154],135:[2,154],136:[2,154],137:[2,154],138:[2,154],139:[2,154],140:[2,154]},{15:190,88:[1,109]},{1:[2,71],6:[2,71],31:[2,71],32:[2,71],44:[2,71],53:[2,71],58:[2,71],61:[2,71],70:[2,71],71:[2,71],72:[2,71],74:[2,71],76:[2,71],77:[2,71],81:[2,71],83:[2,71],87:[2,71],88:[2,71],89:[2,71],94:[2,71],96:[2,71],105:[2,71],107:[2,71],108:[2,71],109:[2,71],113:[2,71],121:[2,71],129:[2,71],131:[2,71],132:[2,71],133:[2,71],134:[2,71],135:[2,71],136:[2,71],137:[2,71],138:[2,71],139:[2,71],140:[2,71],141:[2,71]},{88:[2,112]},{30:192,33:191,34:[1,77],86:[1,48]},{33:193,34:[1,77]},{1:[2,86],6:[2,86],31:[2,86],32:[2,86],33:194,34:[1,77],44:[2,86],53:[2,86],58:[2,86],61:[2,86],70:[2,86],71:[2,86],72:[2,86],74:[2,86],76:[2,86],77:[2,86],81:[2,86],83:[2,86],87:[2,86],88:[2,86],89:[2,86],94:[2,86],96:[2,86],105:[2,86],107:[2,86],108:[2,86],109:[2,86],113:[2,86],121:[2,86],129:[2,86],131:[2,86],132:[2,86],133:[2,86],134:[2,86],135:[2,86],136:[2,86],137:[2,86],138:[2,86],139:[2,86],140:[2,86],141:[2,86]},{1:[2,87],6:[2,87],31:[2,87],32:[2,87],44:[2,87],53:[2,87],58:[2,87],61:[2,87],70:[2,87],71:[2,87],72:[2,87],74:[2,87],76:[2,87],77:[2,87],81:[2,87],83:[2,87],87:[2,87],88:[2,87],89:[2,87],94:[2,87],96:[2,87],105:[2,87],107:[2,87],108:[2,87],109:[2,87],113:[2,87],121:[2,87],129:[2,87],131:[2,87],132:[2,87],133:[2,87],134:[2,87],135:[2,87],136:[2,87],137:[2,87],138:[2,87],139:[2,87],140:[2,87],141:[2,87]},{8:196,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],61:[1,200],62:53,63:54,65:39,67:28,68:29,69:30,75:195,78:197,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],95:198,96:[1,199],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{73:201,74:[1,103],77:[1,104]},{15:202,88:[1,109]},{1:[2,72],6:[2,72],31:[2,72],32:[2,72],44:[2,72],53:[2,72],58:[2,72],61:[2,72],70:[2,72],71:[2,72],72:[2,72],74:[2,72],76:[2,72],77:[2,72],81:[2,72],83:[2,72],87:[2,72],88:[2,72],89:[2,72],94:[2,72],96:[2,72],105:[2,72],107:[2,72],108:[2,72],109:[2,72],113:[2,72],121:[2,72],129:[2,72],131:[2,72],132:[2,72],133:[2,72],134:[2,72],135:[2,72],136:[2,72],137:[2,72],138:[2,72],139:[2,72],140:[2,72],141:[2,72]},{6:[1,204],8:203,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,31:[1,205],33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{1:[2,109],6:[2,109],31:[2,109],32:[2,109],53:[2,109],58:[2,109],61:[2,109],70:[2,109],71:[2,109],72:[2,109],74:[2,109],76:[2,109],77:[2,109],81:[2,109],87:[2,109],88:[2,109],89:[2,109],94:[2,109],96:[2,109],105:[2,109],107:[2,109],108:[2,109],109:[2,109],113:[2,109],121:[2,109],129:[2,109],131:[2,109],132:[2,109],135:[2,109],136:[2,109],137:[2,109],138:[2,109],139:[2,109],140:[2,109]},{8:208,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,31:[1,154],33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,64:155,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],89:[1,206],90:207,91:[1,62],92:[1,63],93:[1,61],97:153,99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{53:[1,209],58:[1,210]},{53:[2,60],58:[2,60]},{44:[1,212],53:[2,62],58:[2,62],61:[1,211]},{44:[2,65],53:[2,65],58:[2,65],61:[2,65]},{44:[2,66],53:[2,66],58:[2,66],61:[2,66]},{44:[2,67],53:[2,67],58:[2,67],61:[2,67]},{44:[2,68],53:[2,68],58:[2,68],61:[2,68]},{33:156,34:[1,77]},{8:208,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,31:[1,154],33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,64:155,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],90:152,91:[1,62],92:[1,63],93:[1,61],94:[1,151],97:153,99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{1:[2,54],6:[2,54],31:[2,54],32:[2,54],53:[2,54],58:[2,54],61:[2,54],76:[2,54],81:[2,54],89:[2,54],94:[2,54],96:[2,54],105:[2,54],107:[2,54],108:[2,54],109:[2,54],113:[2,54],121:[2,54],129:[2,54],131:[2,54],132:[2,54],135:[2,54],136:[2,54],137:[2,54],138:[2,54],139:[2,54],140:[2,54]},{1:[2,187],6:[2,187],31:[2,187],32:[2,187],53:[2,187],58:[2,187],61:[2,187],76:[2,187],81:[2,187],89:[2,187],94:[2,187],96:[2,187],105:[2,187],106:91,107:[2,187],108:[2,187],109:[2,187],112:92,113:[2,187],114:73,121:[2,187],129:[2,187],131:[2,187],132:[2,187],135:[1,82],136:[2,187],137:[2,187],138:[2,187],139:[2,187],140:[2,187]},{106:94,107:[1,69],109:[1,70],112:95,113:[1,72],114:73,129:[1,93]},{1:[2,188],6:[2,188],31:[2,188],32:[2,188],53:[2,188],58:[2,188],61:[2,188],76:[2,188],81:[2,188],89:[2,188],94:[2,188],96:[2,188],105:[2,188],106:91,107:[2,188],108:[2,188],109:[2,188],112:92,113:[2,188],114:73,121:[2,188],129:[2,188],131:[2,188],132:[2,188],135:[1,82],136:[2,188],137:[2,188],138:[2,188],139:[2,188],140:[2,188]},{1:[2,189],6:[2,189],31:[2,189],32:[2,189],53:[2,189],58:[2,189],61:[2,189],76:[2,189],81:[2,189],89:[2,189],94:[2,189],96:[2,189],105:[2,189],106:91,107:[2,189],108:[2,189],109:[2,189],112:92,113:[2,189],114:73,121:[2,189],129:[2,189],131:[2,189],132:[2,189],135:[1,82],136:[2,189],137:[2,189],138:[2,189],139:[2,189],140:[2,189]},{1:[2,190],6:[2,190],31:[2,190],32:[2,190],53:[2,190],58:[2,190],61:[2,190],70:[2,74],71:[2,74],72:[2,74],74:[2,74],76:[2,190],77:[2,74],81:[2,190],87:[2,74],88:[2,74],89:[2,190],94:[2,190],96:[2,190],105:[2,190],107:[2,190],108:[2,190],109:[2,190],113:[2,190],121:[2,190],129:[2,190],131:[2,190],132:[2,190],135:[2,190],136:[2,190],137:[2,190],138:[2,190],139:[2,190],140:[2,190]},{66:97,70:[1,99],71:[1,100],72:[1,101],73:102,74:[1,103],77:[1,104],84:96,87:[1,98],88:[2,111]},{66:106,70:[1,99],71:[1,100],72:[1,101],73:102,74:[1,103],77:[1,104],84:105,87:[1,98],88:[2,111]},{70:[2,77],71:[2,77],72:[2,77],74:[2,77],77:[2,77],87:[2,77],88:[2,77]},{1:[2,191],6:[2,191],31:[2,191],32:[2,191],53:[2,191],58:[2,191],61:[2,191],70:[2,74],71:[2,74],72:[2,74],74:[2,74],76:[2,191],77:[2,74],81:[2,191],87:[2,74],88:[2,74],89:[2,191],94:[2,191],96:[2,191],105:[2,191],107:[2,191],108:[2,191],109:[2,191],113:[2,191],121:[2,191],129:[2,191],131:[2,191],132:[2,191],135:[2,191],136:[2,191],137:[2,191],138:[2,191],139:[2,191],140:[2,191]},{1:[2,192],6:[2,192],31:[2,192],32:[2,192],53:[2,192],58:[2,192],61:[2,192],76:[2,192],81:[2,192],89:[2,192],94:[2,192],96:[2,192],105:[2,192],107:[2,192],108:[2,192],109:[2,192],113:[2,192],121:[2,192],129:[2,192],131:[2,192],132:[2,192],135:[2,192],136:[2,192],137:[2,192],138:[2,192],139:[2,192],140:[2,192]},{1:[2,193],6:[2,193],31:[2,193],32:[2,193],53:[2,193],58:[2,193],61:[2,193],76:[2,193],81:[2,193],89:[2,193],94:[2,193],96:[2,193],105:[2,193],107:[2,193],108:[2,193],109:[2,193],113:[2,193],121:[2,193],129:[2,193],131:[2,193],132:[2,193],135:[2,193],136:[2,193],137:[2,193],138:[2,193],139:[2,193],140:[2,193]},{8:213,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,31:[1,214],33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{8:215,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{5:216,31:[1,5],128:[1,217]},{1:[2,136],6:[2,136],31:[2,136],32:[2,136],53:[2,136],58:[2,136],61:[2,136],76:[2,136],81:[2,136],89:[2,136],94:[2,136],96:[2,136],100:218,101:[1,219],102:[1,220],105:[2,136],107:[2,136],108:[2,136],109:[2,136],113:[2,136],121:[2,136],129:[2,136],131:[2,136],132:[2,136],135:[2,136],136:[2,136],137:[2,136],138:[2,136],139:[2,136],140:[2,136]},{1:[2,148],6:[2,148],31:[2,148],32:[2,148],53:[2,148],58:[2,148],61:[2,148],76:[2,148],81:[2,148],89:[2,148],94:[2,148],96:[2,148],105:[2,148],107:[2,148],108:[2,148],109:[2,148],113:[2,148],121:[2,148],129:[2,148],131:[2,148],132:[2,148],135:[2,148],136:[2,148],137:[2,148],138:[2,148],139:[2,148],140:[2,148]},{1:[2,156],6:[2,156],31:[2,156],32:[2,156],53:[2,156],58:[2,156],61:[2,156],76:[2,156],81:[2,156],89:[2,156],94:[2,156],96:[2,156],105:[2,156],107:[2,156],108:[2,156],109:[2,156],113:[2,156],121:[2,156],129:[2,156],131:[2,156],132:[2,156],135:[2,156],136:[2,156],137:[2,156],138:[2,156],139:[2,156],140:[2,156]},{31:[1,221],106:91,107:[1,69],109:[1,70],112:92,113:[1,72],114:73,129:[1,90],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[1,87],139:[1,88],140:[1,89]},{123:222,125:223,126:[1,224]},{1:[2,99],6:[2,99],31:[2,99],32:[2,99],53:[2,99],58:[2,99],61:[2,99],76:[2,99],81:[2,99],89:[2,99],94:[2,99],96:[2,99],105:[2,99],107:[2,99],108:[2,99],109:[2,99],113:[2,99],121:[2,99],129:[2,99],131:[2,99],132:[2,99],135:[2,99],136:[2,99],137:[2,99],138:[2,99],139:[2,99],140:[2,99]},{8:225,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{1:[2,102],5:226,6:[2,102],31:[1,5],32:[2,102],53:[2,102],58:[2,102],61:[2,102],70:[2,74],71:[2,74],72:[2,74],74:[2,74],76:[2,102],77:[2,74],81:[2,102],83:[1,227],87:[2,74],88:[2,74],89:[2,102],94:[2,102],96:[2,102],105:[2,102],107:[2,102],108:[2,102],109:[2,102],113:[2,102],121:[2,102],129:[2,102],131:[2,102],132:[2,102],135:[2,102],136:[2,102],137:[2,102],138:[2,102],139:[2,102],140:[2,102]},{1:[2,141],6:[2,141],31:[2,141],32:[2,141],53:[2,141],58:[2,141],61:[2,141],76:[2,141],81:[2,141],89:[2,141],94:[2,141],96:[2,141],105:[2,141],106:91,107:[2,141],108:[2,141],109:[2,141],112:92,113:[2,141],114:73,121:[2,141],129:[2,141],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[1,87],139:[1,88],140:[1,89]},{1:[2,110],6:[2,110],31:[2,110],32:[2,110],44:[2,110],53:[2,110],58:[2,110],61:[2,110],70:[2,110],71:[2,110],72:[2,110],74:[2,110],76:[2,110],77:[2,110],81:[2,110],83:[2,110],87:[2,110],88:[2,110],89:[2,110],94:[2,110],96:[2,110],105:[2,110],107:[2,110],108:[2,110],109:[2,110],113:[2,110],121:[2,110],129:[2,110],131:[2,110],132:[2,110],133:[2,110],134:[2,110],135:[2,110],136:[2,110],137:[2,110],138:[2,110],139:[2,110],140:[2,110],141:[2,110]},{1:[2,14],6:[2,14],31:[2,14],32:[2,14],53:[2,14],58:[2,14],61:[2,14],76:[2,14],81:[2,14],89:[2,14],94:[2,14],96:[2,14],105:[2,14],107:[2,14],108:[2,14],109:[2,14],113:[2,14],121:[2,14],129:[2,14],131:[2,14],132:[2,14],135:[2,14],136:[2,14],137:[2,14],138:[2,14],139:[2,14],140:[2,14]},{1:[2,15],6:[2,15],31:[2,15],32:[2,15],53:[2,15],58:[2,15],61:[2,15],76:[2,15],81:[2,15],89:[2,15],94:[2,15],96:[2,15],105:[2,15],106:91,107:[1,69],108:[2,15],109:[1,70],112:92,113:[1,72],114:73,121:[2,15],129:[2,15],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[1,87],139:[1,88],140:[1,89]},{1:[2,50],6:[2,50],32:[2,50],105:[2,50],106:91,107:[2,50],109:[2,50],112:92,113:[2,50],114:73,129:[2,50],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[1,87],139:[1,88],140:[1,89]},{1:[2,13],6:[2,13],32:[2,13],105:[2,13],107:[2,13],109:[2,13],113:[2,13],129:[2,13]},{6:[1,78],105:[1,228]},{4:229,7:4,8:6,9:7,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{6:[2,132],31:[2,132],58:[2,132],61:[1,231],94:[2,132],95:230,96:[1,199],106:91,107:[1,69],109:[1,70],112:92,113:[1,72],114:73,129:[1,90],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[1,87],139:[1,88],140:[1,89]},{1:[2,118],6:[2,118],31:[2,118],32:[2,118],44:[2,118],53:[2,118],58:[2,118],61:[2,118],70:[2,118],71:[2,118],72:[2,118],74:[2,118],76:[2,118],77:[2,118],81:[2,118],87:[2,118],88:[2,118],89:[2,118],94:[2,118],96:[2,118],105:[2,118],107:[2,118],108:[2,118],109:[2,118],113:[2,118],119:[2,118],120:[2,118],121:[2,118],129:[2,118],131:[2,118],132:[2,118],135:[2,118],136:[2,118],137:[2,118],138:[2,118],139:[2,118],140:[2,118]},{6:[2,57],31:[2,57],57:232,58:[1,233],94:[2,57]},{6:[2,127],31:[2,127],32:[2,127],58:[2,127],89:[2,127],94:[2,127]},{8:208,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,31:[1,154],33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,64:155,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],90:234,91:[1,62],92:[1,63],93:[1,61],97:153,99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{6:[2,133],31:[2,133],32:[2,133],58:[2,133],89:[2,133],94:[2,133]},{1:[2,117],6:[2,117],31:[2,117],32:[2,117],44:[2,117],47:[2,117],53:[2,117],58:[2,117],61:[2,117],70:[2,117],71:[2,117],72:[2,117],74:[2,117],76:[2,117],77:[2,117],81:[2,117],83:[2,117],87:[2,117],88:[2,117],89:[2,117],94:[2,117],96:[2,117],105:[2,117],107:[2,117],108:[2,117],109:[2,117],113:[2,117],121:[2,117],129:[2,117],131:[2,117],132:[2,117],133:[2,117],134:[2,117],135:[2,117],136:[2,117],137:[2,117],138:[2,117],139:[2,117],140:[2,117],141:[2,117]},{5:235,31:[1,5],106:91,107:[1,69],109:[1,70],112:92,113:[1,72],114:73,129:[1,90],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[1,87],139:[1,88],140:[1,89]},{1:[2,144],6:[2,144],31:[2,144],32:[2,144],53:[2,144],58:[2,144],61:[2,144],76:[2,144],81:[2,144],89:[2,144],94:[2,144],96:[2,144],105:[2,144],106:91,107:[1,69],108:[1,236],109:[1,70],112:92,113:[1,72],114:73,121:[2,144],129:[2,144],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[1,87],139:[1,88],140:[1,89]},{1:[2,146],6:[2,146],31:[2,146],32:[2,146],53:[2,146],58:[2,146],61:[2,146],76:[2,146],81:[2,146],89:[2,146],94:[2,146],96:[2,146],105:[2,146],106:91,107:[1,69],108:[1,237],109:[1,70],112:92,113:[1,72],114:73,121:[2,146],129:[2,146],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[1,87],139:[1,88],140:[1,89]},{1:[2,152],6:[2,152],31:[2,152],32:[2,152],53:[2,152],58:[2,152],61:[2,152],76:[2,152],81:[2,152],89:[2,152],94:[2,152],96:[2,152],105:[2,152],107:[2,152],108:[2,152],109:[2,152],113:[2,152],121:[2,152],129:[2,152],131:[2,152],132:[2,152],135:[2,152],136:[2,152],137:[2,152],138:[2,152],139:[2,152],140:[2,152]},{1:[2,153],6:[2,153],31:[2,153],32:[2,153],53:[2,153],58:[2,153],61:[2,153],76:[2,153],81:[2,153],89:[2,153],94:[2,153],96:[2,153],105:[2,153],106:91,107:[1,69],108:[2,153],109:[1,70],112:92,113:[1,72],114:73,121:[2,153],129:[2,153],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[1,87],139:[1,88],140:[1,89]},{1:[2,157],6:[2,157],31:[2,157],32:[2,157],53:[2,157],58:[2,157],61:[2,157],76:[2,157],81:[2,157],89:[2,157],94:[2,157],96:[2,157],105:[2,157],107:[2,157],108:[2,157],109:[2,157],113:[2,157],121:[2,157],129:[2,157],131:[2,157],132:[2,157],135:[2,157],136:[2,157],137:[2,157],138:[2,157],139:[2,157],140:[2,157]},{119:[2,159],120:[2,159]},{33:166,34:[1,77],62:167,63:168,79:[1,74],93:[1,118],116:238,118:165},{58:[1,239],119:[2,164],120:[2,164]},{58:[2,161],119:[2,161],120:[2,161]},{58:[2,162],119:[2,162],120:[2,162]},{58:[2,163],119:[2,163],120:[2,163]},{1:[2,158],6:[2,158],31:[2,158],32:[2,158],53:[2,158],58:[2,158],61:[2,158],76:[2,158],81:[2,158],89:[2,158],94:[2,158],96:[2,158],105:[2,158],107:[2,158],108:[2,158],109:[2,158],113:[2,158],121:[2,158],129:[2,158],131:[2,158],132:[2,158],135:[2,158],136:[2,158],137:[2,158],138:[2,158],139:[2,158],140:[2,158]},{8:240,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{8:241,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{6:[2,57],31:[2,57],57:242,58:[1,243],81:[2,57]},{6:[2,94],31:[2,94],32:[2,94],58:[2,94],81:[2,94]},{6:[2,43],31:[2,43],32:[2,43],47:[1,244],58:[2,43],81:[2,43]},{6:[2,46],31:[2,46],32:[2,46],58:[2,46],81:[2,46]},{6:[2,47],31:[2,47],32:[2,47],47:[2,47],58:[2,47],81:[2,47]},{6:[2,48],31:[2,48],32:[2,48],47:[2,48],58:[2,48],81:[2,48]},{6:[2,49],31:[2,49],32:[2,49],47:[2,49],58:[2,49],81:[2,49]},{1:[2,5],6:[2,5],32:[2,5],105:[2,5]},{1:[2,31],6:[2,31],31:[2,31],32:[2,31],53:[2,31],58:[2,31],61:[2,31],76:[2,31],81:[2,31],89:[2,31],94:[2,31],96:[2,31],101:[2,31],102:[2,31],105:[2,31],107:[2,31],108:[2,31],109:[2,31],113:[2,31],121:[2,31],124:[2,31],126:[2,31],129:[2,31],131:[2,31],132:[2,31],135:[2,31],136:[2,31],137:[2,31],138:[2,31],139:[2,31],140:[2,31]},{1:[2,195],6:[2,195],31:[2,195],32:[2,195],53:[2,195],58:[2,195],61:[2,195],76:[2,195],81:[2,195],89:[2,195],94:[2,195],96:[2,195],105:[2,195],106:91,107:[2,195],108:[2,195],109:[2,195],112:92,113:[2,195],114:73,121:[2,195],129:[2,195],131:[2,195],132:[2,195],135:[1,82],136:[1,85],137:[2,195],138:[2,195],139:[2,195],140:[2,195]},{1:[2,196],6:[2,196],31:[2,196],32:[2,196],53:[2,196],58:[2,196],61:[2,196],76:[2,196],81:[2,196],89:[2,196],94:[2,196],96:[2,196],105:[2,196],106:91,107:[2,196],108:[2,196],109:[2,196],112:92,113:[2,196],114:73,121:[2,196],129:[2,196],131:[2,196],132:[2,196],135:[1,82],136:[1,85],137:[2,196],138:[2,196],139:[2,196],140:[2,196]},{1:[2,197],6:[2,197],31:[2,197],32:[2,197],53:[2,197],58:[2,197],61:[2,197],76:[2,197],81:[2,197],89:[2,197],94:[2,197],96:[2,197],105:[2,197],106:91,107:[2,197],108:[2,197],109:[2,197],112:92,113:[2,197],114:73,121:[2,197],129:[2,197],131:[2,197],132:[2,197],135:[1,82],136:[2,197],137:[2,197],138:[2,197],139:[2,197],140:[2,197]},{1:[2,198],6:[2,198],31:[2,198],32:[2,198],53:[2,198],58:[2,198],61:[2,198],76:[2,198],81:[2,198],89:[2,198],94:[2,198],96:[2,198],105:[2,198],106:91,107:[2,198],108:[2,198],109:[2,198],112:92,113:[2,198],114:73,121:[2,198],129:[2,198],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[2,198],138:[2,198],139:[2,198],140:[2,198]},{1:[2,199],6:[2,199],31:[2,199],32:[2,199],53:[2,199],58:[2,199],61:[2,199],76:[2,199],81:[2,199],89:[2,199],94:[2,199],96:[2,199],105:[2,199],106:91,107:[2,199],108:[2,199],109:[2,199],112:92,113:[2,199],114:73,121:[2,199],129:[2,199],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[2,199],139:[2,199],140:[1,89]},{1:[2,200],6:[2,200],31:[2,200],32:[2,200],53:[2,200],58:[2,200],61:[2,200],76:[2,200],81:[2,200],89:[2,200],94:[2,200],96:[2,200],105:[2,200],106:91,107:[2,200],108:[2,200],109:[2,200],112:92,113:[2,200],114:73,121:[2,200],129:[2,200],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[1,87],139:[2,200],140:[1,89]},{1:[2,201],6:[2,201],31:[2,201],32:[2,201],53:[2,201],58:[2,201],61:[2,201],76:[2,201],81:[2,201],89:[2,201],94:[2,201],96:[2,201],105:[2,201],106:91,107:[2,201],108:[2,201],109:[2,201],112:92,113:[2,201],114:73,121:[2,201],129:[2,201],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[2,201],139:[2,201],140:[2,201]},{1:[2,186],6:[2,186],31:[2,186],32:[2,186],53:[2,186],58:[2,186],61:[2,186],76:[2,186],81:[2,186],89:[2,186],94:[2,186],96:[2,186],105:[2,186],106:91,107:[1,69],108:[2,186],109:[1,70],112:92,113:[1,72],114:73,121:[2,186],129:[1,90],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[1,87],139:[1,88],140:[1,89]},{1:[2,185],6:[2,185],31:[2,185],32:[2,185],53:[2,185],58:[2,185],61:[2,185],76:[2,185],81:[2,185],89:[2,185],94:[2,185],96:[2,185],105:[2,185],106:91,107:[1,69],108:[2,185],109:[1,70],112:92,113:[1,72],114:73,121:[2,185],129:[1,90],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[1,87],139:[1,88],140:[1,89]},{1:[2,106],6:[2,106],31:[2,106],32:[2,106],53:[2,106],58:[2,106],61:[2,106],70:[2,106],71:[2,106],72:[2,106],74:[2,106],76:[2,106],77:[2,106],81:[2,106],87:[2,106],88:[2,106],89:[2,106],94:[2,106],96:[2,106],105:[2,106],107:[2,106],108:[2,106],109:[2,106],113:[2,106],121:[2,106],129:[2,106],131:[2,106],132:[2,106],135:[2,106],136:[2,106],137:[2,106],138:[2,106],139:[2,106],140:[2,106]},{1:[2,82],6:[2,82],31:[2,82],32:[2,82],44:[2,82],53:[2,82],58:[2,82],61:[2,82],70:[2,82],71:[2,82],72:[2,82],74:[2,82],76:[2,82],77:[2,82],81:[2,82],83:[2,82],87:[2,82],88:[2,82],89:[2,82],94:[2,82],96:[2,82],105:[2,82],107:[2,82],108:[2,82],109:[2,82],113:[2,82],121:[2,82],129:[2,82],131:[2,82],132:[2,82],133:[2,82],134:[2,82],135:[2,82],136:[2,82],137:[2,82],138:[2,82],139:[2,82],140:[2,82],141:[2,82]},{1:[2,83],6:[2,83],31:[2,83],32:[2,83],44:[2,83],53:[2,83],58:[2,83],61:[2,83],70:[2,83],71:[2,83],72:[2,83],74:[2,83],76:[2,83],77:[2,83],81:[2,83],83:[2,83],87:[2,83],88:[2,83],89:[2,83],94:[2,83],96:[2,83],105:[2,83],107:[2,83],108:[2,83],109:[2,83],113:[2,83],121:[2,83],129:[2,83],131:[2,83],132:[2,83],133:[2,83],134:[2,83],135:[2,83],136:[2,83],137:[2,83],138:[2,83],139:[2,83],140:[2,83],141:[2,83]},{1:[2,84],6:[2,84],31:[2,84],32:[2,84],44:[2,84],53:[2,84],58:[2,84],61:[2,84],70:[2,84],71:[2,84],72:[2,84],74:[2,84],76:[2,84],77:[2,84],81:[2,84],83:[2,84],87:[2,84],88:[2,84],89:[2,84],94:[2,84],96:[2,84],105:[2,84],107:[2,84],108:[2,84],109:[2,84],113:[2,84],121:[2,84],129:[2,84],131:[2,84],132:[2,84],133:[2,84],134:[2,84],135:[2,84],136:[2,84],137:[2,84],138:[2,84],139:[2,84],140:[2,84],141:[2,84]},{1:[2,85],6:[2,85],31:[2,85],32:[2,85],44:[2,85],53:[2,85],58:[2,85],61:[2,85],70:[2,85],71:[2,85],72:[2,85],74:[2,85],76:[2,85],77:[2,85],81:[2,85],83:[2,85],87:[2,85],88:[2,85],89:[2,85],94:[2,85],96:[2,85],105:[2,85],107:[2,85],108:[2,85],109:[2,85],113:[2,85],121:[2,85],129:[2,85],131:[2,85],132:[2,85],133:[2,85],134:[2,85],135:[2,85],136:[2,85],137:[2,85],138:[2,85],139:[2,85],140:[2,85],141:[2,85]},{76:[1,245]},{61:[1,200],76:[2,90],95:246,96:[1,199],106:91,107:[1,69],109:[1,70],112:92,113:[1,72],114:73,129:[1,90],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[1,87],139:[1,88],140:[1,89]},{76:[2,91]},{8:247,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,76:[2,126],79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{12:[2,120],14:[2,120],17:[2,120],34:[2,120],36:[2,120],37:[2,120],39:[2,120],40:[2,120],41:[2,120],42:[2,120],49:[2,120],50:[2,120],51:[2,120],55:[2,120],56:[2,120],76:[2,120],79:[2,120],82:[2,120],85:[2,120],86:[2,120],91:[2,120],92:[2,120],93:[2,120],99:[2,120],103:[2,120],104:[2,120],107:[2,120],109:[2,120],111:[2,120],113:[2,120],122:[2,120],128:[2,120],130:[2,120],131:[2,120],132:[2,120],133:[2,120],134:[2,120]},{12:[2,121],14:[2,121],17:[2,121],34:[2,121],36:[2,121],37:[2,121],39:[2,121],40:[2,121],41:[2,121],42:[2,121],49:[2,121],50:[2,121],51:[2,121],55:[2,121],56:[2,121],76:[2,121],79:[2,121],82:[2,121],85:[2,121],86:[2,121],91:[2,121],92:[2,121],93:[2,121],99:[2,121],103:[2,121],104:[2,121],107:[2,121],109:[2,121],111:[2,121],113:[2,121],122:[2,121],128:[2,121],130:[2,121],131:[2,121],132:[2,121],133:[2,121],134:[2,121]},{1:[2,89],6:[2,89],31:[2,89],32:[2,89],44:[2,89],53:[2,89],58:[2,89],61:[2,89],70:[2,89],71:[2,89],72:[2,89],74:[2,89],76:[2,89],77:[2,89],81:[2,89],83:[2,89],87:[2,89],88:[2,89],89:[2,89],94:[2,89],96:[2,89],105:[2,89],107:[2,89],108:[2,89],109:[2,89],113:[2,89],121:[2,89],129:[2,89],131:[2,89],132:[2,89],133:[2,89],134:[2,89],135:[2,89],136:[2,89],137:[2,89],138:[2,89],139:[2,89],140:[2,89],141:[2,89]},{1:[2,107],6:[2,107],31:[2,107],32:[2,107],53:[2,107],58:[2,107],61:[2,107],70:[2,107],71:[2,107],72:[2,107],74:[2,107],76:[2,107],77:[2,107],81:[2,107],87:[2,107],88:[2,107],89:[2,107],94:[2,107],96:[2,107],105:[2,107],107:[2,107],108:[2,107],109:[2,107],113:[2,107],121:[2,107],129:[2,107],131:[2,107],132:[2,107],135:[2,107],136:[2,107],137:[2,107],138:[2,107],139:[2,107],140:[2,107]},{1:[2,40],6:[2,40],31:[2,40],32:[2,40],53:[2,40],58:[2,40],61:[2,40],76:[2,40],81:[2,40],89:[2,40],94:[2,40],96:[2,40],105:[2,40],106:91,107:[2,40],108:[2,40],109:[2,40],112:92,113:[2,40],114:73,121:[2,40],129:[2,40],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[1,87],139:[1,88],140:[1,89]},{8:248,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{8:249,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{1:[2,113],6:[2,113],31:[2,113],32:[2,113],44:[2,113],53:[2,113],58:[2,113],61:[2,113],70:[2,113],71:[2,113],72:[2,113],74:[2,113],76:[2,113],77:[2,113],81:[2,113],83:[2,113],87:[2,113],88:[2,113],89:[2,113],94:[2,113],96:[2,113],105:[2,113],107:[2,113],108:[2,113],109:[2,113],113:[2,113],121:[2,113],129:[2,113],131:[2,113],132:[2,113],133:[2,113],134:[2,113],135:[2,113],136:[2,113],137:[2,113],138:[2,113],139:[2,113],140:[2,113],141:[2,113]},{6:[2,57],31:[2,57],57:250,58:[1,233],89:[2,57]},{6:[2,132],31:[2,132],32:[2,132],58:[2,132],61:[1,251],89:[2,132],94:[2,132],106:91,107:[1,69],109:[1,70],112:92,113:[1,72],114:73,129:[1,90],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[1,87],139:[1,88],140:[1,89]},{54:252,55:[1,64],56:[1,65]},{33:113,34:[1,77],48:114,59:253,60:112,62:115,63:116,79:[1,74],92:[1,117],93:[1,118]},{53:[2,63],58:[2,63]},{8:254,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{1:[2,202],6:[2,202],31:[2,202],32:[2,202],53:[2,202],58:[2,202],61:[2,202],76:[2,202],81:[2,202],89:[2,202],94:[2,202],96:[2,202],105:[2,202],106:91,107:[2,202],108:[2,202],109:[2,202],112:92,113:[2,202],114:73,121:[2,202],129:[2,202],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[1,87],139:[1,88],140:[1,89]},{8:255,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{1:[2,204],6:[2,204],31:[2,204],32:[2,204],53:[2,204],58:[2,204],61:[2,204],76:[2,204],81:[2,204],89:[2,204],94:[2,204],96:[2,204],105:[2,204],106:91,107:[2,204],108:[2,204],109:[2,204],112:92,113:[2,204],114:73,121:[2,204],129:[2,204],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[1,87],139:[1,88],140:[1,89]},{1:[2,184],6:[2,184],31:[2,184],32:[2,184],53:[2,184],58:[2,184],61:[2,184],76:[2,184],81:[2,184],89:[2,184],94:[2,184],96:[2,184],105:[2,184],107:[2,184],108:[2,184],109:[2,184],113:[2,184],121:[2,184],129:[2,184],131:[2,184],132:[2,184],135:[2,184],136:[2,184],137:[2,184],138:[2,184],139:[2,184],140:[2,184]},{8:256,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{1:[2,137],6:[2,137],31:[2,137],32:[2,137],53:[2,137],58:[2,137],61:[2,137],76:[2,137],81:[2,137],89:[2,137],94:[2,137],96:[2,137],101:[1,257],105:[2,137],107:[2,137],108:[2,137],109:[2,137],113:[2,137],121:[2,137],129:[2,137],131:[2,137],132:[2,137],135:[2,137],136:[2,137],137:[2,137],138:[2,137],139:[2,137],140:[2,137]},{5:258,31:[1,5]},{33:259,34:[1,77]},{123:260,125:223,126:[1,224]},{32:[1,261],124:[1,262],125:263,126:[1,224]},{32:[2,177],124:[2,177],126:[2,177]},{8:265,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],98:264,99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{1:[2,100],5:266,6:[2,100],31:[1,5],32:[2,100],53:[2,100],58:[2,100],61:[2,100],76:[2,100],81:[2,100],89:[2,100],94:[2,100],96:[2,100],105:[2,100],106:91,107:[1,69],108:[2,100],109:[1,70],112:92,113:[1,72],114:73,121:[2,100],129:[2,100],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[1,87],139:[1,88],140:[1,89]},{1:[2,103],6:[2,103],31:[2,103],32:[2,103],53:[2,103],58:[2,103],61:[2,103],76:[2,103],81:[2,103],89:[2,103],94:[2,103],96:[2,103],105:[2,103],107:[2,103],108:[2,103],109:[2,103],113:[2,103],121:[2,103],129:[2,103],131:[2,103],132:[2,103],135:[2,103],136:[2,103],137:[2,103],138:[2,103],139:[2,103],140:[2,103]},{8:267,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{1:[2,142],6:[2,142],31:[2,142],32:[2,142],53:[2,142],58:[2,142],61:[2,142],70:[2,142],71:[2,142],72:[2,142],74:[2,142],76:[2,142],77:[2,142],81:[2,142],87:[2,142],88:[2,142],89:[2,142],94:[2,142],96:[2,142],105:[2,142],107:[2,142],108:[2,142],109:[2,142],113:[2,142],121:[2,142],129:[2,142],131:[2,142],132:[2,142],135:[2,142],136:[2,142],137:[2,142],138:[2,142],139:[2,142],140:[2,142]},{6:[1,78],32:[1,268]},{8:269,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{6:[2,69],12:[2,121],14:[2,121],17:[2,121],31:[2,69],34:[2,121],36:[2,121],37:[2,121],39:[2,121],40:[2,121],41:[2,121],42:[2,121],49:[2,121],50:[2,121],51:[2,121],55:[2,121],56:[2,121],58:[2,69],79:[2,121],82:[2,121],85:[2,121],86:[2,121],91:[2,121],92:[2,121],93:[2,121],94:[2,69],99:[2,121],103:[2,121],104:[2,121],107:[2,121],109:[2,121],111:[2,121],113:[2,121],122:[2,121],128:[2,121],130:[2,121],131:[2,121],132:[2,121],133:[2,121],134:[2,121]},{6:[1,271],31:[1,272],94:[1,270]},{6:[2,58],8:208,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,31:[2,58],32:[2,58],33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,64:155,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],89:[2,58],91:[1,62],92:[1,63],93:[1,61],94:[2,58],97:273,99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{6:[2,57],31:[2,57],32:[2,57],57:274,58:[1,233]},{1:[2,181],6:[2,181],31:[2,181],32:[2,181],53:[2,181],58:[2,181],61:[2,181],76:[2,181],81:[2,181],89:[2,181],94:[2,181],96:[2,181],105:[2,181],107:[2,181],108:[2,181],109:[2,181],113:[2,181],121:[2,181],124:[2,181],129:[2,181],131:[2,181],132:[2,181],135:[2,181],136:[2,181],137:[2,181],138:[2,181],139:[2,181],140:[2,181]},{8:275,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{8:276,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{119:[2,160],120:[2,160]},{33:166,34:[1,77],62:167,63:168,79:[1,74],93:[1,118],118:277},{1:[2,166],6:[2,166],31:[2,166],32:[2,166],53:[2,166],58:[2,166],61:[2,166],76:[2,166],81:[2,166],89:[2,166],94:[2,166],96:[2,166],105:[2,166],106:91,107:[2,166],108:[1,278],109:[2,166],112:92,113:[2,166],114:73,121:[1,279],129:[2,166],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[1,87],139:[1,88],140:[1,89]},{1:[2,167],6:[2,167],31:[2,167],32:[2,167],53:[2,167],58:[2,167],61:[2,167],76:[2,167],81:[2,167],89:[2,167],94:[2,167],96:[2,167],105:[2,167],106:91,107:[2,167],108:[1,280],109:[2,167],112:92,113:[2,167],114:73,121:[2,167],129:[2,167],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[1,87],139:[1,88],140:[1,89]},{6:[1,282],31:[1,283],81:[1,281]},{6:[2,58],11:175,31:[2,58],32:[2,58],33:176,34:[1,77],35:177,36:[1,75],37:[1,76],45:284,46:174,48:178,50:[1,51],81:[2,58],92:[1,117]},{8:285,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,31:[1,286],33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{1:[2,88],6:[2,88],31:[2,88],32:[2,88],44:[2,88],53:[2,88],58:[2,88],61:[2,88],70:[2,88],71:[2,88],72:[2,88],74:[2,88],76:[2,88],77:[2,88],81:[2,88],83:[2,88],87:[2,88],88:[2,88],89:[2,88],94:[2,88],96:[2,88],105:[2,88],107:[2,88],108:[2,88],109:[2,88],113:[2,88],121:[2,88],129:[2,88],131:[2,88],132:[2,88],133:[2,88],134:[2,88],135:[2,88],136:[2,88],137:[2,88],138:[2,88],139:[2,88],140:[2,88],141:[2,88]},{8:287,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,76:[2,124],79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{76:[2,125],106:91,107:[1,69],109:[1,70],112:92,113:[1,72],114:73,129:[1,90],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[1,87],139:[1,88],140:[1,89]},{1:[2,41],6:[2,41],31:[2,41],32:[2,41],53:[2,41],58:[2,41],61:[2,41],76:[2,41],81:[2,41],89:[2,41],94:[2,41],96:[2,41],105:[2,41],106:91,107:[2,41],108:[2,41],109:[2,41],112:92,113:[2,41],114:73,121:[2,41],129:[2,41],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[1,87],139:[1,88],140:[1,89]},{32:[1,288],106:91,107:[1,69],109:[1,70],112:92,113:[1,72],114:73,129:[1,90],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[1,87],139:[1,88],140:[1,89]},{6:[1,271],31:[1,272],89:[1,289]},{6:[2,69],31:[2,69],32:[2,69],58:[2,69],89:[2,69],94:[2,69]},{5:290,31:[1,5]},{53:[2,61],58:[2,61]},{53:[2,64],58:[2,64],106:91,107:[1,69],109:[1,70],112:92,113:[1,72],114:73,129:[1,90],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[1,87],139:[1,88],140:[1,89]},{32:[1,291],106:91,107:[1,69],109:[1,70],112:92,113:[1,72],114:73,129:[1,90],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[1,87],139:[1,88],140:[1,89]},{5:292,31:[1,5],106:91,107:[1,69],109:[1,70],112:92,113:[1,72],114:73,129:[1,90],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[1,87],139:[1,88],140:[1,89]},{5:293,31:[1,5]},{1:[2,138],6:[2,138],31:[2,138],32:[2,138],53:[2,138],58:[2,138],61:[2,138],76:[2,138],81:[2,138],89:[2,138],94:[2,138],96:[2,138],105:[2,138],107:[2,138],108:[2,138],109:[2,138],113:[2,138],121:[2,138],129:[2,138],131:[2,138],132:[2,138],135:[2,138],136:[2,138],137:[2,138],138:[2,138],139:[2,138],140:[2,138]},{5:294,31:[1,5]},{32:[1,295],124:[1,296],125:263,126:[1,224]},{1:[2,175],6:[2,175],31:[2,175],32:[2,175],53:[2,175],58:[2,175],61:[2,175],76:[2,175],81:[2,175],89:[2,175],94:[2,175],96:[2,175],105:[2,175],107:[2,175],108:[2,175],109:[2,175],113:[2,175],121:[2,175],129:[2,175],131:[2,175],132:[2,175],135:[2,175],136:[2,175],137:[2,175],138:[2,175],139:[2,175],140:[2,175]},{5:297,31:[1,5]},{32:[2,178],124:[2,178],126:[2,178]},{5:298,31:[1,5],58:[1,299]},{31:[2,134],58:[2,134],106:91,107:[1,69],109:[1,70],112:92,113:[1,72],114:73,129:[1,90],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[1,87],139:[1,88],140:[1,89]},{1:[2,101],6:[2,101],31:[2,101],32:[2,101],53:[2,101],58:[2,101],61:[2,101],76:[2,101],81:[2,101],89:[2,101],94:[2,101],96:[2,101],105:[2,101],107:[2,101],108:[2,101],109:[2,101],113:[2,101],121:[2,101],129:[2,101],131:[2,101],132:[2,101],135:[2,101],136:[2,101],137:[2,101],138:[2,101],139:[2,101],140:[2,101]},{1:[2,104],5:300,6:[2,104],31:[1,5],32:[2,104],53:[2,104],58:[2,104],61:[2,104],76:[2,104],81:[2,104],89:[2,104],94:[2,104],96:[2,104],105:[2,104],106:91,107:[1,69],108:[2,104],109:[1,70],112:92,113:[1,72],114:73,121:[2,104],129:[2,104],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[1,87],139:[1,88],140:[1,89]},{105:[1,301]},{94:[1,302],106:91,107:[1,69],109:[1,70],112:92,113:[1,72],114:73,129:[1,90],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[1,87],139:[1,88],140:[1,89]},{1:[2,119],6:[2,119],31:[2,119],32:[2,119],44:[2,119],53:[2,119],58:[2,119],61:[2,119],70:[2,119],71:[2,119],72:[2,119],74:[2,119],76:[2,119],77:[2,119],81:[2,119],87:[2,119],88:[2,119],89:[2,119],94:[2,119],96:[2,119],105:[2,119],107:[2,119],108:[2,119],109:[2,119],113:[2,119],119:[2,119],120:[2,119],121:[2,119],129:[2,119],131:[2,119],132:[2,119],135:[2,119],136:[2,119],137:[2,119],138:[2,119],139:[2,119],140:[2,119]},{8:208,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,64:155,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],97:303,99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{8:208,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,31:[1,154],33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,64:155,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],90:304,91:[1,62],92:[1,63],93:[1,61],97:153,99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{6:[2,128],31:[2,128],32:[2,128],58:[2,128],89:[2,128],94:[2,128]},{6:[1,271],31:[1,272],32:[1,305]},{1:[2,145],6:[2,145],31:[2,145],32:[2,145],53:[2,145],58:[2,145],61:[2,145],76:[2,145],81:[2,145],89:[2,145],94:[2,145],96:[2,145],105:[2,145],106:91,107:[1,69],108:[2,145],109:[1,70],112:92,113:[1,72],114:73,121:[2,145],129:[2,145],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[1,87],139:[1,88],140:[1,89]},{1:[2,147],6:[2,147],31:[2,147],32:[2,147],53:[2,147],58:[2,147],61:[2,147],76:[2,147],81:[2,147],89:[2,147],94:[2,147],96:[2,147],105:[2,147],106:91,107:[1,69],108:[2,147],109:[1,70],112:92,113:[1,72],114:73,121:[2,147],129:[2,147],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[1,87],139:[1,88],140:[1,89]},{119:[2,165],120:[2,165]},{8:306,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{8:307,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{8:308,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{1:[2,92],6:[2,92],31:[2,92],32:[2,92],44:[2,92],53:[2,92],58:[2,92],61:[2,92],70:[2,92],71:[2,92],72:[2,92],74:[2,92],76:[2,92],77:[2,92],81:[2,92],87:[2,92],88:[2,92],89:[2,92],94:[2,92],96:[2,92],105:[2,92],107:[2,92],108:[2,92],109:[2,92],113:[2,92],119:[2,92],120:[2,92],121:[2,92],129:[2,92],131:[2,92],132:[2,92],135:[2,92],136:[2,92],137:[2,92],138:[2,92],139:[2,92],140:[2,92]},{11:175,33:176,34:[1,77],35:177,36:[1,75],37:[1,76],45:309,46:174,48:178,50:[1,51],92:[1,117]},{6:[2,93],11:175,31:[2,93],32:[2,93],33:176,34:[1,77],35:177,36:[1,75],37:[1,76],45:173,46:174,48:178,50:[1,51],58:[2,93],80:310,92:[1,117]},{6:[2,95],31:[2,95],32:[2,95],58:[2,95],81:[2,95]},{6:[2,44],31:[2,44],32:[2,44],58:[2,44],81:[2,44],106:91,107:[1,69],109:[1,70],112:92,113:[1,72],114:73,129:[1,90],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[1,87],139:[1,88],140:[1,89]},{8:311,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{76:[2,123],106:91,107:[1,69],109:[1,70],112:92,113:[1,72],114:73,129:[1,90],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[1,87],139:[1,88],140:[1,89]},{1:[2,42],6:[2,42],31:[2,42],32:[2,42],53:[2,42],58:[2,42],61:[2,42],76:[2,42],81:[2,42],89:[2,42],94:[2,42],96:[2,42],105:[2,42],107:[2,42],108:[2,42],109:[2,42],113:[2,42],121:[2,42],129:[2,42],131:[2,42],132:[2,42],135:[2,42],136:[2,42],137:[2,42],138:[2,42],139:[2,42],140:[2,42]},{1:[2,114],6:[2,114],31:[2,114],32:[2,114],44:[2,114],53:[2,114],58:[2,114],61:[2,114],70:[2,114],71:[2,114],72:[2,114],74:[2,114],76:[2,114],77:[2,114],81:[2,114],83:[2,114],87:[2,114],88:[2,114],89:[2,114],94:[2,114],96:[2,114],105:[2,114],107:[2,114],108:[2,114],109:[2,114],113:[2,114],121:[2,114],129:[2,114],131:[2,114],132:[2,114],133:[2,114],134:[2,114],135:[2,114],136:[2,114],137:[2,114],138:[2,114],139:[2,114],140:[2,114],141:[2,114]},{1:[2,53],6:[2,53],31:[2,53],32:[2,53],53:[2,53],58:[2,53],61:[2,53],76:[2,53],81:[2,53],89:[2,53],94:[2,53],96:[2,53],105:[2,53],107:[2,53],108:[2,53],109:[2,53],113:[2,53],121:[2,53],129:[2,53],131:[2,53],132:[2,53],135:[2,53],136:[2,53],137:[2,53],138:[2,53],139:[2,53],140:[2,53]},{1:[2,203],6:[2,203],31:[2,203],32:[2,203],53:[2,203],58:[2,203],61:[2,203],76:[2,203],81:[2,203],89:[2,203],94:[2,203],96:[2,203],105:[2,203],107:[2,203],108:[2,203],109:[2,203],113:[2,203],121:[2,203],129:[2,203],131:[2,203],132:[2,203],135:[2,203],136:[2,203],137:[2,203],138:[2,203],139:[2,203],140:[2,203]},{1:[2,182],6:[2,182],31:[2,182],32:[2,182],53:[2,182],58:[2,182],61:[2,182],76:[2,182],81:[2,182],89:[2,182],94:[2,182],96:[2,182],105:[2,182],107:[2,182],108:[2,182],109:[2,182],113:[2,182],121:[2,182],124:[2,182],129:[2,182],131:[2,182],132:[2,182],135:[2,182],136:[2,182],137:[2,182],138:[2,182],139:[2,182],140:[2,182]},{1:[2,139],6:[2,139],31:[2,139],32:[2,139],53:[2,139],58:[2,139],61:[2,139],76:[2,139],81:[2,139],89:[2,139],94:[2,139],96:[2,139],105:[2,139],107:[2,139],108:[2,139],109:[2,139],113:[2,139],121:[2,139],129:[2,139],131:[2,139],132:[2,139],135:[2,139],136:[2,139],137:[2,139],138:[2,139],139:[2,139],140:[2,139]},{1:[2,140],6:[2,140],31:[2,140],32:[2,140],53:[2,140],58:[2,140],61:[2,140],76:[2,140],81:[2,140],89:[2,140],94:[2,140],96:[2,140],101:[2,140],105:[2,140],107:[2,140],108:[2,140],109:[2,140],113:[2,140],121:[2,140],129:[2,140],131:[2,140],132:[2,140],135:[2,140],136:[2,140],137:[2,140],138:[2,140],139:[2,140],140:[2,140]},{1:[2,173],6:[2,173],31:[2,173],32:[2,173],53:[2,173],58:[2,173],61:[2,173],76:[2,173],81:[2,173],89:[2,173],94:[2,173],96:[2,173],105:[2,173],107:[2,173],108:[2,173],109:[2,173],113:[2,173],121:[2,173],129:[2,173],131:[2,173],132:[2,173],135:[2,173],136:[2,173],137:[2,173],138:[2,173],139:[2,173],140:[2,173]},{5:312,31:[1,5]},{32:[1,313]},{6:[1,314],32:[2,179],124:[2,179],126:[2,179]},{8:315,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{1:[2,105],6:[2,105],31:[2,105],32:[2,105],53:[2,105],58:[2,105],61:[2,105],76:[2,105],81:[2,105],89:[2,105],94:[2,105],96:[2,105],105:[2,105],107:[2,105],108:[2,105],109:[2,105],113:[2,105],121:[2,105],129:[2,105],131:[2,105],132:[2,105],135:[2,105],136:[2,105],137:[2,105],138:[2,105],139:[2,105],140:[2,105]},{1:[2,143],6:[2,143],31:[2,143],32:[2,143],53:[2,143],58:[2,143],61:[2,143],70:[2,143],71:[2,143],72:[2,143],74:[2,143],76:[2,143],77:[2,143],81:[2,143],87:[2,143],88:[2,143],89:[2,143],94:[2,143],96:[2,143],105:[2,143],107:[2,143],108:[2,143],109:[2,143],113:[2,143],121:[2,143],129:[2,143],131:[2,143],132:[2,143],135:[2,143],136:[2,143],137:[2,143],138:[2,143],139:[2,143],140:[2,143]},{1:[2,122],6:[2,122],31:[2,122],32:[2,122],53:[2,122],58:[2,122],61:[2,122],70:[2,122],71:[2,122],72:[2,122],74:[2,122],76:[2,122],77:[2,122],81:[2,122],87:[2,122],88:[2,122],89:[2,122],94:[2,122],96:[2,122],105:[2,122],107:[2,122],108:[2,122],109:[2,122],113:[2,122],121:[2,122],129:[2,122],131:[2,122],132:[2,122],135:[2,122],136:[2,122],137:[2,122],138:[2,122],139:[2,122],140:[2,122]},{6:[2,129],31:[2,129],32:[2,129],58:[2,129],89:[2,129],94:[2,129]},{6:[2,57],31:[2,57],32:[2,57],57:316,58:[1,233]},{6:[2,130],31:[2,130],32:[2,130],58:[2,130],89:[2,130],94:[2,130]},{1:[2,168],6:[2,168],31:[2,168],32:[2,168],53:[2,168],58:[2,168],61:[2,168],76:[2,168],81:[2,168],89:[2,168],94:[2,168],96:[2,168],105:[2,168],106:91,107:[2,168],108:[2,168],109:[2,168],112:92,113:[2,168],114:73,121:[1,317],129:[2,168],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[1,87],139:[1,88],140:[1,89]},{1:[2,170],6:[2,170],31:[2,170],32:[2,170],53:[2,170],58:[2,170],61:[2,170],76:[2,170],81:[2,170],89:[2,170],94:[2,170],96:[2,170],105:[2,170],106:91,107:[2,170],108:[1,318],109:[2,170],112:92,113:[2,170],114:73,121:[2,170],129:[2,170],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[1,87],139:[1,88],140:[1,89]},{1:[2,169],6:[2,169],31:[2,169],32:[2,169],53:[2,169],58:[2,169],61:[2,169],76:[2,169],81:[2,169],89:[2,169],94:[2,169],96:[2,169],105:[2,169],106:91,107:[2,169],108:[2,169],109:[2,169],112:92,113:[2,169],114:73,121:[2,169],129:[2,169],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[1,87],139:[1,88],140:[1,89]},{6:[2,96],31:[2,96],32:[2,96],58:[2,96],81:[2,96]},{6:[2,57],31:[2,57],32:[2,57],57:319,58:[1,243]},{32:[1,320],106:91,107:[1,69],109:[1,70],112:92,113:[1,72],114:73,129:[1,90],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[1,87],139:[1,88],140:[1,89]},{32:[1,321]},{1:[2,176],6:[2,176],31:[2,176],32:[2,176],53:[2,176],58:[2,176],61:[2,176],76:[2,176],81:[2,176],89:[2,176],94:[2,176],96:[2,176],105:[2,176],107:[2,176],108:[2,176],109:[2,176],113:[2,176],121:[2,176],129:[2,176],131:[2,176],132:[2,176],135:[2,176],136:[2,176],137:[2,176],138:[2,176],139:[2,176],140:[2,176]},{32:[2,180],124:[2,180],126:[2,180]},{31:[2,135],58:[2,135],106:91,107:[1,69],109:[1,70],112:92,113:[1,72],114:73,129:[1,90],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[1,87],139:[1,88],140:[1,89]},{6:[1,271],31:[1,272],32:[1,322]},{8:323,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{8:324,9:121,10:22,11:23,12:[1,24],13:25,14:[1,52],16:21,17:[1,49],18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,33:66,34:[1,77],35:55,36:[1,75],37:[1,76],38:27,39:[1,56],40:[1,57],41:[1,58],42:[1,59],43:26,48:67,49:[1,50],50:[1,51],51:[1,32],54:33,55:[1,64],56:[1,65],62:53,63:54,65:39,67:28,68:29,69:30,79:[1,74],82:[1,46],85:[1,31],86:[1,48],91:[1,62],92:[1,63],93:[1,61],99:[1,41],103:[1,47],104:[1,60],106:42,107:[1,69],109:[1,70],110:43,111:[1,71],112:44,113:[1,72],114:73,122:[1,45],127:40,128:[1,68],130:[1,34],131:[1,35],132:[1,36],133:[1,37],134:[1,38]},{6:[1,282],31:[1,283],32:[1,325]},{6:[2,45],31:[2,45],32:[2,45],58:[2,45],81:[2,45]},{1:[2,174],6:[2,174],31:[2,174],32:[2,174],53:[2,174],58:[2,174],61:[2,174],76:[2,174],81:[2,174],89:[2,174],94:[2,174],96:[2,174],105:[2,174],107:[2,174],108:[2,174],109:[2,174],113:[2,174],121:[2,174],129:[2,174],131:[2,174],132:[2,174],135:[2,174],136:[2,174],137:[2,174],138:[2,174],139:[2,174],140:[2,174]},{6:[2,131],31:[2,131],32:[2,131],58:[2,131],89:[2,131],94:[2,131]},{1:[2,171],6:[2,171],31:[2,171],32:[2,171],53:[2,171],58:[2,171],61:[2,171],76:[2,171],81:[2,171],89:[2,171],94:[2,171],96:[2,171],105:[2,171],106:91,107:[2,171],108:[2,171],109:[2,171],112:92,113:[2,171],114:73,121:[2,171],129:[2,171],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[1,87],139:[1,88],140:[1,89]},{1:[2,172],6:[2,172],31:[2,172],32:[2,172],53:[2,172],58:[2,172],61:[2,172],76:[2,172],81:[2,172],89:[2,172],94:[2,172],96:[2,172],105:[2,172],106:91,107:[2,172],108:[2,172],109:[2,172],112:92,113:[2,172],114:73,121:[2,172],129:[2,172],131:[1,84],132:[1,83],135:[1,82],136:[1,85],137:[1,86],138:[1,87],139:[1,88],140:[1,89]},{6:[2,97],31:[2,97],32:[2,97],58:[2,97],81:[2,97]}],
defaultActions: {64:[2,55],65:[2,56],79:[2,3],98:[2,112],197:[2,91]},
parseError: function parseError(str, hash) {
    throw new Error(str);
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    //this.reductionCount = this.shiftCount = 0;

    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    if (typeof this.lexer.yylloc == 'undefined')
        this.lexer.yylloc = {};
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);

    if (typeof this.yy.parseError === 'function')
        this.parseError = this.yy.parseError;

    function popStack (n) {
        stack.length = stack.length - 2*n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

    function lex() {
        var token;
        token = self.lexer.lex() || 1; // $end = 1
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval={},p,len,newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length-1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol == null)
                symbol = lex();
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

        // handle parse error
        _handle_error:
        if (typeof action === 'undefined' || !action.length || !action[0]) {

            if (!recovering) {
                // Report error
                expected = [];
                for (p in table[state]) if (this.terminals_[p] && p > 2) {
                    expected.push("'"+this.terminals_[p]+"'");
                }
                var errStr = '';
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+this.lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + this.terminals_[symbol]+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == 1 /*EOF*/ ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr,
                    {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol == EOF) {
                    throw new Error(errStr || 'Parsing halted.');
                }

                // discard current lookahead and grab another
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            while (1) {
                // check for error recovery rule in this state
                if ((TERROR.toString()) in table[state]) {
                    break;
                }
                if (state == 0) {
                    throw new Error(errStr || 'Parsing halted.');
                }
                popStack(1);
                state = stack[stack.length-1];
            }

            preErrorSymbol = symbol; // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {

            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(this.lexer.yytext);
                lstack.push(this.lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = this.lexer.yyleng;
                    yytext = this.lexer.yytext;
                    yylineno = this.lexer.yylineno;
                    yyloc = this.lexer.yylloc;
                    if (recovering > 0)
                        recovering--;
                } else { // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2: // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3: // accept
                return true;
        }

    }

    return true;
}};
return parser;
})();
if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); }
exports.main = function commonjsMain(args) {
    if (!args[1])
        throw new Error('Usage: '+args[0]+' FILE');
    if (typeof process !== 'undefined') {
        var source = require('fs').readFileSync(require('path').join(process.cwd(), args[1]), "utf8");
    } else {
        var cwd = require("file").path(require("file").cwd());
        var source = cwd.join(args[1]).read({charset: "utf-8"});
    }
    return exports.parser.parse(source);
}
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(typeof process !== 'undefined' ? process.argv.slice(1) : require("system").args);
}
}
};require['./scope'] = new function() {
  var exports = this;
  // Generated by CoffeeScript 1.2.1-pre
(function() {
  var Scope, extend, last, _ref;

  _ref = require('./helpers'), extend = _ref.extend, last = _ref.last;

  exports.Scope = Scope = (function() {

    Scope.name = 'Scope';

    Scope.root = null;

    function Scope(parent, expressions, method) {
      this.parent = parent;
      this.expressions = expressions;
      this.method = method;
      this.variables = [
        {
          name: 'arguments',
          type: 'arguments'
        }
      ];
      this.positions = {};
      if (!this.parent) Scope.root = this;
    }

    Scope.prototype.add = function(name, type, immediate) {
      if (this.shared && !immediate) return this.parent.add(name, type, immediate);
      if (Object.prototype.hasOwnProperty.call(this.positions, name)) {
        return this.variables[this.positions[name]].type = type;
      } else {
        return this.positions[name] = this.variables.push({
          name: name,
          type: type
        }) - 1;
      }
    };

    Scope.prototype.find = function(name, options) {
      if (this.check(name, options)) return true;
      this.add(name, 'var');
      return false;
    };

    Scope.prototype.parameter = function(name) {
      if (this.shared && this.parent.check(name, true)) return;
      return this.add(name, 'param');
    };

    Scope.prototype.check = function(name, immediate) {
      var found, _ref2;
      found = !!this.type(name);
      if (found || immediate) return found;
      return !!((_ref2 = this.parent) != null ? _ref2.check(name) : void 0);
    };

    Scope.prototype.temporary = function(name, index) {
      if (name.length > 1) {
        return '_' + name + (index > 1 ? index : '');
      } else {
        return '_' + (index + parseInt(name, 36)).toString(36).replace(/\d/g, 'a');
      }
    };

    Scope.prototype.type = function(name) {
      var v, _i, _len, _ref2;
      _ref2 = this.variables;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        v = _ref2[_i];
        if (v.name === name) return v.type;
      }
      return null;
    };

    Scope.prototype.freeVariable = function(name, reserve) {
      var index, temp;
      if (reserve == null) reserve = true;
      index = 0;
      while (this.check((temp = this.temporary(name, index)))) {
        index++;
      }
      if (reserve) this.add(temp, 'var', true);
      return temp;
    };

    Scope.prototype.assign = function(name, value) {
      this.add(name, {
        value: value,
        assigned: true
      }, true);
      return this.hasAssignments = true;
    };

    Scope.prototype.hasDeclarations = function() {
      return !!this.declaredVariables().length;
    };

    Scope.prototype.declaredVariables = function() {
      var realVars, tempVars, v, _i, _len, _ref2;
      realVars = [];
      tempVars = [];
      _ref2 = this.variables;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        v = _ref2[_i];
        if (v.type === 'var') {
          (v.name.charAt(0) === '_' ? tempVars : realVars).push(v.name);
        }
      }
      return realVars.sort().concat(tempVars.sort());
    };

    Scope.prototype.assignedVariables = function() {
      var v, _i, _len, _ref2, _results;
      _ref2 = this.variables;
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        v = _ref2[_i];
        if (v.type.assigned) _results.push("" + v.name + " = " + v.type.value);
      }
      return _results;
    };

    return Scope;

  })();

}).call(this);

};require['./tame'] = new function() {
  var exports = this;
  // Generated by CoffeeScript 1.2.1-pre
(function() {
  var Deferrals, Rendezvous, makeDeferReturn,
    __slice = [].slice;

  exports.transform = function(x) {
    return x.tameTransform();
  };

  exports["const"] = {
    k: "__tame_k",
    param: "__tame_p_",
    ns: "tame",
    Deferrals: "Deferrals",
    deferrals: "__tame_deferrals",
    fulfill: "_fulfill",
    b_while: "_break",
    t_while: "_while",
    c_while: "_continue",
    n_while: "_next",
    n_arg: "__tame_next_arg",
    defer_method: "defer",
    slot: "__slot",
    assign_fn: "assign_fn",
    runtime: "tamerun",
    autocb: "autocb",
    retslot: "ret"
  };

  makeDeferReturn = function(obj, defer_args, id) {
    var k, ret, _i, _len, _ref;
    ret = function() {
      var inner_args, _ref;
      inner_args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (defer_args != null) {
        if ((_ref = defer_args.assign_fn) != null) _ref.apply(null, inner_args);
      }
      return obj._fulfill(id);
    };
    if (defer_args) {
      ret.__tame_trace = {};
      _ref = ["parent_cb", "file", "line", "func_name"];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        k = _ref[_i];
        ret.__tame_trace[k] = defer_args[k];
      }
    }
    return ret;
  };

  Deferrals = (function() {

    Deferrals.name = 'Deferrals';

    function Deferrals(k) {
      this.continuation = k;
      this.count = 1;
      this.ret = null;
    }

    Deferrals.prototype._fulfill = function() {
      if (--this.count === 0) return this.continuation(this.ret);
    };

    Deferrals.prototype.defer = function(args) {
      var self;
      this.count++;
      self = this;
      return makeDeferReturn(self, args, null);
    };

    return Deferrals;

  })();

  Rendezvous = (function() {
    var RvId;

    Rendezvous.name = 'Rendezvous';

    function Rendezvous() {
      this.completed = [];
      this.waiters = [];
      this.defer_id = 0;
      this[exports["const"].deferrals] = this;
    }

    RvId = (function() {

      RvId.name = 'RvId';

      function RvId(rv, id) {
        this.rv = rv;
        this.id = id;
      }

      RvId.prototype.defer = function(defer_args) {
        return this.rv._deferWithId(this.id, defer_args);
      };

      return RvId;

    })();

    Rendezvous.prototype.wait = function(cb) {
      var x;
      if (this.completed.length) {
        x = this.completed.shift();
        return cb(x);
      } else {
        return this.waiters.push(cb);
      }
    };

    Rendezvous.prototype.defer = function(defer_args) {
      var id;
      id = this.defer_id++;
      return this.deferWithId(id, defer_args);
    };

    Rendezvous.prototype.id = function(i) {
      var ret;
      ret = {};
      ret[exports["const"].deferrals] = new RvId(this, i);
      return ret;
    };

    Rendezvous.prototype._fulfill = function(id) {
      var cb;
      if (this.waiters.length) {
        cb = this.waiters.shift();
        return cb(id);
      } else {
        return this.completed.push(id);
      }
    };

    Rendezvous.prototype._deferWithId = function(id, defer_args) {
      this.count++;
      return makeDeferReturn(this, defer_args, id);
    };

    return Rendezvous;

  })();

  exports.runtime = {
    Deferrals: Deferrals,
    Rendezvous: Rendezvous
  };

}).call(this);

};require['./nodes'] = new function() {
  var exports = this;
  // Generated by CoffeeScript 1.2.1-pre
(function() {
  var Access, Arr, Assign, Await, Base, Block, Call, Class, Closure, Code, Comment, CpsCascade, Defer, Existence, Extends, For, IDENTIFIER, IDENTIFIER_STR, IS_STRING, If, In, Index, InlineDeferral, LEVEL_ACCESS, LEVEL_COND, LEVEL_LIST, LEVEL_OP, LEVEL_PAREN, LEVEL_TOP, Literal, METHOD_DEF, NEGATE, NO, NULL, Obj, Op, Param, Parens, RESERVED, Range, Return, SIMPLENUM, Scope, Slice, Slot, Splat, Switch, TAB, THIS, TameRequire, TameReturnValue, TameTailCall, Throw, Try, UTILITIES, Value, While, YES, compact, del, ends, extend, flatten, last, merge, multident, starts, tame, unfoldSoak, utility, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Scope = require('./scope').Scope;

  RESERVED = require('./lexer').RESERVED;

  tame = require('./tame');

  _ref = require('./helpers'), compact = _ref.compact, flatten = _ref.flatten, extend = _ref.extend, merge = _ref.merge, del = _ref.del, starts = _ref.starts, ends = _ref.ends, last = _ref.last;

  exports.extend = extend;

  YES = function() {
    return true;
  };

  NO = function() {
    return false;
  };

  THIS = function() {
    return this;
  };

  NEGATE = function() {
    this.negated = !this.negated;
    return this;
  };

  NULL = function() {
    return new Value(new Literal('null'));
  };

  exports.Base = Base = (function() {

    Base.name = 'Base';

    function Base() {
      this.tameContinuationBlock = null;
      this.tamePrequels = [];
      this.tameLoopFlag = false;
      this.tameNodeFlag = false;
      this.tameGotCpsSplitFlag = false;
      this.tameCpsPivotFlag = false;
      this.tameHasAutocbFlag = false;
      this.tameParentAwait = null;
      this.tameCallContinuationFlag = false;
    }

    Base.prototype.compile = function(o, lvl) {
      var node;
      o = extend({}, o);
      if (lvl) o.level = lvl;
      node = this.unfoldSoak(o) || this;
      node.tab = o.indent;
      if (node.tameHasContinuation() && !node.tameGotCpsSplitFlag) {
        return node.compileCps(o);
      } else if (o.level === LEVEL_TOP || !node.isStatement(o)) {
        return node.compileNode(o);
      } else {
        return node.compileClosure(o);
      }
    };

    Base.prototype.compileClosure = function(o) {
      if (this.jumps()) {
        throw SyntaxError('cannot use a pure statement in an expression.');
      }
      o.sharedScope = true;
      return Closure.wrap(this).compileNode(o);
    };

    Base.prototype.compileCps = function(o) {
      var code, k, l, pb;
      this.tameGotCpsSplitFlag = true;
      if ((l = this.tamePrequels.length)) {
        k = this.tameContinuationBlock ? [this, this.tameContinuationBlock] : this.tameWrapContinuation() ? new TameTailCall(null, this) : this;
        while (l--) {
          pb = this.tamePrequels[l];
          k = CpsCascade.wrap(pb.block, k, pb.retval, o);
        }
        code = k;
      } else {
        code = CpsCascade.wrap(this, this.tameContinuationBlock, null, o);
      }
      return code.compile(o);
    };

    Base.prototype.cache = function(o, level, reused) {
      var ref, sub;
      if (!this.isComplex()) {
        ref = level ? this.compile(o, level) : this;
        return [ref, ref];
      } else {
        ref = new Literal(reused || o.scope.freeVariable('ref'));
        sub = new Assign(ref, this);
        if (level) {
          return [sub.compile(o, level), ref.value];
        } else {
          return [sub, ref];
        }
      }
    };

    Base.prototype.compileLoopReference = function(o, name) {
      var src, tmp;
      src = tmp = this.compile(o, LEVEL_LIST);
      if (!((-Infinity < +src && +src < Infinity) || IDENTIFIER.test(src) && o.scope.check(src, true))) {
        src = "" + (tmp = o.scope.freeVariable(name)) + " = " + src;
      }
      return [src, tmp];
    };

    Base.prototype.makeReturn = function(res) {
      var me;
      me = this.unwrapAll();
      if (res) {
        return new Call(new Literal("" + res + ".push"), [me]);
      } else {
        return new Return(me, this.tameHasAutocbFlag);
      }
    };

    Base.prototype.contains = function(pred) {
      var contains;
      contains = false;
      this.traverseChildren(false, function(node) {
        if (pred(node)) {
          contains = true;
          return false;
        }
      });
      return contains;
    };

    Base.prototype.containsType = function(type) {
      return this instanceof type || this.contains(function(node) {
        return node instanceof type;
      });
    };

    Base.prototype.lastNonComment = function(list) {
      var i;
      i = list.length;
      while (i--) {
        if (!(list[i] instanceof Comment)) return list[i];
      }
      return null;
    };

    Base.prototype.toString = function(idt, name) {
      var b, extras, pidt, tree, _i, _len, _ref2;
      if (idt == null) idt = '';
      if (name == null) name = this.constructor.name;
      extras = "";
      if (this.tameNodeFlag) extras += "A";
      if (this.tameLoopFlag) extras += "L";
      if (this.tameCpsPivotFlag) extras += "P";
      if (this.tameHasAutocbFlag) extras += "C";
      if (this.tameParentAwait) extras += "D";
      if (extras.length) extras = " (" + extras + ")";
      tree = '\n' + idt + name;
      if (this.soak) tree += '?';
      tree += extras;
      _ref2 = this.tamePrequels;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        b = _ref2[_i];
        pidt = idt + TAB;
        tree += '\n' + pidt + "Prequel";
        tree += b.block.toString(pidt + TAB);
      }
      this.eachChild(function(node) {
        return tree += node.toString(idt + TAB);
      });
      if (this.tameContinuationBlock) {
        idt += TAB;
        tree += '\n' + idt + "Continuation";
        tree += this.tameContinuationBlock.toString(idt + TAB);
      }
      return tree;
    };

    Base.prototype.eachChild = function(func) {
      var attr, child, _i, _j, _len, _len2, _ref2, _ref3;
      if (!this.children) return this;
      _ref2 = this.children;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        attr = _ref2[_i];
        if (this[attr]) {
          _ref3 = flatten([this[attr]]);
          for (_j = 0, _len2 = _ref3.length; _j < _len2; _j++) {
            child = _ref3[_j];
            if (func(child) === false) return this;
          }
        }
      }
      return this;
    };

    Base.prototype.traverseChildren = function(crossScope, func) {
      return this.eachChild(function(child) {
        if (func(child) === false) return false;
        return child.traverseChildren(crossScope, func);
      });
    };

    Base.prototype.invert = function() {
      return new Op('!', this);
    };

    Base.prototype.unwrapAll = function() {
      var node;
      node = this;
      while (node !== (node = node.unwrap())) {
        continue;
      }
      return node;
    };

    Base.prototype.flattenChildren = function() {
      var attr, child, out, _i, _j, _len, _len2, _ref2, _ref3;
      out = [];
      _ref2 = this.children;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        attr = _ref2[_i];
        if (this[attr]) {
          _ref3 = flatten([this[attr]]);
          for (_j = 0, _len2 = _ref3.length; _j < _len2; _j++) {
            child = _ref3[_j];
            out.push(child);
          }
        }
      }
      return out;
    };

    Base.prototype.tameWalkAst = function(p, o) {
      var child, _i, _len, _ref2;
      this.tameParentAwait = p;
      this.tameHasAutocbFlag = o.foundAutocb;
      _ref2 = this.flattenChildren();
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        child = _ref2[_i];
        if (child.tameWalkAst(p, o)) this.tameNodeFlag = true;
      }
      return this.tameNodeFlag;
    };

    Base.prototype.tameWalkAstLoops = function(flood) {
      var child, _i, _len, _ref2;
      if (this.isLoop() && this.tameNodeFlag) flood = true;
      this.tameLoopFlag = flood;
      _ref2 = this.flattenChildren();
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        child = _ref2[_i];
        if (child.tameWalkAstLoops(flood)) this.tameLoopFlag = true;
      }
      return this.tameLoopFlag;
    };

    Base.prototype.tameWalkCpsPivots = function() {
      var child, _i, _len, _ref2;
      if (this.tameNodeFlag || (this.tameLoopFlag && this.tameIsJump())) {
        this.tameCpsPivotFlag = true;
      }
      _ref2 = this.flattenChildren();
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        child = _ref2[_i];
        if (child.tameWalkCpsPivots()) this.tameCpsPivotFlag = true;
      }
      return this.tameCpsPivotFlag;
    };

    Base.prototype.children = [];

    Base.prototype.tameCpsRotate = function() {
      var child, _i, _len, _ref2;
      _ref2 = this.flattenChildren();
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        child = _ref2[_i];
        child.tameCpsRotate();
      }
      return this;
    };

    Base.prototype.tameCpsExprRotate = function(v) {
      var doRotate;
      doRotate = v.tameIsTamedExpr();
      if (doRotate) v.tameCallContinuation();
      v.tameCpsRotate();
      if (doRotate) {
        return this.tameNestPrequelBlock(v);
      } else {
        return null;
      }
    };

    Base.prototype.tameIsCpsPivot = function() {
      return this.tameCpsPivotFlag;
    };

    Base.prototype.tameNestContinuationBlock = function(b) {
      return this.tameContinuationBlock = b;
    };

    Base.prototype.tameHasContinuation = function() {
      var _ref2;
      return !!this.tameContinuationBlock || ((_ref2 = this.tamePrequels) != null ? _ref2.length : void 0);
    };

    Base.prototype.tameCallContinuation = function() {
      return this.tameCallContinuationFlag = true;
    };

    Base.prototype.tameWrapContinuation = NO;

    Base.prototype.tameIsJump = NO;

    Base.prototype.tameIsTamedExpr = function() {
      return (!(this instanceof Code)) && this.tameNodeFlag;
    };

    Base.prototype.tameNestPrequelBlock = function(bb) {
      var obj, rv;
      rv = new TameReturnValue();
      obj = this.tameParentAwait || this;
      obj.tamePrequels.push({
        block: bb,
        retval: rv
      });
      return rv;
    };

    Base.prototype.tameUnwrap = function(e) {
      if (e.tameHasContinuation() && this.tameHasContinuation()) {
        return this;
      } else {
        if (this.tameHasContinuation()) {
          e.tameContinuationBlock = this.tameContinuationBlock;
          e.tamePrequels = this.tamePrequels;
        }
        return e;
      }
    };

    Base.prototype.isStatement = NO;

    Base.prototype.jumps = NO;

    Base.prototype.isComplex = YES;

    Base.prototype.isChainable = NO;

    Base.prototype.isAssignable = NO;

    Base.prototype.isLoop = NO;

    Base.prototype.unwrap = THIS;

    Base.prototype.unfoldSoak = NO;

    Base.prototype.assigns = NO;

    return Base;

  })();

  exports.Block = Block = (function(_super) {

    __extends(Block, _super);

    Block.name = 'Block';

    function Block(nodes) {
      Block.__super__.constructor.call(this);
      this.expressions = compact(flatten(nodes || []));
    }

    Block.prototype.children = ['expressions'];

    Block.prototype.push = function(node) {
      this.expressions.push(node);
      return this;
    };

    Block.prototype.pop = function() {
      return this.expressions.pop();
    };

    Block.prototype.unshift = function(node) {
      this.expressions.unshift(node);
      return this;
    };

    Block.prototype.unwrap = function() {
      if (this.expressions.length === 1) {
        return this.tameUnwrap(this.expressions[0]);
      } else {
        return this;
      }
    };

    Block.prototype.getSingle = function() {
      if (this.expressions.length === 1) {
        return this.expressions[0];
      } else {
        return null;
      }
    };

    Block.prototype.isEmpty = function() {
      return !this.expressions.length;
    };

    Block.prototype.isStatement = function(o) {
      var exp, _i, _len, _ref2;
      _ref2 = this.expressions;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        exp = _ref2[_i];
        if (exp.isStatement(o)) return true;
      }
      return false;
    };

    Block.prototype.jumps = function(o) {
      var exp, _i, _len, _ref2;
      _ref2 = this.expressions;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        exp = _ref2[_i];
        if (exp.jumps(o)) return exp;
      }
    };

    Block.prototype.tameThreadReturn = function(call) {
      var expr, foundReturn, len;
      call = call || new TameTailCall;
      len = this.expressions.length;
      foundReturn = false;
      while (len--) {
        expr = this.expressions[len];
        if (expr.isStatement()) break;
        if (!(expr instanceof Comment) && !(expr instanceof Return)) {
          call.assignValue(expr);
          this.expressions[len] = call;
          return;
        }
      }
      return this.expressions.push(call);
    };

    Block.prototype.makeReturn = function(res) {
      var expr, foundReturn, len;
      len = this.expressions.length;
      foundReturn = false;
      while (len--) {
        expr = this.expressions[len];
        if (!(expr instanceof Comment)) {
          this.expressions[len] = expr.makeReturn(res);
          if (expr instanceof Return && !expr.expression && !expr.tameHasAutocbFlag) {
            this.expressions.splice(len, 1);
            foundReturn = true;
          } else if (!(expr instanceof If) || expr.elseBody) {
            foundReturn = true;
          }
          break;
        }
      }
      if (this.tameHasAutocbFlag && !this.tameNodeFlag && !foundReturn) {
        this.expressions.push(new Return(null, true));
      }
      return this;
    };

    Block.prototype.compileCps = function(o) {
      this.tameGotCpsSplitFlag = true;
      if (this.expressions.length > 1) {
        return Block.__super__.compileCps.call(this, o);
      } else {
        return this.compileNode(o);
      }
    };

    Block.prototype.compile = function(o, level) {
      if (o == null) o = {};
      if (o.scope) {
        return Block.__super__.compile.call(this, o, level);
      } else {
        return this.compileRoot(o);
      }
    };

    Block.prototype.compileNode = function(o) {
      var code, codes, node, top, _i, _len, _ref2;
      this.tab = o.indent;
      top = o.level === LEVEL_TOP;
      codes = [];
      _ref2 = this.expressions;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        node = _ref2[_i];
        node = node.unwrapAll();
        node = node.unfoldSoak(o) || node;
        if (node instanceof Block) {
          codes.push(node.compileNode(o));
        } else if (top) {
          node.front = true;
          code = node.compile(o);
          if (!node.isStatement(o)) {
            code = "" + this.tab + code + ";";
            if (node instanceof Literal) code = "" + code + "\n";
          }
          codes.push(code);
        } else {
          codes.push(node.compile(o, LEVEL_LIST));
        }
      }
      if (top) {
        if (this.spaced) {
          return "\n" + (codes.join('\n\n')) + "\n";
        } else {
          return codes.join('\n');
        }
      }
      code = codes.join(', ') || 'void 0';
      if (codes.length > 1 && o.level >= LEVEL_LIST) {
        return "(" + code + ")";
      } else {
        return code;
      }
    };

    Block.prototype.compileRoot = function(o) {
      var code, exp, i, prelude, preludeExps, rest;
      o.indent = o.bare ? '' : TAB;
      o.scope = new Scope(null, this, null);
      o.level = LEVEL_TOP;
      this.spaced = true;
      prelude = "";
      if (!o.bare) {
        preludeExps = (function() {
          var _i, _len, _ref2, _results;
          _ref2 = this.expressions;
          _results = [];
          for (i = _i = 0, _len = _ref2.length; _i < _len; i = ++_i) {
            exp = _ref2[i];
            if (!(exp.unwrap() instanceof Comment)) break;
            _results.push(exp);
          }
          return _results;
        }).call(this);
        rest = this.expressions.slice(preludeExps.length);
        this.expressions = preludeExps;
        if (preludeExps.length) {
          prelude = "" + (this.compileNode(merge(o, {
            indent: ''
          }))) + "\n";
        }
        this.expressions = rest;
      }
      code = this.compileWithDeclarations(o);
      if (o.bare) return code;
      return "" + prelude + "(function() {\n" + code + "\n}).call(this);\n";
    };

    Block.prototype.compileWithDeclarations = function(o) {
      var assigns, code, declars, exp, i, post, rest, scope, spaced, _i, _len, _ref2, _ref3, _ref4;
      code = post = '';
      _ref2 = this.expressions;
      for (i = _i = 0, _len = _ref2.length; _i < _len; i = ++_i) {
        exp = _ref2[i];
        exp = exp.unwrap();
        if (!(exp instanceof Comment || exp instanceof Literal)) break;
      }
      o = merge(o, {
        level: LEVEL_TOP
      });
      if (i) {
        rest = this.expressions.splice(i, 9e9);
        _ref3 = [this.spaced, false], spaced = _ref3[0], this.spaced = _ref3[1];
        _ref4 = [this.compileNode(o), spaced], code = _ref4[0], this.spaced = _ref4[1];
        this.expressions = rest;
      }
      post = this.compileNode(o);
      scope = o.scope;
      if (scope.expressions === this) {
        declars = o.scope.hasDeclarations();
        assigns = scope.hasAssignments;
        if (declars || assigns) {
          if (i) code += '\n';
          code += "" + this.tab + "var ";
          if (declars) code += scope.declaredVariables().join(', ');
          if (assigns) {
            if (declars) code += ",\n" + (this.tab + TAB);
            code += scope.assignedVariables().join(",\n" + (this.tab + TAB));
          }
          code += ';\n';
        }
      }
      return code + post;
    };

    Block.prototype.tameCpsRotate = function() {
      var child, e, i, pivot, rest, _i, _j, _len, _len2, _ref2;
      pivot = null;
      _ref2 = this.expressions;
      for (i = _i = 0, _len = _ref2.length; _i < _len; i = ++_i) {
        e = _ref2[i];
        if (e.tameIsCpsPivot()) {
          pivot = e;
          pivot.tameCallContinuation();
        }
        e.tameCpsRotate();
        if (pivot) break;
      }
      if (!pivot) return this;
      if (pivot.tameContinuationBlock) {
        throw SyntaxError("unexpected continuation block in node");
      }
      rest = this.expressions.slice(i + 1);
      this.expressions = this.expressions.slice(0, i + 1);
      if (rest.length) {
        child = new Block(rest);
        pivot.tameNestContinuationBlock(child);
        for (_j = 0, _len2 = rest.length; _j < _len2; _j++) {
          e = rest[_j];
          if (e.tameNodeFlag) child.tameNodeFlag = true;
          if (e.tameLoopFlag) child.tameLoopFlag = true;
          if (e.tameCpsPivotFlag) child.tameCpsPivotFlag = true;
          if (e.tameHasAutocbFlag) child.tameHasAutocbFlag = true;
        }
        child.tameCpsRotate();
      }
      return this;
    };

    Block.wrap = function(nodes) {
      if (nodes.length === 1 && nodes[0] instanceof Block) return nodes[0];
      return new Block(nodes);
    };

    Block.prototype.endsInAwait = function() {
      var _ref2;
      return ((_ref2 = this.expressions) != null ? _ref2.length : void 0) && this.expressions[this.expressions.length - 1] instanceof Await;
    };

    Block.prototype.tameAddRuntime = function() {
      return this.expressions.unshift(new TameRequire());
    };

    Block.prototype.tameTransform = function() {
      var obj;
      obj = {};
      this.tameWalkAst(null, obj);
      if (obj.foundAwait) {
        if (obj.foundDefer && !obj.foundRequire) this.tameAddRuntime();
        this.tameWalkAstLoops(false);
        this.tameWalkCpsPivots();
        this.tameCpsRotate();
      }
      return this;
    };

    return Block;

  })(Base);

  exports.Literal = Literal = (function(_super) {

    __extends(Literal, _super);

    Literal.name = 'Literal';

    function Literal(value) {
      this.value = value;
      Literal.__super__.constructor.call(this);
    }

    Literal.prototype.makeReturn = function() {
      if (this.isStatement()) {
        return this;
      } else {
        return Literal.__super__.makeReturn.apply(this, arguments);
      }
    };

    Literal.prototype.isAssignable = function() {
      return IDENTIFIER.test(this.value);
    };

    Literal.prototype.isStatement = function() {
      var _ref2;
      return (_ref2 = this.value) === 'break' || _ref2 === 'continue' || _ref2 === 'debugger';
    };

    Literal.prototype.isComplex = NO;

    Literal.prototype.tameIsJump = function() {
      return this.isStatement();
    };

    Literal.prototype.assigns = function(name) {
      return name === this.value;
    };

    Literal.prototype.compileTame = function(o) {
      var call, d, func, l;
      d = {
        'continue': tame["const"].c_while,
        'break': tame["const"].b_while
      };
      l = d[this.value];
      func = new Value(new Literal(l));
      call = new Call(func, []);
      return call.compile(o);
    };

    Literal.prototype.jumps = function(o) {
      if (this.value === 'break' && !((o != null ? o.loop : void 0) || (o != null ? o.block : void 0))) {
        return this;
      }
      if (this.value === 'continue' && !(o != null ? o.loop : void 0)) return this;
    };

    Literal.prototype.compileNode = function(o) {
      var code, _ref2, _ref3;
      code = this.isUndefined ? o.level >= LEVEL_ACCESS ? '(void 0)' : 'void 0' : this.value === 'this' ? ((_ref2 = o.scope.method) != null ? _ref2.bound : void 0) ? o.scope.method.context : this.value : this.value.reserved && ((_ref3 = "" + this.value) !== 'eval' && _ref3 !== 'arguments') ? "\"" + this.value + "\"" : this.tameLoopFlag && this.tameIsJump() ? this.compileTame(o) : this.value;
      if (this.isStatement()) {
        return "" + this.tab + code + ";";
      } else {
        return code;
      }
    };

    Literal.prototype.toString = function() {
      return ' "' + this.value + '"';
    };

    return Literal;

  })(Base);

  exports.Return = Return = (function(_super) {

    __extends(Return, _super);

    Return.name = 'Return';

    function Return(expr, auto) {
      Return.__super__.constructor.call(this);
      this.tameHasAutocbFlag = auto;
      if (expr && !expr.unwrap().isUndefined) this.expression = expr;
    }

    Return.prototype.children = ['expression'];

    Return.prototype.isStatement = YES;

    Return.prototype.makeReturn = THIS;

    Return.prototype.jumps = THIS;

    Return.prototype.compile = function(o, level) {
      var expr, _ref2;
      expr = (_ref2 = this.expression) != null ? _ref2.makeReturn() : void 0;
      if (expr && !(expr instanceof Return)) {
        return expr.compile(o, level);
      } else {
        return Return.__super__.compile.call(this, o, level);
      }
    };

    Return.prototype.compileNode = function(o) {
      var args, block, call, cb, ret;
      if (this.tameHasAutocbFlag) {
        cb = new Value(new Literal(tame["const"].autocb));
        args = this.expression ? [this.expression] : [];
        call = new Call(cb, args);
        ret = new Literal("return");
        block = new Block([call, ret]);
        return block.compile(o);
      } else {
        return this.tab + ("return" + [this.expression ? " " + (this.expression.compile(o, LEVEL_PAREN)) : void 0] + ";");
      }
    };

    return Return;

  })(Base);

  exports.Value = Value = (function(_super) {

    __extends(Value, _super);

    Value.name = 'Value';

    function Value(base, props, tag) {
      Value.__super__.constructor.call(this);
      if (!props && base instanceof Value) return base;
      this.base = base;
      this.properties = props || [];
      if (tag) this[tag] = true;
      return this;
    }

    Value.prototype.children = ['base', 'properties'];

    Value.prototype.copy = function() {
      return new Value(this.base, this.properties);
    };

    Value.prototype.add = function(props) {
      this.properties = this.properties.concat(props);
      return this;
    };

    Value.prototype.hasProperties = function() {
      return !!this.properties.length;
    };

    Value.prototype.isArray = function() {
      return !this.properties.length && this.base instanceof Arr;
    };

    Value.prototype.isComplex = function() {
      return this.hasProperties() || this.base.isComplex();
    };

    Value.prototype.isAssignable = function() {
      return this.hasProperties() || this.base.isAssignable();
    };

    Value.prototype.isSimpleNumber = function() {
      return this.base instanceof Literal && SIMPLENUM.test(this.base.value);
    };

    Value.prototype.isAtomic = function() {
      var node, _i, _len, _ref2;
      _ref2 = this.properties.concat(this.base);
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        node = _ref2[_i];
        if (node.soak || node instanceof Call) return false;
      }
      return true;
    };

    Value.prototype.isStatement = function(o) {
      return !this.properties.length && this.base.isStatement(o);
    };

    Value.prototype.assigns = function(name) {
      return !this.properties.length && this.base.assigns(name);
    };

    Value.prototype.jumps = function(o) {
      return !this.properties.length && this.base.jumps(o);
    };

    Value.prototype.isObject = function(onlyGenerated) {
      if (this.properties.length) return false;
      return (this.base instanceof Obj) && (!onlyGenerated || this.base.generated);
    };

    Value.prototype.isSplice = function() {
      return last(this.properties) instanceof Slice;
    };

    Value.prototype.unwrap = function() {
      if (this.properties.length) {
        return this;
      } else {
        return this.tameUnwrap(this.base);
      }
    };

    Value.prototype.toSlot = function() {
      var sufffix, suffix;
      sufffix = null;
      if (this.properties && this.properties.length) {
        suffix = this.properties.pop();
      }
      return new Slot(this, suffix);
    };

    Value.prototype.cacheReference = function(o) {
      var base, bref, name, nref;
      name = last(this.properties);
      if (this.properties.length < 2 && !this.base.isComplex() && !(name != null ? name.isComplex() : void 0)) {
        return [this, this];
      }
      base = new Value(this.base, this.properties.slice(0, -1));
      if (base.isComplex()) {
        bref = new Literal(o.scope.freeVariable('base'));
        base = new Value(new Parens(new Assign(bref, base)));
      }
      if (!name) return [base, bref];
      if (name.isComplex()) {
        nref = new Literal(o.scope.freeVariable('name'));
        name = new Index(new Assign(nref, name.index));
        nref = new Index(nref);
      }
      return [base.add(name), new Value(bref || base.base, [nref || name])];
    };

    Value.prototype.tameWrapContinuation = YES;

    Value.prototype.tameCpsRotate = function() {
      var nv, p, _i, _len, _ref2, _results;
      if (!this.properties.length) {
        Value.__super__.tameCpsRotate.call(this);
        return;
      }
      if ((nv = this.tameCpsExprRotate(this.base))) this.base = nv;
      _ref2 = this.properties;
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        p = _ref2[_i];
        if ((p.index != null) && this.tameCpsExprRotate(p.index)) {
          _results.push(p.index = v);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Value.prototype.compileNode = function(o) {
      var code, prop, props, _i, _len;
      this.base.front = this.front;
      props = this.properties;
      code = this.base.compile(o, props.length ? LEVEL_ACCESS : null);
      if ((this.base instanceof Parens || props.length) && SIMPLENUM.test(code)) {
        code = "" + code + ".";
      }
      for (_i = 0, _len = props.length; _i < _len; _i++) {
        prop = props[_i];
        code += prop.compile(o);
      }
      return code;
    };

    Value.prototype.unfoldSoak = function(o) {
      var result,
        _this = this;
      if (this.unfoldedSoak != null) return this.unfoldedSoak;
      result = (function() {
        var fst, i, ifn, prop, ref, snd, _i, _len, _ref2;
        if (ifn = _this.base.unfoldSoak(o)) {
          Array.prototype.push.apply(ifn.body.properties, _this.properties);
          return ifn;
        }
        _ref2 = _this.properties;
        for (i = _i = 0, _len = _ref2.length; _i < _len; i = ++_i) {
          prop = _ref2[i];
          if (!prop.soak) continue;
          prop.soak = false;
          fst = new Value(_this.base, _this.properties.slice(0, i));
          snd = new Value(_this.base, _this.properties.slice(i));
          if (fst.isComplex()) {
            ref = new Literal(o.scope.freeVariable('ref'));
            fst = new Parens(new Assign(ref, fst));
            snd.base = ref;
          }
          return new If(new Existence(fst), snd, {
            soak: true
          });
        }
        return null;
      })();
      return this.unfoldedSoak = result || false;
    };

    return Value;

  })(Base);

  exports.Comment = Comment = (function(_super) {

    __extends(Comment, _super);

    Comment.name = 'Comment';

    function Comment(comment) {
      this.comment = comment;
      Comment.__super__.constructor.call(this);
    }

    Comment.prototype.isStatement = YES;

    Comment.prototype.makeReturn = THIS;

    Comment.prototype.compileNode = function(o, level) {
      var code;
      code = '/*' + multident(this.comment, this.tab) + ("\n" + this.tab + "*/");
      if ((level || o.level) === LEVEL_TOP) code = o.indent + code;
      return code;
    };

    return Comment;

  })(Base);

  exports.Call = Call = (function(_super) {

    __extends(Call, _super);

    Call.name = 'Call';

    function Call(variable, args, soak) {
      this.args = args != null ? args : [];
      this.soak = soak;
      Call.__super__.constructor.call(this);
      this.isNew = false;
      this.isSuper = variable === 'super';
      this.variable = this.isSuper ? null : variable;
    }

    Call.prototype.children = ['variable', 'args'];

    Call.prototype.newInstance = function() {
      var base, _ref2;
      base = ((_ref2 = this.variable) != null ? _ref2.base : void 0) || this.variable;
      if (base instanceof Call && !base.isNew) {
        base.newInstance();
      } else {
        this.isNew = true;
      }
      return this;
    };

    Call.prototype.superReference = function(o) {
      var accesses, method, name;
      method = o.scope.method;
      if (!method) throw SyntaxError('cannot call super outside of a function.');
      name = method.name;
      if (name == null) {
        throw SyntaxError('cannot call super on an anonymous function.');
      }
      if (method.klass) {
        accesses = [new Access(new Literal('__super__'))];
        if (method.static) accesses.push(new Access(new Literal('constructor')));
        accesses.push(new Access(new Literal(name)));
        return (new Value(new Literal(method.klass), accesses)).compile(o);
      } else {
        return "" + name + ".__super__.constructor";
      }
    };

    Call.prototype.tameWrapContinuation = YES;

    Call.prototype.tameCpsRotate = function() {
      var a, i, v, _i, _len, _ref2;
      _ref2 = this.args;
      for (i = _i = 0, _len = _ref2.length; _i < _len; i = ++_i) {
        a = _ref2[i];
        if ((v = this.tameCpsExprRotate(a))) this.args[i] = v;
      }
      if (this.variable && (v = this.tameCpsExprRotate(this.variable))) {
        return this.variable = v;
      }
    };

    Call.prototype.unfoldSoak = function(o) {
      var call, ifn, left, list, rite, _i, _len, _ref2, _ref3;
      if (this.soak) {
        if (this.variable) {
          if (ifn = unfoldSoak(o, this, 'variable')) return ifn;
          _ref2 = new Value(this.variable).cacheReference(o), left = _ref2[0], rite = _ref2[1];
        } else {
          left = new Literal(this.superReference(o));
          rite = new Value(left);
        }
        rite = new Call(rite, this.args);
        rite.isNew = this.isNew;
        left = new Literal("typeof " + (left.compile(o)) + " === \"function\"");
        return new If(left, new Value(rite), {
          soak: true
        });
      }
      call = this;
      list = [];
      while (true) {
        if (call.variable instanceof Call) {
          list.push(call);
          call = call.variable;
          continue;
        }
        if (!(call.variable instanceof Value)) break;
        list.push(call);
        if (!((call = call.variable.base) instanceof Call)) break;
      }
      _ref3 = list.reverse();
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        call = _ref3[_i];
        if (ifn) {
          if (call.variable instanceof Call) {
            call.variable = ifn;
          } else {
            call.variable.base = ifn;
          }
        }
        ifn = unfoldSoak(o, call, 'variable');
      }
      return ifn;
    };

    Call.prototype.filterImplicitObjects = function(list) {
      var node, nodes, obj, prop, properties, _i, _j, _len, _len2, _ref2;
      nodes = [];
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        node = list[_i];
        if (!((typeof node.isObject === "function" ? node.isObject() : void 0) && node.base.generated)) {
          nodes.push(node);
          continue;
        }
        obj = null;
        _ref2 = node.base.properties;
        for (_j = 0, _len2 = _ref2.length; _j < _len2; _j++) {
          prop = _ref2[_j];
          if (prop instanceof Assign || prop instanceof Comment) {
            if (!obj) nodes.push(obj = new Obj(properties = [], true));
            properties.push(prop);
          } else {
            nodes.push(prop);
            obj = null;
          }
        }
      }
      return nodes;
    };

    Call.prototype.compileNode = function(o) {
      var arg, args, code, _ref2;
      if ((_ref2 = this.variable) != null) _ref2.front = this.front;
      if (code = Splat.compileSplattedArray(o, this.args, true)) {
        return this.compileSplat(o, code);
      }
      args = this.filterImplicitObjects(this.args);
      args = ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = args.length; _i < _len; _i++) {
          arg = args[_i];
          _results.push(arg.compile(o, LEVEL_LIST));
        }
        return _results;
      })()).join(', ');
      if (this.isSuper) {
        return this.superReference(o) + (".call(this" + (args && ', ' + args) + ")");
      } else {
        return (this.isNew ? 'new ' : '') + this.variable.compile(o, LEVEL_ACCESS) + ("(" + args + ")");
      }
    };

    Call.prototype.compileSuper = function(args, o) {
      return "" + (this.superReference(o)) + ".call(this" + (args.length ? ', ' : '') + args + ")";
    };

    Call.prototype.compileSplat = function(o, splatArgs) {
      var base, fun, idt, name, ref;
      if (this.isSuper) {
        return "" + (this.superReference(o)) + ".apply(this, " + splatArgs + ")";
      }
      if (this.isNew) {
        idt = this.tab + TAB;
        return "(function(func, args, ctor) {\n" + idt + "ctor.prototype = func.prototype;\n" + idt + "var child = new ctor, result = func.apply(child, args);\n" + idt + "return typeof result === \"object\" ? result : child;\n" + this.tab + "})(" + (this.variable.compile(o, LEVEL_LIST)) + ", " + splatArgs + ", function() {})";
      }
      base = new Value(this.variable);
      if ((name = base.properties.pop()) && base.isComplex()) {
        ref = o.scope.freeVariable('ref');
        fun = "(" + ref + " = " + (base.compile(o, LEVEL_LIST)) + ")" + (name.compile(o));
      } else {
        fun = base.compile(o, LEVEL_ACCESS);
        if (SIMPLENUM.test(fun)) fun = "(" + fun + ")";
        if (name) {
          ref = fun;
          fun += name.compile(o);
        } else {
          ref = 'null';
        }
      }
      return "" + fun + ".apply(" + ref + ", " + splatArgs + ")";
    };

    return Call;

  })(Base);

  exports.Extends = Extends = (function(_super) {

    __extends(Extends, _super);

    Extends.name = 'Extends';

    function Extends(child, parent) {
      this.child = child;
      this.parent = parent;
      Extends.__super__.constructor.call(this);
    }

    Extends.prototype.children = ['child', 'parent'];

    Extends.prototype.compile = function(o) {
      return new Call(new Value(new Literal(utility('extends'))), [this.child, this.parent]).compile(o);
    };

    return Extends;

  })(Base);

  exports.Access = Access = (function(_super) {

    __extends(Access, _super);

    Access.name = 'Access';

    function Access(name, tag) {
      this.name = name;
      Access.__super__.constructor.call(this);
      this.name.asKey = true;
      this.soak = tag === 'soak';
    }

    Access.prototype.children = ['name'];

    Access.prototype.compile = function(o) {
      var name;
      name = this.name.compile(o);
      if ((IDENTIFIER.test(name)) || (this.name instanceof Defer)) {
        return "." + name;
      } else {
        return "[" + name + "]";
      }
    };

    Access.prototype.isComplex = NO;

    return Access;

  })(Base);

  exports.Index = Index = (function(_super) {

    __extends(Index, _super);

    Index.name = 'Index';

    function Index(index) {
      this.index = index;
      Index.__super__.constructor.call(this);
    }

    Index.prototype.children = ['index'];

    Index.prototype.compile = function(o) {
      return "[" + (this.index.compile(o, LEVEL_PAREN)) + "]";
    };

    Index.prototype.isComplex = function() {
      return this.index.isComplex();
    };

    return Index;

  })(Base);

  exports.Range = Range = (function(_super) {

    __extends(Range, _super);

    Range.name = 'Range';

    Range.prototype.children = ['from', 'to'];

    function Range(from, to, tag) {
      this.from = from;
      this.to = to;
      Range.__super__.constructor.call(this);
      this.exclusive = tag === 'exclusive';
      this.equals = this.exclusive ? '' : '=';
    }

    Range.prototype.compileVariables = function(o) {
      var step, _ref2, _ref3, _ref4, _ref5;
      o = merge(o, {
        top: true
      });
      _ref2 = this.from.cache(o, LEVEL_LIST), this.fromC = _ref2[0], this.fromVar = _ref2[1];
      _ref3 = this.to.cache(o, LEVEL_LIST), this.toC = _ref3[0], this.toVar = _ref3[1];
      if (step = del(o, 'step')) {
        _ref4 = step.cache(o, LEVEL_LIST), this.step = _ref4[0], this.stepVar = _ref4[1];
      }
      _ref5 = [this.fromVar.match(SIMPLENUM), this.toVar.match(SIMPLENUM)], this.fromNum = _ref5[0], this.toNum = _ref5[1];
      if (this.stepVar) return this.stepNum = this.stepVar.match(SIMPLENUM);
    };

    Range.prototype.compileNode = function(o) {
      var cond, condPart, from, gt, idx, idxName, known, lt, namedIndex, stepPart, to, varPart, _ref2, _ref3;
      if (!this.fromVar) this.compileVariables(o);
      if (!o.index) return this.compileArray(o);
      known = this.fromNum && this.toNum;
      idx = del(o, 'index');
      idxName = del(o, 'name');
      namedIndex = idxName && idxName !== idx;
      varPart = "" + idx + " = " + this.fromC;
      if (this.toC !== this.toVar) varPart += ", " + this.toC;
      if (this.step !== this.stepVar) varPart += ", " + this.step;
      _ref2 = ["" + idx + " <" + this.equals, "" + idx + " >" + this.equals], lt = _ref2[0], gt = _ref2[1];
      condPart = this.stepNum ? +this.stepNum > 0 ? "" + lt + " " + this.toVar : "" + gt + " " + this.toVar : known ? ((_ref3 = [+this.fromNum, +this.toNum], from = _ref3[0], to = _ref3[1], _ref3), from <= to ? "" + lt + " " + to : "" + gt + " " + to) : (cond = "" + this.fromVar + " <= " + this.toVar, "" + cond + " ? " + lt + " " + this.toVar + " : " + gt + " " + this.toVar);
      stepPart = this.stepVar ? "" + idx + " += " + this.stepVar : known ? namedIndex ? from <= to ? "++" + idx : "--" + idx : from <= to ? "" + idx + "++" : "" + idx + "--" : namedIndex ? "" + cond + " ? ++" + idx + " : --" + idx : "" + cond + " ? " + idx + "++ : " + idx + "--";
      if (namedIndex) varPart = "" + idxName + " = " + varPart;
      if (namedIndex) stepPart = "" + idxName + " = " + stepPart;
      return "" + varPart + "; " + condPart + "; " + stepPart;
    };

    Range.prototype.compileArray = function(o) {
      var args, body, cond, hasArgs, i, idt, post, pre, range, result, vars, _i, _ref2, _ref3, _results;
      if (this.fromNum && this.toNum && Math.abs(this.fromNum - this.toNum) <= 20) {
        range = (function() {
          _results = [];
          for (var _i = _ref2 = +this.fromNum, _ref3 = +this.toNum; _ref2 <= _ref3 ? _i <= _ref3 : _i >= _ref3; _ref2 <= _ref3 ? _i++ : _i--){ _results.push(_i); }
          return _results;
        }).apply(this);
        if (this.exclusive) range.pop();
        return "[" + (range.join(', ')) + "]";
      }
      idt = this.tab + TAB;
      i = o.scope.freeVariable('i');
      result = o.scope.freeVariable('results');
      pre = "\n" + idt + result + " = [];";
      if (this.fromNum && this.toNum) {
        o.index = i;
        body = this.compileNode(o);
      } else {
        vars = ("" + i + " = " + this.fromC) + (this.toC !== this.toVar ? ", " + this.toC : '');
        cond = "" + this.fromVar + " <= " + this.toVar;
        body = "var " + vars + "; " + cond + " ? " + i + " <" + this.equals + " " + this.toVar + " : " + i + " >" + this.equals + " " + this.toVar + "; " + cond + " ? " + i + "++ : " + i + "--";
      }
      post = "{ " + result + ".push(" + i + "); }\n" + idt + "return " + result + ";\n" + o.indent;
      hasArgs = function(node) {
        return node != null ? node.contains(function(n) {
          return n instanceof Literal && n.value === 'arguments' && !n.asKey;
        }) : void 0;
      };
      if (hasArgs(this.from) || hasArgs(this.to)) args = ', arguments';
      return "(function() {" + pre + "\n" + idt + "for (" + body + ")" + post + "}).apply(this" + (args != null ? args : '') + ")";
    };

    return Range;

  })(Base);

  exports.Slice = Slice = (function(_super) {

    __extends(Slice, _super);

    Slice.name = 'Slice';

    Slice.prototype.children = ['range'];

    function Slice(range) {
      this.range = range;
      Slice.__super__.constructor.call(this);
    }

    Slice.prototype.compileNode = function(o) {
      var compiled, from, fromStr, to, toStr, _ref2;
      _ref2 = this.range, to = _ref2.to, from = _ref2.from;
      fromStr = from && from.compile(o, LEVEL_PAREN) || '0';
      compiled = to && to.compile(o, LEVEL_ACCESS);
      if (to && !(!this.range.exclusive && +compiled === -1)) {
        toStr = ', ' + (this.range.exclusive ? compiled : SIMPLENUM.test(compiled) ? (+compiled + 1).toString() : "" + compiled + " + 1 || 9e9");
      }
      return ".slice(" + fromStr + (toStr || '') + ")";
    };

    return Slice;

  })(Base);

  exports.Obj = Obj = (function(_super) {

    __extends(Obj, _super);

    Obj.name = 'Obj';

    function Obj(props, generated) {
      this.generated = generated != null ? generated : false;
      Obj.__super__.constructor.call(this);
      this.objects = this.properties = props || [];
    }

    Obj.prototype.children = ['properties'];

    Obj.prototype.tameWrapContinuation = YES;

    Obj.prototype.tameCpsRotate = function() {
      var prop, v, _i, _len, _ref2, _results;
      _ref2 = this.properties;
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        prop = _ref2[_i];
        if (prop instanceof Assign) {
          if ((v = this.tameCpsExprRotate(prop.value))) {
            _results.push(prop.value = v);
          } else {
            _results.push(void 0);
          }
        }
      }
      return _results;
    };

    Obj.prototype.compileNode = function(o) {
      var i, idt, indent, join, lastNoncom, node, obj, prop, props, _i, _len;
      props = this.properties;
      if (!props.length) return (this.front ? '({})' : '{}');
      if (this.generated) {
        for (_i = 0, _len = props.length; _i < _len; _i++) {
          node = props[_i];
          if (node instanceof Value) {
            throw new Error('cannot have an implicit value in an implicit object');
          }
        }
      }
      idt = o.indent += TAB;
      lastNoncom = this.lastNonComment(this.properties);
      props = (function() {
        var _j, _len2, _results;
        _results = [];
        for (i = _j = 0, _len2 = props.length; _j < _len2; i = ++_j) {
          prop = props[i];
          join = i === props.length - 1 ? '' : prop === lastNoncom || prop instanceof Comment ? '\n' : ',\n';
          indent = prop instanceof Comment ? '' : idt;
          if (prop instanceof Value && prop["this"]) {
            prop = new Assign(prop.properties[0].name, prop, 'object');
          }
          if (!(prop instanceof Comment)) {
            if (!(prop instanceof Assign)) prop = new Assign(prop, prop, 'object');
            (prop.variable.base || prop.variable).asKey = true;
          }
          _results.push(indent + prop.compile(o, LEVEL_TOP) + join);
        }
        return _results;
      })();
      props = props.join('');
      obj = "{" + (props && '\n' + props + '\n' + this.tab) + "}";
      if (this.front) {
        return "(" + obj + ")";
      } else {
        return obj;
      }
    };

    Obj.prototype.assigns = function(name) {
      var prop, _i, _len, _ref2;
      _ref2 = this.properties;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        prop = _ref2[_i];
        if (prop.assigns(name)) return true;
      }
      return false;
    };

    return Obj;

  })(Base);

  exports.Arr = Arr = (function(_super) {

    __extends(Arr, _super);

    Arr.name = 'Arr';

    function Arr(objs) {
      Arr.__super__.constructor.call(this);
      this.objects = objs || [];
    }

    Arr.prototype.children = ['objects'];

    Arr.prototype.filterImplicitObjects = Call.prototype.filterImplicitObjects;

    Arr.prototype.tameWrapContinuation = YES;

    Arr.prototype.tameCpsRotate = function() {
      var i, o, v, _i, _len, _ref2, _results;
      _ref2 = this.objects;
      _results = [];
      for (i = _i = 0, _len = _ref2.length; _i < _len; i = ++_i) {
        o = _ref2[i];
        if ((v = this.tameCpsExprRotate(o))) {
          _results.push(this.objects[i] = v);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Arr.prototype.compileNode = function(o) {
      var code, obj, objs;
      if (!this.objects.length) return '[]';
      o.indent += TAB;
      objs = this.filterImplicitObjects(this.objects);
      if (code = Splat.compileSplattedArray(o, objs)) return code;
      code = ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = objs.length; _i < _len; _i++) {
          obj = objs[_i];
          _results.push(obj.compile(o, LEVEL_LIST));
        }
        return _results;
      })()).join(', ');
      if (code.indexOf('\n') >= 0) {
        return "[\n" + o.indent + code + "\n" + this.tab + "]";
      } else {
        return "[" + code + "]";
      }
    };

    Arr.prototype.assigns = function(name) {
      var obj, _i, _len, _ref2;
      _ref2 = this.objects;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        obj = _ref2[_i];
        if (obj.assigns(name)) return true;
      }
      return false;
    };

    return Arr;

  })(Base);

  exports.Class = Class = (function(_super) {

    __extends(Class, _super);

    Class.name = 'Class';

    function Class(variable, parent, body) {
      this.variable = variable;
      this.parent = parent;
      this.body = body != null ? body : new Block;
      Class.__super__.constructor.call(this);
      this.boundFuncs = [];
      this.body.classBody = true;
    }

    Class.prototype.children = ['variable', 'parent', 'body'];

    Class.prototype.determineName = function() {
      var decl, tail;
      if (!this.variable) return null;
      decl = (tail = last(this.variable.properties)) ? tail instanceof Access && tail.name.value : this.variable.base.value;
      return decl && (decl = IDENTIFIER.test(decl) && decl);
    };

    Class.prototype.setContext = function(name) {
      return this.body.traverseChildren(false, function(node) {
        if (node.classBody) return false;
        if (node instanceof Literal && node.value === 'this') {
          return node.value = name;
        } else if (node instanceof Code) {
          node.klass = name;
          if (node.bound) return node.context = name;
        }
      });
    };

    Class.prototype.addBoundFunctions = function(o) {
      var bvar, lhs, _i, _len, _ref2, _results;
      if (this.boundFuncs.length) {
        _ref2 = this.boundFuncs;
        _results = [];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          bvar = _ref2[_i];
          lhs = (new Value(new Literal("this"), [new Access(bvar)])).compile(o);
          _results.push(this.ctor.body.unshift(new Literal("" + lhs + " = " + (utility('bind')) + "(" + lhs + ", this)")));
        }
        return _results;
      }
    };

    Class.prototype.addProperties = function(node, name, o) {
      var assign, base, exprs, func, props;
      props = node.base.properties.slice(0);
      exprs = (function() {
        var _results;
        _results = [];
        while (assign = props.shift()) {
          if (assign instanceof Assign) {
            base = assign.variable.base;
            delete assign.context;
            func = assign.value;
            if (base.value === 'constructor') {
              if (this.ctor) {
                throw new Error('cannot define more than one constructor in a class');
              }
              if (func.bound) {
                throw new Error('cannot define a constructor as a bound function');
              }
              if (func instanceof Code) {
                assign = this.ctor = func;
              } else {
                this.externalCtor = o.scope.freeVariable('class');
                assign = new Assign(new Literal(this.externalCtor), func);
              }
            } else {
              if (assign.variable["this"]) {
                func.static = true;
                if (func.bound) func.context = name;
              } else {
                assign.variable = new Value(new Literal(name), [new Access(new Literal('prototype')), new Access(base)]);
                if (func instanceof Code && func.bound) {
                  this.boundFuncs.push(base);
                  func.bound = false;
                }
              }
            }
          }
          _results.push(assign);
        }
        return _results;
      }).call(this);
      return compact(exprs);
    };

    Class.prototype.walkBody = function(name, o) {
      var _this = this;
      return this.traverseChildren(false, function(child) {
        var exps, i, node, _i, _len, _ref2;
        if (child instanceof Class) return false;
        if (child instanceof Block) {
          _ref2 = exps = child.expressions;
          for (i = _i = 0, _len = _ref2.length; _i < _len; i = ++_i) {
            node = _ref2[i];
            if (node instanceof Value && node.isObject(true)) {
              exps[i] = _this.addProperties(node, name, o);
            }
          }
          return child.expressions = exps = flatten(exps);
        }
      });
    };

    Class.prototype.ensureConstructor = function(name) {
      if (!this.ctor) {
        this.ctor = new Code;
        if (this.parent) {
          this.ctor.body.push(new Literal("" + name + ".__super__.constructor.apply(this, arguments)"));
        }
        if (this.externalCtor) {
          this.ctor.body.push(new Literal("" + this.externalCtor + ".apply(this, arguments)"));
        }
        this.ctor.body.makeReturn();
        this.body.expressions.unshift(this.ctor);
      }
      this.ctor.ctor = this.ctor.name = name;
      this.ctor.klass = null;
      return this.ctor.noReturn = true;
    };

    Class.prototype.compileNode = function(o) {
      var call, decl, klass, lname, name, params;
      decl = this.determineName();
      name = decl || '_Class';
      if (name.reserved) name = "_" + name;
      lname = new Literal(name);
      this.setContext(name);
      this.walkBody(name, o);
      this.ensureConstructor(name);
      this.body.spaced = true;
      if (!(this.ctor instanceof Code)) this.body.expressions.unshift(this.ctor);
      if (decl) {
        this.body.expressions.unshift(new Assign(new Value(new Literal(name), [new Access(new Literal('name'))]), new Literal("'" + name + "'")));
      }
      this.body.expressions.push(lname);
      this.addBoundFunctions(o);
      call = Closure.wrap(this.body);
      if (this.parent) {
        this.superClass = new Literal(o.scope.freeVariable('super', false));
        this.body.expressions.unshift(new Extends(lname, this.superClass));
        call.args.push(this.parent);
        params = call.variable.params || call.variable.base.params;
        params.push(new Param(this.superClass));
      }
      klass = new Parens(call, true);
      if (this.variable) klass = new Assign(this.variable, klass);
      return klass.compile(o);
    };

    return Class;

  })(Base);

  exports.Assign = Assign = (function(_super) {

    __extends(Assign, _super);

    Assign.name = 'Assign';

    function Assign(variable, value, context, options) {
      this.variable = variable;
      this.value = value;
      this.context = context;
      Assign.__super__.constructor.call(this);
      this.param = options && options.param;
      this.subpattern = options && options.subpattern;
      this.tamelocal = options && options.tamelocal;
    }

    Assign.prototype.children = ['variable', 'value'];

    Assign.prototype.isStatement = function(o) {
      return (o != null ? o.level : void 0) === LEVEL_TOP && (this.context != null) && __indexOf.call(this.context, "?") >= 0;
    };

    Assign.prototype.assigns = function(name) {
      return this[this.context === 'object' ? 'value' : 'variable'].assigns(name);
    };

    Assign.prototype.unfoldSoak = function(o) {
      return unfoldSoak(o, this, 'variable');
    };

    Assign.prototype.tameCpsRotate = function() {
      var nv;
      if ((nv = this.tameCpsExprRotate(this.value))) return this.value = nv;
    };

    Assign.prototype.compileNode = function(o) {
      var isValue, match, name, val, varBase, _ref2, _ref3, _ref4, _ref5;
      if (isValue = this.variable instanceof Value) {
        if (this.variable.isArray() || this.variable.isObject()) {
          return this.compilePatternMatch(o);
        }
        if (this.variable.isSplice()) return this.compileSplice(o);
        if ((_ref2 = this.context) === '||=' || _ref2 === '&&=' || _ref2 === '?=') {
          return this.compileConditional(o);
        }
      }
      name = this.variable.compile(o, LEVEL_LIST);
      if (!this.context) {
        if (!(varBase = this.variable.unwrapAll()).isAssignable()) {
          throw SyntaxError("\"" + (this.variable.compile(o)) + "\" cannot be assigned.");
        }
        if (!(typeof varBase.hasProperties === "function" ? varBase.hasProperties() : void 0)) {
          if (this.param || this.tamelocal) {
            o.scope.add(name, 'var', this.tamelocal);
          } else {
            o.scope.find(name);
          }
        }
      }
      if (this.value instanceof Code && (match = METHOD_DEF.exec(name))) {
        if (match[1]) this.value.klass = match[1];
        this.value.name = (_ref3 = (_ref4 = (_ref5 = match[2]) != null ? _ref5 : match[3]) != null ? _ref4 : match[4]) != null ? _ref3 : match[5];
      }
      val = this.value.compile(o, LEVEL_LIST);
      if (this.context === 'object') return "" + name + ": " + val;
      val = name + (" " + (this.context || '=') + " ") + val;
      if (o.level <= LEVEL_LIST) {
        return val;
      } else {
        return "(" + val + ")";
      }
    };

    Assign.prototype.compilePatternMatch = function(o) {
      var acc, assigns, code, i, idx, isObject, ivar, name, obj, objects, olen, ref, rest, splat, top, val, value, vvar, _i, _len, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8;
      top = o.level === LEVEL_TOP;
      value = this.value;
      objects = this.variable.base.objects;
      if (!(olen = objects.length)) {
        code = value.compile(o);
        if (o.level >= LEVEL_OP) {
          return "(" + code + ")";
        } else {
          return code;
        }
      }
      isObject = this.variable.isObject();
      if (top && olen === 1 && !((obj = objects[0]) instanceof Splat)) {
        if (obj instanceof Assign) {
          _ref2 = obj, (_ref3 = _ref2.variable, idx = _ref3.base), obj = _ref2.value;
        } else {
          if (obj.base instanceof Parens) {
            _ref4 = new Value(obj.unwrapAll()).cacheReference(o), obj = _ref4[0], idx = _ref4[1];
          } else {
            idx = isObject ? obj["this"] ? obj.properties[0].name : obj : new Literal(0);
          }
        }
        acc = IDENTIFIER.test(idx.unwrap().value || 0);
        value = new Value(value);
        value.properties.push(new (acc ? Access : Index)(idx));
        if (_ref5 = obj.unwrap().value, __indexOf.call(['arguments', 'eval'].concat(RESERVED), _ref5) >= 0) {
          throw new SyntaxError("assignment to a reserved word: " + (obj.compile(o)) + " = " + (value.compile(o)));
        }
        return new Assign(obj, value, null, {
          param: this.param
        }).compile(o, LEVEL_TOP);
      }
      vvar = value.compile(o, LEVEL_LIST);
      assigns = [];
      splat = false;
      if (!IDENTIFIER.test(vvar) || this.variable.assigns(vvar)) {
        assigns.push("" + (ref = o.scope.freeVariable('ref')) + " = " + vvar);
        vvar = ref;
      }
      for (i = _i = 0, _len = objects.length; _i < _len; i = ++_i) {
        obj = objects[i];
        idx = i;
        if (isObject) {
          if (obj instanceof Assign) {
            _ref6 = obj, (_ref7 = _ref6.variable, idx = _ref7.base), obj = _ref6.value;
          } else {
            if (obj.base instanceof Parens) {
              _ref8 = new Value(obj.unwrapAll()).cacheReference(o), obj = _ref8[0], idx = _ref8[1];
            } else {
              idx = obj["this"] ? obj.properties[0].name : obj;
            }
          }
        }
        if (!splat && obj instanceof Splat) {
          name = obj.name.unwrap().value;
          obj = obj.unwrap();
          val = "" + olen + " <= " + vvar + ".length ? " + (utility('slice')) + ".call(" + vvar + ", " + i;
          if (rest = olen - i - 1) {
            ivar = o.scope.freeVariable('i');
            val += ", " + ivar + " = " + vvar + ".length - " + rest + ") : (" + ivar + " = " + i + ", [])";
          } else {
            val += ") : []";
          }
          val = new Literal(val);
          splat = "" + ivar + "++";
        } else {
          name = obj.unwrap().value;
          if (obj instanceof Splat) {
            obj = obj.name.compile(o);
            throw new SyntaxError("multiple splats are disallowed in an assignment: " + obj + "...");
          }
          if (typeof idx === 'number') {
            idx = new Literal(splat || idx);
            acc = false;
          } else {
            acc = isObject && IDENTIFIER.test(idx.unwrap().value || 0);
          }
          val = new Value(new Literal(vvar), [new (acc ? Access : Index)(idx)]);
        }
        if ((name != null) && __indexOf.call(['arguments', 'eval'].concat(RESERVED), name) >= 0) {
          throw new SyntaxError("assignment to a reserved word: " + (obj.compile(o)) + " = " + (val.compile(o)));
        }
        assigns.push(new Assign(obj, val, null, {
          param: this.param,
          subpattern: true
        }).compile(o, LEVEL_LIST));
      }
      if (!(top || this.subpattern)) assigns.push(vvar);
      code = assigns.join(', ');
      if (o.level < LEVEL_LIST) {
        return code;
      } else {
        return "(" + code + ")";
      }
    };

    Assign.prototype.compileConditional = function(o) {
      var left, rite, _ref2;
      _ref2 = this.variable.cacheReference(o), left = _ref2[0], rite = _ref2[1];
      if (__indexOf.call(this.context, "?") >= 0) o.isExistentialEquals = true;
      return new Op(this.context.slice(0, -1), left, new Assign(rite, this.value, '=')).compile(o);
    };

    Assign.prototype.compileSplice = function(o) {
      var code, exclusive, from, fromDecl, fromRef, name, to, valDef, valRef, _ref2, _ref3, _ref4;
      _ref2 = this.variable.properties.pop().range, from = _ref2.from, to = _ref2.to, exclusive = _ref2.exclusive;
      name = this.variable.compile(o);
      _ref3 = (from != null ? from.cache(o, LEVEL_OP) : void 0) || ['0', '0'], fromDecl = _ref3[0], fromRef = _ref3[1];
      if (to) {
        if ((from != null ? from.isSimpleNumber() : void 0) && to.isSimpleNumber()) {
          to = +to.compile(o) - +fromRef;
          if (!exclusive) to += 1;
        } else {
          to = to.compile(o, LEVEL_ACCESS) + ' - ' + fromRef;
          if (!exclusive) to += ' + 1';
        }
      } else {
        to = "9e9";
      }
      _ref4 = this.value.cache(o, LEVEL_LIST), valDef = _ref4[0], valRef = _ref4[1];
      code = "[].splice.apply(" + name + ", [" + fromDecl + ", " + to + "].concat(" + valDef + ")), " + valRef;
      if (o.level > LEVEL_TOP) {
        return "(" + code + ")";
      } else {
        return code;
      }
    };

    return Assign;

  })(Base);

  exports.Code = Code = (function(_super) {

    __extends(Code, _super);

    Code.name = 'Code';

    function Code(params, body, tag) {
      Code.__super__.constructor.call(this);
      this.params = params || [];
      this.body = body || new Block;
      this.tamegen = tag === 'tamegen';
      this.bound = tag === 'boundfunc' || this.tamegen;
      if (this.bound || this.tamegen) this.context = '_this';
    }

    Code.prototype.children = ['params', 'body'];

    Code.prototype.isStatement = function() {
      return !!this.ctor;
    };

    Code.prototype.jumps = NO;

    Code.prototype.compileNode = function(o) {
      var code, exprs, i, idt, k_id, lit, p, param, ref, rhs, splats, v, val, vars, wasEmpty, _i, _j, _k, _l, _len, _len2, _len3, _len4, _ref2, _ref3, _ref4, _ref5, _ref6;
      o.scope = new Scope(o.scope, this.body, this);
      o.scope.shared = del(o, 'sharedScope') || this.tamegen;
      o.indent += TAB;
      delete o.bare;
      vars = [];
      exprs = [];
      _ref2 = this.params;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        param = _ref2[_i];
        if (!param.splat) continue;
        _ref3 = this.params;
        for (_j = 0, _len2 = _ref3.length; _j < _len2; _j++) {
          p = _ref3[_j];
          if (p.name.value) o.scope.add(p.name.value, 'var', true);
        }
        splats = new Assign(new Value(new Arr((function() {
          var _k, _len3, _ref4, _results;
          _ref4 = this.params;
          _results = [];
          for (_k = 0, _len3 = _ref4.length; _k < _len3; _k++) {
            p = _ref4[_k];
            _results.push(p.asReference(o));
          }
          return _results;
        }).call(this))), new Value(new Literal('arguments')));
        break;
      }
      _ref4 = this.params;
      for (_k = 0, _len3 = _ref4.length; _k < _len3; _k++) {
        param = _ref4[_k];
        if (param.isComplex()) {
          val = ref = param.asReference(o);
          if (param.value) val = new Op('?', ref, param.value);
          exprs.push(new Assign(new Value(param.name), val, '=', {
            param: true
          }));
        } else {
          ref = param;
          if (param.value) {
            lit = new Literal(ref.name.value + ' == null');
            val = new Assign(new Value(param.name), param.value, '=');
            exprs.push(new If(lit, val));
          }
        }
        if (!splats) vars.push(ref);
      }
      wasEmpty = this.body.isEmpty();
      if (splats) exprs.unshift(splats);
      if (exprs.length) {
        (_ref5 = this.body.expressions).unshift.apply(_ref5, exprs);
      }
      if (!splats) {
        for (i = _l = 0, _len4 = vars.length; _l < _len4; i = ++_l) {
          v = vars[i];
          o.scope.parameter(vars[i] = v.compile(o));
        }
      }
      if (this.tameHasAutocbFlag) wasEmpty = false;
      if (!(wasEmpty || this.noReturn)) this.body.makeReturn();
      if (this.bound) {
        if ((_ref6 = o.scope.parent.method) != null ? _ref6.bound : void 0) {
          this.bound = this.context = o.scope.parent.method.context;
        } else if (!this.static) {
          o.scope.parent.assign('_this', 'this');
        }
      }
      idt = o.indent;
      code = 'function';
      if (this.ctor) code += ' ' + this.name;
      code += '(' + vars.join(', ') + ') {';
      if (!this.tamegen && this.tameNodeFlag && this.tameHasAutocbFlag) {
        rhs = new Value(new Literal(tame["const"].autocb));
        k_id = new Value(new Literal(tame["const"].k));
        this.body.unshift(new Assign(k_id, rhs, null, {
          param: true
        }));
      }
      if (!this.body.isEmpty()) {
        code += "\n" + (this.body.compileWithDeclarations(o)) + "\n" + this.tab;
      }
      code += '}';
      if (this.ctor) return this.tab + code;
      if (this.front || (o.level >= LEVEL_ACCESS)) {
        return "(" + code + ")";
      } else {
        return code;
      }
    };

    Code.prototype.traverseChildren = function(crossScope, func) {
      if (crossScope) {
        return Code.__super__.traverseChildren.call(this, crossScope, func);
      }
    };

    Code.prototype.tameWalkAst = function(parent, o) {
      var fa_prev, param, _i, _len, _ref2;
      this.tameParentAwait = parent;
      fa_prev = o.foundAutocb;
      o.foundAutocb = false;
      _ref2 = this.params;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        param = _ref2[_i];
        if (param.name instanceof Literal && param.name.value === tame["const"].autocb) {
          o.foundAutocb = true;
          break;
        }
      }
      this.tameHasAutocbFlag = o.foundAutocb;
      Code.__super__.tameWalkAst.call(this, parent, o);
      o.foundAutocb = fa_prev;
      return false;
    };

    Code.prototype.tameWalkAstLoops = function(flood) {
      if (Code.__super__.tameWalkAstLoops.call(this, false)) {
        this.tameLoopFlag = true;
      }
      return false;
    };

    Code.prototype.tameWalkCpsPivots = function() {
      Code.__super__.tameWalkCpsPivots.call(this);
      return this.tameCpsPivotFlag = false;
    };

    return Code;

  })(Base);

  exports.Param = Param = (function(_super) {

    __extends(Param, _super);

    Param.name = 'Param';

    function Param(name, value, splat) {
      this.name = name;
      this.value = value;
      this.splat = splat;
      Param.__super__.constructor.call(this);
    }

    Param.prototype.children = ['name', 'value'];

    Param.prototype.compile = function(o) {
      return this.name.compile(o, LEVEL_LIST);
    };

    Param.prototype.asReference = function(o) {
      var node;
      if (this.reference) return this.reference;
      node = this.name;
      if (node["this"]) {
        node = node.properties[0].name;
        if (node.value.reserved) node = new Literal('_' + node.value);
      } else if (node.isComplex()) {
        node = new Literal(o.scope.freeVariable('arg'));
      }
      node = new Value(node);
      if (this.splat) node = new Splat(node);
      return this.reference = node;
    };

    Param.prototype.isComplex = function() {
      return this.name.isComplex();
    };

    return Param;

  })(Base);

  exports.Splat = Splat = (function(_super) {

    __extends(Splat, _super);

    Splat.name = 'Splat';

    Splat.prototype.children = ['name'];

    Splat.prototype.isAssignable = YES;

    function Splat(name) {
      Splat.__super__.constructor.call(this);
      this.name = name.compile ? name : new Literal(name);
    }

    Splat.prototype.assigns = function(name) {
      return this.name.assigns(name);
    };

    Splat.prototype.compile = function(o) {
      if (this.index != null) {
        return this.compileParam(o);
      } else {
        return this.name.compile(o);
      }
    };

    Splat.prototype.unwrap = function() {
      return this.name;
    };

    Splat.prototype.toSlot = function() {
      return new Slot(new Value(this.name), null, true);
    };

    Splat.compileSplattedArray = function(o, list, apply) {
      var args, base, code, i, index, node, _i, _len;
      index = -1;
      while ((node = list[++index]) && !(node instanceof Splat)) {
        continue;
      }
      if (index >= list.length) return '';
      if (list.length === 1) {
        code = list[0].compile(o, LEVEL_LIST);
        if (apply) return code;
        return "" + (utility('slice')) + ".call(" + code + ")";
      }
      args = list.slice(index);
      for (i = _i = 0, _len = args.length; _i < _len; i = ++_i) {
        node = args[i];
        code = node.compile(o, LEVEL_LIST);
        args[i] = node instanceof Splat ? "" + (utility('slice')) + ".call(" + code + ")" : "[" + code + "]";
      }
      if (index === 0) {
        return args[0] + (".concat(" + (args.slice(1).join(', ')) + ")");
      }
      base = (function() {
        var _j, _len2, _ref2, _results;
        _ref2 = list.slice(0, index);
        _results = [];
        for (_j = 0, _len2 = _ref2.length; _j < _len2; _j++) {
          node = _ref2[_j];
          _results.push(node.compile(o, LEVEL_LIST));
        }
        return _results;
      })();
      return "[" + (base.join(', ')) + "].concat(" + (args.join(', ')) + ")";
    };

    return Splat;

  })(Base);

  exports.While = While = (function(_super) {

    __extends(While, _super);

    While.name = 'While';

    function While(condition, options) {
      While.__super__.constructor.call(this);
      this.condition = (options != null ? options.invert : void 0) ? condition.invert() : condition;
      this.guard = options != null ? options.guard : void 0;
    }

    While.prototype.children = ['condition', 'guard', 'body'];

    While.prototype.isStatement = YES;

    While.prototype.isLoop = YES;

    While.prototype.makeReturn = function(res) {
      if (res) {
        return While.__super__.makeReturn.apply(this, arguments);
      } else {
        this.returns = !this.jumps({
          loop: true
        });
        return this;
      }
    };

    While.prototype.addBody = function(body) {
      this.body = body;
      return this;
    };

    While.prototype.jumps = function() {
      var expressions, node, _i, _len;
      expressions = this.body.expressions;
      if (!expressions.length) return false;
      for (_i = 0, _len = expressions.length; _i < _len; _i++) {
        node = expressions[_i];
        if (node.jumps({
          loop: true
        })) return node;
      }
      return false;
    };

    While.prototype.tameWrap = function(d) {
      var body, break_assign, break_block, break_body, break_expr, break_id, call1, call2, cond, condition, continue_assign, continue_block, continue_body, continue_id, f, k_id, next_arg, next_assign, next_block, next_body, next_id, outStatements, rvar, rvar_init, rvar_value, top_assign, top_block, top_body, top_call, top_func, top_id, top_statements;
      condition = d.condition;
      body = d.body;
      rvar = d.rvar;
      outStatements = [];
      if (rvar) rvar_value = new Value(new Literal(rvar));
      top_id = new Value(new Literal(tame["const"].t_while));
      k_id = new Value(new Literal(tame["const"].k));
      break_id = new Value(new Literal(tame["const"].b_while));
      if (rvar) {
        break_expr = new Call(k_id, [rvar_value]);
        break_block = new Block([break_expr]);
        break_body = new Code([], break_block, 'tamegen');
        break_assign = new Assign(break_id, break_body, null, {
          tamelocal: true
        });
      } else {
        break_assign = new Assign(break_id, k_id, null, {
          tamelocal: true
        });
      }
      continue_id = new Value(new Literal(tame["const"].c_while));
      continue_block = new Block([new Call(top_id, [k_id])]);
      if (d.step) continue_block.unshift(d.step);
      continue_body = new Code([], continue_block, 'tamegen');
      continue_assign = new Assign(continue_id, continue_body, null, {
        tamelocal: true
      });
      next_id = new Value(new Literal(tame["const"].n_while));
      if (rvar) {
        next_arg = new Value(new Literal(tame["const"].n_arg));
        f = rvar_value.copy();
        f.add(new Access(new Value(new Literal('push'))));
        call1 = new Call(f, [next_arg]);
        call2 = new Call(continue_id, []);
        next_block = new Block([call1, call2]);
        next_body = new Code([next_arg], next_block, 'tamegen');
        next_assign = new Assign(next_id, next_body, null, {
          tamelocal: true
        });
      } else {
        next_assign = new Assign(next_id, continue_id);
      }
      cond = new If(condition, body);
      cond.addElse(new Block([new Call(break_id, [])]));
      top_body = new Block([break_assign, continue_assign, next_assign, cond]);
      top_func = new Code([k_id], top_body, 'tamegen');
      top_assign = new Assign(top_id, top_func, null, {
        tamelocal: true
      });
      top_call = new Call(top_id, [k_id]);
      top_statements = [];
      if (d.init) top_statements = top_statements.concat(d.init);
      if (rvar) {
        rvar_init = new Assign(rvar_value, new Arr);
        top_statements.push(rvar_init);
      }
      top_statements = top_statements.concat([top_assign, top_call]);
      return top_block = new Block(top_statements);
    };

    While.prototype.tameCallContinuation = function() {
      return this.body.tameThreadReturn(new TameTailCall(tame["const"].n_while));
    };

    While.prototype.compileTame = function(o) {
      var b, opts;
      if (!this.tameNodeFlag) return null;
      opts = {
        condition: this.condition,
        body: this.body
      };
      if (this.returns) opts.rvar = o.scope.freeVariable('results');
      b = this.tameWrap(opts);
      return b.compile(o);
    };

    While.prototype.compileNode = function(o) {
      var body, code, rvar, set;
      if (code = this.compileTame(o)) return code;
      o.indent += TAB;
      set = '';
      body = this.body;
      if (body.isEmpty()) {
        body = '';
      } else {
        if (this.returns) {
          body.makeReturn(rvar = o.scope.freeVariable('results'));
          set = "" + this.tab + rvar + " = [];\n";
        }
        if (this.guard) {
          if (body.expressions.length > 1) {
            body.expressions.unshift(new If((new Parens(this.guard)).invert(), new Literal("continue")));
          } else {
            if (this.guard) body = Block.wrap([new If(this.guard, body)]);
          }
        }
        body = "\n" + (body.compile(o, LEVEL_TOP)) + "\n" + this.tab;
      }
      code = set + this.tab + ("while (" + (this.condition.compile(o, LEVEL_PAREN)) + ") {" + body + "}");
      if (this.returns) {
        if (this.tameHasAutocbFlag) {
          code += "\n" + this.tab + tame["const"].autocb + "(" + rvar + ");";
          code += "\n" + this.tab + "return;";
        } else {
          code += "\n" + this.tab + "return " + rvar + ";";
        }
      }
      return code;
    };

    return While;

  })(Base);

  exports.Op = Op = (function(_super) {
    var CONVERSIONS, INVERSIONS;

    __extends(Op, _super);

    Op.name = 'Op';

    function Op(op, first, second, flip) {
      Op.__super__.constructor.call(this);
      if (op === 'in') return new In(first, second);
      if (op === 'do') return this.generateDo(first);
      if (op === 'new') {
        if (first instanceof Call && !first["do"] && !first.isNew) {
          return first.newInstance();
        }
        if (first instanceof Code && first.bound || first["do"]) {
          first = new Parens(first);
        }
      }
      this.operator = CONVERSIONS[op] || op;
      this.first = first;
      this.second = second;
      this.flip = !!flip;
      return this;
    }

    Op.prototype.tameWrapContinuation = function() {
      return this.tameCallContinuationFlag;
    };

    CONVERSIONS = {
      '==': '===',
      '!=': '!==',
      'of': 'in'
    };

    INVERSIONS = {
      '!==': '===',
      '===': '!=='
    };

    Op.prototype.children = ['first', 'second'];

    Op.prototype.isSimpleNumber = NO;

    Op.prototype.isUnary = function() {
      return !this.second;
    };

    Op.prototype.isComplex = function() {
      var _ref2;
      return !(this.isUnary() && ((_ref2 = this.operator) === '+' || _ref2 === '-')) || this.first.isComplex();
    };

    Op.prototype.isChainable = function() {
      var _ref2;
      return (_ref2 = this.operator) === '<' || _ref2 === '>' || _ref2 === '>=' || _ref2 === '<=' || _ref2 === '===' || _ref2 === '!==';
    };

    Op.prototype.tameCpsRotate = function() {
      var fnv, snv;
      if (this.first && (fnv = this.tameCpsExprRotate(this.first))) {
        this.first = fnv;
      }
      if (this.second && (snv = this.tameCpsExprRotate(this.second))) {
        return this.second = snv;
      }
    };

    Op.prototype.invert = function() {
      var allInvertable, curr, fst, op, _ref2;
      if (this.isChainable() && this.first.isChainable()) {
        allInvertable = true;
        curr = this;
        while (curr && curr.operator) {
          allInvertable && (allInvertable = curr.operator in INVERSIONS);
          curr = curr.first;
        }
        if (!allInvertable) return new Parens(this).invert();
        curr = this;
        while (curr && curr.operator) {
          curr.invert = !curr.invert;
          curr.operator = INVERSIONS[curr.operator];
          curr = curr.first;
        }
        return this;
      } else if (op = INVERSIONS[this.operator]) {
        this.operator = op;
        if (this.first.unwrap() instanceof Op) this.first.invert();
        return this;
      } else if (this.second) {
        return new Parens(this).invert();
      } else if (this.operator === '!' && (fst = this.first.unwrap()) instanceof Op && ((_ref2 = fst.operator) === '!' || _ref2 === 'in' || _ref2 === 'instanceof')) {
        return fst;
      } else {
        return new Op('!', this);
      }
    };

    Op.prototype.unfoldSoak = function(o) {
      var _ref2;
      return ((_ref2 = this.operator) === '++' || _ref2 === '--' || _ref2 === 'delete') && unfoldSoak(o, this, 'first');
    };

    Op.prototype.generateDo = function(exp) {
      var call, func, param, passedParams, ref, _i, _len, _ref2;
      passedParams = [];
      func = exp instanceof Assign && (ref = exp.value.unwrap()) instanceof Code ? ref : exp;
      _ref2 = func.params || [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        param = _ref2[_i];
        if (param.value) {
          passedParams.push(param.value);
          delete param.value;
        } else {
          passedParams.push(param);
        }
      }
      call = new Call(exp, passedParams);
      call["do"] = true;
      return call;
    };

    Op.prototype.compileNode = function(o) {
      var code, isChain;
      isChain = this.isChainable() && this.first.isChainable();
      if (!isChain) this.first.front = this.front;
      if (this.isUnary()) return this.compileUnary(o);
      if (isChain) return this.compileChain(o);
      if (this.operator === '?') return this.compileExistence(o);
      code = this.first.compile(o, LEVEL_OP) + ' ' + this.operator + ' ' + this.second.compile(o, LEVEL_OP);
      if (o.level <= LEVEL_OP) {
        return code;
      } else {
        return "(" + code + ")";
      }
    };

    Op.prototype.compileChain = function(o) {
      var code, fst, shared, _ref2;
      _ref2 = this.first.second.cache(o), this.first.second = _ref2[0], shared = _ref2[1];
      fst = this.first.compile(o, LEVEL_OP);
      code = "" + fst + " " + (this.invert ? '&&' : '||') + " " + (shared.compile(o)) + " " + this.operator + " " + (this.second.compile(o, LEVEL_OP));
      return "(" + code + ")";
    };

    Op.prototype.compileExistence = function(o) {
      var fst, ref;
      if (this.first.isComplex() && o.level > LEVEL_TOP) {
        ref = new Literal(o.scope.freeVariable('ref'));
        fst = new Parens(new Assign(ref, this.first));
      } else {
        fst = this.first;
        ref = fst;
      }
      return new If(new Existence(fst), ref, {
        type: 'if'
      }).addElse(this.second).compile(o);
    };

    Op.prototype.compileUnary = function(o) {
      var op, parts, plusMinus;
      parts = [op = this.operator];
      plusMinus = op === '+' || op === '-';
      if ((op === 'new' || op === 'typeof' || op === 'delete') || plusMinus && this.first instanceof Op && this.first.operator === op) {
        parts.push(' ');
      }
      if ((plusMinus && this.first instanceof Op) || (op === 'new' && this.first.isStatement(o))) {
        this.first = new Parens(this.first);
      }
      parts.push(this.first.compile(o, LEVEL_OP));
      if (this.flip) parts.reverse();
      return parts.join('');
    };

    Op.prototype.toString = function(idt) {
      return Op.__super__.toString.call(this, idt, this.constructor.name + ' ' + this.operator);
    };

    return Op;

  })(Base);

  exports.In = In = (function(_super) {

    __extends(In, _super);

    In.name = 'In';

    function In(object, array) {
      this.object = object;
      this.array = array;
      In.__super__.constructor.call(this);
    }

    In.prototype.children = ['object', 'array'];

    In.prototype.invert = NEGATE;

    In.prototype.compileNode = function(o) {
      var hasSplat, obj, _i, _len, _ref2;
      if (this.array instanceof Value && this.array.isArray()) {
        _ref2 = this.array.base.objects;
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          obj = _ref2[_i];
          if (!(obj instanceof Splat)) continue;
          hasSplat = true;
          break;
        }
        if (!hasSplat) return this.compileOrTest(o);
      }
      return this.compileLoopTest(o);
    };

    In.prototype.compileOrTest = function(o) {
      var cmp, cnj, i, item, ref, sub, tests, _ref2, _ref3;
      if (this.array.base.objects.length === 0) return "" + (!!this.negated);
      _ref2 = this.object.cache(o, LEVEL_OP), sub = _ref2[0], ref = _ref2[1];
      _ref3 = this.negated ? [' !== ', ' && '] : [' === ', ' || '], cmp = _ref3[0], cnj = _ref3[1];
      tests = (function() {
        var _i, _len, _ref4, _results;
        _ref4 = this.array.base.objects;
        _results = [];
        for (i = _i = 0, _len = _ref4.length; _i < _len; i = ++_i) {
          item = _ref4[i];
          _results.push((i ? ref : sub) + cmp + item.compile(o, LEVEL_ACCESS));
        }
        return _results;
      }).call(this);
      tests = tests.join(cnj);
      if (o.level < LEVEL_OP) {
        return tests;
      } else {
        return "(" + tests + ")";
      }
    };

    In.prototype.compileLoopTest = function(o) {
      var code, ref, sub, _ref2;
      _ref2 = this.object.cache(o, LEVEL_LIST), sub = _ref2[0], ref = _ref2[1];
      code = utility('indexOf') + (".call(" + (this.array.compile(o, LEVEL_LIST)) + ", " + ref + ") ") + (this.negated ? '< 0' : '>= 0');
      if (sub === ref) return code;
      code = sub + ', ' + code;
      if (o.level < LEVEL_LIST) {
        return code;
      } else {
        return "(" + code + ")";
      }
    };

    In.prototype.toString = function(idt) {
      return In.__super__.toString.call(this, idt, this.constructor.name + (this.negated ? '!' : ''));
    };

    return In;

  })(Base);

  exports.Slot = Slot = (function(_super) {

    __extends(Slot, _super);

    Slot.name = 'Slot';

    function Slot(value, suffix, splat) {
      Slot.__super__.constructor.call(this);
      this.value = value;
      this.suffix = suffix;
      this.splat = splat;
    }

    Slot.prototype.children = ['value', 'suffix'];

    return Slot;

  })(Base);

  exports.Defer = Defer = (function(_super) {

    __extends(Defer, _super);

    Defer.name = 'Defer';

    function Defer(args) {
      var a;
      Defer.__super__.constructor.call(this);
      this.slots = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = args.length; _i < _len; _i++) {
          a = args[_i];
          _results.push(a.toSlot());
        }
        return _results;
      })();
      this.params = [];
      this.vars = [];
    }

    Defer.prototype.children = ['slots'];

    Defer.prototype.newParam = function() {
      var l, v;
      l = "" + tame["const"].slot + "_" + (this.params.length + 1);
      v = new Value(new Literal(l));
      this.params.push(v.copy());
      return v;
    };

    Defer.prototype.makeAssignFn = function(o) {
      var a, args, assign, assignments, block, call, func, i, i_lit, inner_fn, lit, outer_block, outer_fn, prop, s, slot, _i, _len, _ref2;
      if (this.slots.length === 0) return null;
      assignments = [];
      args = [];
      i = 0;
      _ref2 = this.slots;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        s = _ref2[_i];
        a = new Value(new Literal("arguments"));
        i_lit = new Value(new Literal(i));
        if (s.splat) {
          func = new Value(new Literal(utility('slice')));
          func.add(new Access(new Value(new Literal('call'))));
          call = new Call(func, [a, i_lit]);
          slot = s.value;
          this.vars.push(slot);
          assign = new Assign(slot, call);
        } else {
          a.add(new Index(i_lit));
          if (!s.suffix) {
            lit = s.value.compile(o, LEVEL_TOP);
            if (lit === "_") {
              slot = new Value(new Literal(tame["const"].deferrals));
              slot.add(new Access(new Value(new Literal(tame["const"].retslot))));
            } else {
              slot = s.value;
              this.vars.push(slot);
            }
          } else {
            args.push(s.value);
            slot = this.newParam();
            if (s.suffix instanceof Index) {
              prop = new Index(this.newParam());
              args.push(s.suffix.index);
            } else {
              prop = s.suffix;
            }
            slot.add(prop);
          }
          assign = new Assign(slot, a);
        }
        assignments.push(assign);
        i++;
      }
      block = new Block(assignments);
      inner_fn = new Code([], block, 'tamegen');
      outer_block = new Block([new Return(inner_fn)]);
      outer_fn = new Code(this.params, outer_block, 'tamegen');
      return call = new Call(outer_fn, args);
    };

    Defer.prototype.transform = function(o) {
      var assign_fn, assignments, fn, meth;
      fn = new Value(new Literal(tame["const"].deferrals));
      meth = new Value(new Literal(tame["const"].defer_method));
      fn.add(new Access(meth));
      assignments = [];
      if ((assign_fn = this.makeAssignFn(o))) {
        assignments.push(new Assign(new Value(new Literal(tame["const"].assign_fn)), assign_fn, "object"));
      }
      o = new Obj(assignments);
      return new Call(fn, [new Value(o)]);
    };

    Defer.prototype.compileNode = function(o) {
      var call, name, scope, v, _i, _len, _ref2;
      call = this.transform(o);
      _ref2 = this.vars;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        v = _ref2[_i];
        name = v.compile(o, LEVEL_LIST);
        scope = o.scope;
        scope.add(name, 'var');
      }
      return call.compile(o);
    };

    Defer.prototype.tameWalkAst = function(p, o) {
      this.tameHasAutocbFlag = o.foundAutocb;
      o.foundDefer = true;
      return Defer.__super__.tameWalkAst.call(this, p, o);
    };

    return Defer;

  })(Base);

  exports.Await = Await = (function(_super) {

    __extends(Await, _super);

    Await.name = 'Await';

    function Await(body) {
      this.body = body;
      Await.__super__.constructor.call(this);
    }

    Await.prototype.transform = function(o) {
      var assign, body, call, cls, lhs, meth, name, rhs;
      body = this.body;
      name = tame["const"].deferrals;
      o.scope.add(name, 'var');
      lhs = new Value(new Literal(name));
      cls = new Value(new Literal(tame["const"].ns));
      cls.add(new Access(new Value(new Literal(tame["const"].Deferrals))));
      call = new Call(cls, [new Value(new Literal(tame["const"].k))]);
      rhs = new Op("new", call);
      assign = new Assign(lhs, rhs);
      body.unshift(assign);
      meth = lhs.copy().add(new Access(new Value(new Literal(tame["const"].fulfill))));
      call = new Call(meth, []);
      body.push(call);
      return this.body = body;
    };

    Await.prototype.children = ['body'];

    Await.prototype.isStatement = function() {
      return YES;
    };

    Await.prototype.makeReturn = THIS;

    Await.prototype.compileNode = function(o) {
      this.transform(o);
      return this.body.compile(o);
    };

    Await.prototype.tameWalkAst = function(p, o) {
      this.tameHasAutocbFlag = o.foundAutocb;
      p = p || this;
      this.tameParentAwait = p;
      Await.__super__.tameWalkAst.call(this, p, o);
      return this.tameNodeFlag = o.foundAwait = true;
    };

    return Await;

  })(Base);

  exports.TameRequire = TameRequire = (function(_super) {
    var children;

    __extends(TameRequire, _super);

    TameRequire.name = 'TameRequire';

    function TameRequire(args) {
      TameRequire.__super__.constructor.call(this);
      this.typ = null;
      this.usage = "tameRequire takes either 'inline', 'node', 'window' or 'none'";
      if (args && args.length > 2) throw SyntaxError(this.usage);
      if (args && args.length === 1) this.typ = args[0];
    }

    TameRequire.prototype.compileNode = function(o) {
      var access, call, callv, file, inc, k, lhs, ns, out, req, rhs, v, window_mode, window_val;
      this.tab = o.indent;
      v = this.typ ? this.typ.compile(o) : o.bare ? 'none' : "inline";
      window_mode = false;
      window_val = null;
      inc = null;
      inc = (function() {
        switch (v) {
          case "inline":
          case "window":
            if (v === "window") window_mode = true;
            if (window_mode) window_val = new Value(new Literal(v));
            return InlineDeferral.generate(window_val ? window_val.copy() : null);
          case "node":
            file = new Literal("'coffee-script'");
            access = new Access(new Literal(tame["const"].ns));
            req = new Value(new Literal("require"));
            call = new Call(req, [file]);
            callv = new Value(call);
            callv.add(access);
            ns = new Value(new Literal(tame["const"].ns));
            return new Assign(ns, callv);
          case "none":
            return null;
          default:
            throw SyntaxError(this.usage);
        }
      }).call(this);
      out = inc ? "" + this.tab + (inc.compile(o, LEVEL_TOP)) + "\n" : "";
      rhs = new Code([], new Block([]));
      lhs = new Value(new Literal(tame["const"].k));
      if (window_val) {
        window_val.add(new Access(lhs));
        lhs = window_val;
      }
      k = new Assign(lhs, rhs);
      return out + ("" + this.tab) + k.compile(o, LEVEL_TOP);
    };

    children = ['typ'];

    TameRequire.prototype.tameWalkAst = function(p, o) {
      this.tameHasAutocbFlag = o.foundAutocb;
      o.foundRequire = true;
      return TameRequire.__super__.tameWalkAst.call(this, p, o);
    };

    return TameRequire;

  })(Base);

  exports.Try = Try = (function(_super) {

    __extends(Try, _super);

    Try.name = 'Try';

    function Try(attempt, error, recovery, ensure) {
      this.attempt = attempt;
      this.error = error;
      this.recovery = recovery;
      this.ensure = ensure;
      Try.__super__.constructor.call(this);
    }

    Try.prototype.children = ['attempt', 'recovery', 'ensure'];

    Try.prototype.isStatement = YES;

    Try.prototype.jumps = function(o) {
      var _ref2;
      return this.attempt.jumps(o) || ((_ref2 = this.recovery) != null ? _ref2.jumps(o) : void 0);
    };

    Try.prototype.makeReturn = function(res) {
      if (this.attempt) this.attempt = this.attempt.makeReturn(res);
      if (this.recovery) this.recovery = this.recovery.makeReturn(res);
      return this;
    };

    Try.prototype.compileNode = function(o) {
      var catchPart, ensurePart, errorPart, tryPart;
      o.indent += TAB;
      errorPart = this.error ? " (" + (this.error.compile(o)) + ") " : ' ';
      tryPart = this.attempt.compile(o, LEVEL_TOP);
      catchPart = this.recovery ? (!o.scope.check(this.error.value) ? o.scope.add(this.error.value, 'param') : void 0, " catch" + errorPart + "{\n" + (this.recovery.compile(o, LEVEL_TOP)) + "\n" + this.tab + "}") : !(this.ensure || this.recovery) ? ' catch (_error) {}' : void 0;
      ensurePart = this.ensure ? " finally {\n" + (this.ensure.compile(o, LEVEL_TOP)) + "\n" + this.tab + "}" : '';
      return "" + this.tab + "try {\n" + tryPart + "\n" + this.tab + "}" + (catchPart || '') + ensurePart;
    };

    return Try;

  })(Base);

  exports.Throw = Throw = (function(_super) {

    __extends(Throw, _super);

    Throw.name = 'Throw';

    function Throw(expression) {
      this.expression = expression;
      Throw.__super__.constructor.call(this);
    }

    Throw.prototype.children = ['expression'];

    Throw.prototype.isStatement = YES;

    Throw.prototype.jumps = NO;

    Throw.prototype.makeReturn = THIS;

    Throw.prototype.compileNode = function(o) {
      return this.tab + ("throw " + (this.expression.compile(o)) + ";");
    };

    return Throw;

  })(Base);

  exports.Existence = Existence = (function(_super) {

    __extends(Existence, _super);

    Existence.name = 'Existence';

    function Existence(expression) {
      this.expression = expression;
      Existence.__super__.constructor.call(this);
    }

    Existence.prototype.children = ['expression'];

    Existence.prototype.invert = NEGATE;

    Existence.prototype.compileNode = function(o) {
      var cmp, cnj, code, _ref2;
      this.expression.front = this.front;
      code = this.expression.compile(o, LEVEL_OP);
      if (IDENTIFIER.test(code) && !o.scope.check(code)) {
        _ref2 = this.negated ? ['===', '||'] : ['!==', '&&'], cmp = _ref2[0], cnj = _ref2[1];
        code = "typeof " + code + " " + cmp + " \"undefined\" " + cnj + " " + code + " " + cmp + " null";
      } else {
        code = "" + code + " " + (this.negated ? '==' : '!=') + " null";
      }
      if (o.level <= LEVEL_COND) {
        return code;
      } else {
        return "(" + code + ")";
      }
    };

    return Existence;

  })(Base);

  exports.Parens = Parens = (function(_super) {

    __extends(Parens, _super);

    Parens.name = 'Parens';

    function Parens(body) {
      this.body = body;
      Parens.__super__.constructor.call(this);
    }

    Parens.prototype.children = ['body'];

    Parens.prototype.unwrap = function() {
      return this.tameUnwrap(this.body);
    };

    Parens.prototype.isComplex = function() {
      return this.body.isComplex();
    };

    Parens.prototype.compileNode = function(o) {
      var bare, code, expr;
      expr = this.body.unwrap();
      if (expr instanceof Value && expr.isAtomic()) {
        expr.front = this.front;
        return expr.compile(o);
      }
      code = expr.compile(o, LEVEL_PAREN);
      bare = o.level < LEVEL_OP && (expr instanceof Op || expr instanceof Call || (expr instanceof For && expr.returns));
      if (bare) {
        return code;
      } else {
        return "(" + code + ")";
      }
    };

    return Parens;

  })(Base);

  exports.For = For = (function(_super) {

    __extends(For, _super);

    For.name = 'For';

    function For(body, source) {
      var _ref2;
      For.__super__.constructor.call(this);
      this.condition = null;
      this.source = source.source, this.guard = source.guard, this.step = source.step, this.name = source.name, this.index = source.index;
      this.body = Block.wrap([body]);
      this.own = !!source.own;
      this.object = !!source.object;
      if (this.object) {
        _ref2 = [this.index, this.name], this.name = _ref2[0], this.index = _ref2[1];
      }
      if (this.index instanceof Value) {
        throw SyntaxError('index cannot be a pattern matching expression');
      }
      this.range = this.source instanceof Value && this.source.base instanceof Range && !this.source.properties.length;
      this.pattern = this.name instanceof Value;
      if (this.range && this.index) {
        throw SyntaxError('indexes do not apply to range loops');
      }
      if (this.range && this.pattern) {
        throw SyntaxError('cannot pattern match over range loops');
      }
      this.returns = false;
    }

    For.prototype.children = ['body', 'source', 'guard', 'step'];

    For.prototype.compileTame = function(o, d) {
      var a1, a2, a3, a4, a5, b, body, condition, empty_arr, init, ival, key, key_lit, key_val, keys, keys_access, keys_len, keys_val, kval, len, len_rhs, len_val, loop_body, loop_keys, loop_source, ref, ref_val, ref_val_copy, rvar, scope, source_access, step;
      if (!this.tameNodeFlag) return null;
      body = d.body;
      condition = null;
      init = [];
      step = null;
      scope = o.scope;
      if (this.object) {
        ref = scope.freeVariable('ref');
        ref_val = new Value(new Literal(ref));
        a1 = new Assign(ref_val, this.source);
        keys = scope.freeVariable('keys');
        keys_val = new Value(new Literal(keys));
        key = scope.freeVariable('k');
        key_lit = new Literal(key);
        key_val = new Value(key_lit);
        empty_arr = new Value(new Arr);
        loop_body = new Block([key_val]);
        loop_source = {
          object: true,
          name: key_lit,
          source: ref_val
        };
        loop_keys = new For(loop_body, loop_source);
        a2 = new Assign(keys_val, loop_keys);
        ival = new Value(new Literal('i'));
        a3 = new Assign(ival, new Value(new Literal(0)));
        init = [a1, a2, a3];
        keys_len = keys_val.copy();
        keys_len.add(new Access(new Value(new Literal("length"))));
        condition = new Op('<', ival, keys_len);
        step = new Op('++', ival);
        if (this.name) {
          source_access = ref_val.copy();
          source_access.add(new Index(this.index));
          a5 = new Assign(this.name, source_access);
          body.unshift(a5);
        }
        keys_access = keys_val.copy();
        keys_access.add(new Index(ival));
        a4 = new Assign(this.index, keys_access);
        body.unshift(a4);
      } else if (this.range && this.name) {
        condition = new Op('<=', this.name, this.source.base.to);
        init = [new Assign(this.name, this.source.base.from)];
        step = new Op('++', this.name);
      } else if (!this.range && this.name) {
        kval = new Value(new Literal(d.kvar));
        len = scope.freeVariable('len');
        ref = scope.freeVariable('ref');
        ref_val = new Value(new Literal(ref));
        len_val = new Value(new Literal(len));
        a1 = new Assign(ref_val, this.source);
        len_rhs = ref_val.copy().add(new Access(new Value(new Literal("length"))));
        a2 = new Assign(len_val, len_rhs);
        a3 = new Assign(kval, new Value(new Literal(0)));
        init = [a1, a2, a3];
        condition = new Op('<', kval, len_val);
        step = new Op('++', kval);
        ref_val_copy = ref_val.copy();
        ref_val_copy.add(new Index(kval));
        a4 = new Assign(this.name, ref_val_copy);
        body.unshift(a4);
      }
      rvar = d.rvar;
      b = this.tameWrap({
        condition: condition,
        body: body,
        init: init,
        step: step,
        rvar: rvar
      });
      return b.compile(o);
    };

    For.prototype.compileNode = function(o) {
      var body, code, defPart, forPart, forVarPart, guardPart, idt1, index, ivar, kvar, kvarAssign, lastJumps, lvar, name, namePart, ref, resultPart, returnResult, rvar, scope, source, stepPart, stepvar, svar, varPart, _ref2;
      body = Block.wrap([this.body]);
      lastJumps = (_ref2 = last(body.expressions)) != null ? _ref2.jumps() : void 0;
      if (lastJumps && lastJumps instanceof Return) this.returns = false;
      source = this.range ? this.source.base : this.source;
      scope = o.scope;
      name = this.name && this.name.compile(o, LEVEL_LIST);
      index = this.index && this.index.compile(o, LEVEL_LIST);
      if (name && !this.pattern) {
        scope.find(name, {
          immediate: true
        });
      }
      if (index) {
        scope.find(index, {
          immediate: true
        });
      }
      if (this.returns) rvar = scope.freeVariable('results');
      ivar = (this.object && index) || scope.freeVariable('i');
      kvar = (this.range && name) || index || ivar;
      kvarAssign = kvar !== ivar ? "" + kvar + " = " : "";
      if (this.step && !this.range) stepvar = scope.freeVariable("step");
      if (this.pattern) name = ivar;
      varPart = '';
      guardPart = '';
      defPart = '';
      idt1 = this.tab + TAB;
      if (code = this.compileTame(o, {
        stepvar: stepvar,
        body: body,
        rvar: rvar,
        kvar: kvar
      })) {
        return code;
      }
      if (this.range) {
        forPart = source.compile(merge(o, {
          index: ivar,
          name: name,
          step: this.step
        }));
      } else {
        svar = this.source.compile(o, LEVEL_LIST);
        if ((name || this.own) && !IDENTIFIER.test(svar)) {
          defPart = "" + this.tab + (ref = scope.freeVariable('ref')) + " = " + svar + ";\n";
          svar = ref;
        }
        if (name && !this.pattern) {
          namePart = "" + name + " = " + svar + "[" + kvar + "]";
        }
        if (!this.object) {
          lvar = scope.freeVariable('len');
          forVarPart = "" + kvarAssign + ivar + " = 0, " + lvar + " = " + svar + ".length";
          if (this.step) {
            forVarPart += ", " + stepvar + " = " + (this.step.compile(o, LEVEL_OP));
          }
          stepPart = "" + kvarAssign + (this.step ? "" + ivar + " += " + stepvar : (kvar !== ivar ? "++" + ivar : "" + ivar + "++"));
          forPart = "" + forVarPart + "; " + ivar + " < " + lvar + "; " + stepPart;
        }
      }
      if (this.returns) {
        resultPart = "" + this.tab + rvar + " = [];\n";
        returnResult = "\n" + this.tab + "return " + rvar + ";";
        body.makeReturn(rvar);
      }
      if (this.guard) {
        if (body.expressions.length > 1) {
          body.expressions.unshift(new If((new Parens(this.guard)).invert(), new Literal("continue")));
        } else {
          if (this.guard) body = Block.wrap([new If(this.guard, body)]);
        }
      }
      if (this.pattern) {
        body.expressions.unshift(new Assign(this.name, new Literal("" + svar + "[" + kvar + "]")));
      }
      defPart += this.pluckDirectCall(o, body);
      if (namePart) varPart = "\n" + idt1 + namePart + ";";
      if (this.object) {
        forPart = "" + kvar + " in " + svar;
        if (this.own) {
          guardPart = "\n" + idt1 + "if (!" + (utility('hasProp')) + ".call(" + svar + ", " + kvar + ")) continue;";
        }
      }
      body = body.compile(merge(o, {
        indent: idt1
      }), LEVEL_TOP);
      if (body) body = '\n' + body + '\n';
      return "" + defPart + (resultPart || '') + this.tab + "for (" + forPart + ") {" + guardPart + varPart + body + this.tab + "}" + (returnResult || '');
    };

    For.prototype.pluckDirectCall = function(o, body) {
      var base, defs, expr, fn, idx, ref, val, _i, _len, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
      defs = '';
      _ref2 = body.expressions;
      for (idx = _i = 0, _len = _ref2.length; _i < _len; idx = ++_i) {
        expr = _ref2[idx];
        expr = expr.unwrapAll();
        if (!(expr instanceof Call)) continue;
        val = expr.variable.unwrapAll();
        if (!((val instanceof Code) || (val instanceof Value && ((_ref3 = val.base) != null ? _ref3.unwrapAll() : void 0) instanceof Code && val.properties.length === 1 && ((_ref4 = (_ref5 = val.properties[0].name) != null ? _ref5.value : void 0) === 'call' || _ref4 === 'apply')))) {
          continue;
        }
        fn = ((_ref6 = val.base) != null ? _ref6.unwrapAll() : void 0) || val;
        ref = new Literal(o.scope.freeVariable('fn'));
        base = new Value(ref);
        if (val.base) _ref7 = [base, val], val.base = _ref7[0], base = _ref7[1];
        body.expressions[idx] = new Call(base, expr.args);
        defs += this.tab + new Assign(ref, fn).compile(o, LEVEL_TOP) + ';\n';
      }
      return defs;
    };

    return For;

  })(While);

  exports.Switch = Switch = (function(_super) {

    __extends(Switch, _super);

    Switch.name = 'Switch';

    function Switch(subject, cases, otherwise) {
      this.subject = subject;
      this.cases = cases;
      this.otherwise = otherwise;
      Switch.__super__.constructor.call(this);
    }

    Switch.prototype.children = ['subject', 'cases', 'otherwise'];

    Switch.prototype.isStatement = YES;

    Switch.prototype.jumps = function(o) {
      var block, conds, _i, _len, _ref2, _ref3, _ref4;
      if (o == null) {
        o = {
          block: true
        };
      }
      _ref2 = this.cases;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        _ref3 = _ref2[_i], conds = _ref3[0], block = _ref3[1];
        if (block.jumps(o)) return block;
      }
      return (_ref4 = this.otherwise) != null ? _ref4.jumps(o) : void 0;
    };

    Switch.prototype.makeReturn = function(res) {
      var pair, _i, _len, _ref2, _ref3;
      _ref2 = this.cases;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        pair = _ref2[_i];
        pair[1].makeReturn(res);
      }
      if (res) {
        this.otherwise || (this.otherwise = new Block([new Literal('void 0')]));
      }
      if ((_ref3 = this.otherwise) != null) _ref3.makeReturn(res);
      return this;
    };

    Switch.prototype.tameCallContinuation = function() {
      var block, condition, _i, _len, _ref2, _ref3, _ref4;
      _ref2 = this.cases;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        _ref3 = _ref2[_i], condition = _ref3[0], block = _ref3[1];
        block.tameThreadReturn();
      }
      return (_ref4 = this.otherwise) != null ? _ref4.tameThreadReturn() : void 0;
    };

    Switch.prototype.compileNode = function(o) {
      var block, body, code, cond, conditions, expr, i, idt1, idt2, _i, _j, _len, _len2, _ref2, _ref3, _ref4, _ref5;
      idt1 = o.indent + TAB;
      idt2 = o.indent = idt1 + TAB;
      code = this.tab + ("switch (" + (((_ref2 = this.subject) != null ? _ref2.compile(o, LEVEL_PAREN) : void 0) || false) + ") {\n");
      _ref3 = this.cases;
      for (i = _i = 0, _len = _ref3.length; _i < _len; i = ++_i) {
        _ref4 = _ref3[i], conditions = _ref4[0], block = _ref4[1];
        _ref5 = flatten([conditions]);
        for (_j = 0, _len2 = _ref5.length; _j < _len2; _j++) {
          cond = _ref5[_j];
          if (!this.subject) cond = cond.invert();
          code += idt1 + ("case " + (cond.compile(o, LEVEL_PAREN)) + ":\n");
        }
        if (body = block.compile(o, LEVEL_TOP)) code += body + '\n';
        if (i === this.cases.length - 1 && !this.otherwise) break;
        expr = this.lastNonComment(block.expressions);
        if (expr instanceof Return || (expr instanceof Literal && expr.jumps() && expr.value !== 'debugger')) {
          continue;
        }
        code += idt2 + 'break;\n';
      }
      if (this.otherwise && this.otherwise.expressions.length) {
        code += idt1 + ("default:\n" + (this.otherwise.compile(o, LEVEL_TOP)) + "\n");
      }
      return code + this.tab + '}';
    };

    return Switch;

  })(Base);

  exports.If = If = (function(_super) {

    __extends(If, _super);

    If.name = 'If';

    function If(condition, body, options) {
      this.body = body;
      if (options == null) options = {};
      If.__super__.constructor.call(this);
      this.condition = options.type === 'unless' ? condition.invert() : condition;
      this.elseBody = null;
      this.isChain = false;
      this.soak = options.soak;
    }

    If.prototype.children = ['condition', 'body', 'elseBody'];

    If.prototype.bodyNode = function() {
      var _ref2;
      return (_ref2 = this.body) != null ? _ref2.unwrap() : void 0;
    };

    If.prototype.elseBodyNode = function() {
      var _ref2;
      return (_ref2 = this.elseBody) != null ? _ref2.unwrap() : void 0;
    };

    If.prototype.addElse = function(elseBody) {
      if (this.isChain) {
        this.elseBodyNode().addElse(elseBody);
      } else {
        this.isChain = elseBody instanceof If;
        this.elseBody = this.ensureBlock(elseBody);
      }
      return this;
    };

    If.prototype.tameCallContinuation = function() {
      if (this.elseBody) {
        this.elseBody.tameThreadReturn();
        this.isChain = false;
      } else {
        this.addElse(new TameTailCall);
      }
      return this.body.tameThreadReturn();
    };

    If.prototype.isStatement = function(o) {
      var _ref2;
      return (o != null ? o.level : void 0) === LEVEL_TOP || this.bodyNode().isStatement(o) || ((_ref2 = this.elseBodyNode()) != null ? _ref2.isStatement(o) : void 0) || this.tameHasContinuation();
    };

    If.prototype.jumps = function(o) {
      var _ref2;
      return this.body.jumps(o) || ((_ref2 = this.elseBody) != null ? _ref2.jumps(o) : void 0);
    };

    If.prototype.compileNode = function(o) {
      if (this.isStatement(o || this.tameIsCpsPivot())) {
        return this.compileStatement(o);
      } else {
        return this.compileExpression(o);
      }
    };

    If.prototype.makeReturn = function(res) {
      if (res) {
        this.elseBody || (this.elseBody = new Block([new Literal('void 0')]));
      }
      this.body && (this.body = new Block([this.body.makeReturn(res)]));
      this.elseBody && (this.elseBody = new Block([this.elseBody.makeReturn(res)]));
      return this;
    };

    If.prototype.ensureBlock = function(node) {
      if (node instanceof Block) {
        return node;
      } else {
        return new Block([node]);
      }
    };

    If.prototype.compileStatement = function(o) {
      var body, bodyc, child, cond, exeq, ifPart, _ref2;
      child = del(o, 'chainChild');
      exeq = del(o, 'isExistentialEquals');
      if (exeq) {
        return new If(this.condition.invert(), this.elseBodyNode(), {
          type: 'if'
        }).compile(o);
      }
      cond = this.condition.compile(o, LEVEL_PAREN);
      o.indent += TAB;
      body = this.ensureBlock(this.body);
      bodyc = body.compile(o);
      if (1 === ((_ref2 = body.expressions) != null ? _ref2.length : void 0) && !this.elseBody && !child && bodyc && cond && -1 === (bodyc.indexOf('\n')) && 80 > cond.length + bodyc.length) {
        return "" + this.tab + "if (" + cond + ") " + (bodyc.replace(/^\s+/, ''));
      }
      if (bodyc) bodyc = "\n" + bodyc + "\n" + this.tab;
      ifPart = "if (" + cond + ") {" + bodyc + "}";
      if (!child) ifPart = this.tab + ifPart;
      if (!this.elseBody) return ifPart;
      return ifPart + ' else ' + (this.isChain ? (o.indent = this.tab, o.chainChild = true, this.elseBody.unwrap().compile(o, LEVEL_TOP)) : "{\n" + (this.elseBody.compile(o, LEVEL_TOP)) + "\n" + this.tab + "}");
    };

    If.prototype.compileExpression = function(o) {
      var alt, body, code, cond;
      cond = this.condition.compile(o, LEVEL_COND);
      body = this.bodyNode().compile(o, LEVEL_LIST);
      alt = this.elseBodyNode() ? this.elseBodyNode().compile(o, LEVEL_LIST) : 'void 0';
      code = "" + cond + " ? " + body + " : " + alt;
      if (o.level >= LEVEL_COND) {
        return "(" + code + ")";
      } else {
        return code;
      }
    };

    If.prototype.unfoldSoak = function() {
      return this.soak && this;
    };

    return If;

  })(Base);

  Closure = {
    wrap: function(expressions, statement, noReturn) {
      var args, call, func, mentionsArgs, meth;
      if (expressions.jumps()) return expressions;
      func = new Code([], Block.wrap([expressions]));
      args = [];
      if ((mentionsArgs = expressions.contains(this.literalArgs)) || expressions.contains(this.literalThis)) {
        meth = new Literal(mentionsArgs ? 'apply' : 'call');
        args = [new Literal('this')];
        if (mentionsArgs) args.push(new Literal('arguments'));
        func = new Value(func, [new Access(meth)]);
      }
      func.noReturn = noReturn;
      call = new Call(func, args);
      if (statement) {
        return Block.wrap([call]);
      } else {
        return call;
      }
    },
    literalArgs: function(node) {
      return node instanceof Literal && node.value === 'arguments' && !node.asKey;
    },
    literalThis: function(node) {
      return (node instanceof Literal && node.value === 'this' && !node.asKey) || (node instanceof Code && node.bound);
    }
  };

  CpsCascade = {
    wrap: function(statement, rest, returnValue, o) {
      var args, block, call, cont, e, func;
      func = new Code([new Param(new Literal(tame["const"].k))], Block.wrap([statement]), 'tamegen');
      args = [];
      if (returnValue) {
        returnValue.bindName(o);
        args.push(returnValue);
      }
      block = Block.wrap([rest]);
      if ((e = block.getSingle()) && e instanceof TameTailCall && e.canInline()) {
        cont = e.extractFunc();
      } else {
        cont = new Code(args, block, 'tamegen');
      }
      call = new Call(func, [cont]);
      return new Block([call]);
    }
  };

  TameTailCall = (function(_super) {

    __extends(TameTailCall, _super);

    TameTailCall.name = 'TameTailCall';

    function TameTailCall(func, val) {
      this.func = func;
      if (val == null) val = null;
      TameTailCall.__super__.constructor.call(this);
      if (!this.func) this.func = tame["const"].k;
      this.value = val;
    }

    TameTailCall.prototype.children = ['value'];

    TameTailCall.prototype.assignValue = function(v) {
      return this.value = v;
    };

    TameTailCall.prototype.canInline = function() {
      return !this.value || this.value instanceof TameReturnValue;
    };

    TameTailCall.prototype.literalFunc = function() {
      return new Literal(this.func);
    };

    TameTailCall.prototype.extractFunc = function() {
      return new Value(this.literalFunc());
    };

    TameTailCall.prototype.tameCpsRotate = function() {
      var nv;
      if (this.value) {
        if ((nv = this.tameCpsExprRotate(this.value))) return this.value = nv;
      }
    };

    TameTailCall.prototype.compileNode = function(o) {
      var args, f, out;
      f = this.literalFunc();
      out = o.level === LEVEL_TOP ? this.value ? new Block([this.value, new Call(f)]) : new Call(f) : (args = this.value ? [this.value] : [], new Call(f, args));
      return out.compileNode(o);
    };

    return TameTailCall;

  })(Base);

  TameReturnValue = (function(_super) {

    __extends(TameReturnValue, _super);

    TameReturnValue.name = 'TameReturnValue';

    TameReturnValue.counter = 0;

    function TameReturnValue() {
      TameReturnValue.__super__.constructor.call(this, null, null, false);
    }

    TameReturnValue.prototype.bindName = function(o) {
      var l;
      l = "" + (o.scope.freeVariable(tame["const"].param, false)) + "_" + (TameReturnValue.counter++);
      return this.name = new Literal(l);
    };

    TameReturnValue.prototype.compile = function(o) {
      if (!this.name) this.bindName(o);
      return TameReturnValue.__super__.compile.call(this, o);
    };

    return TameReturnValue;

  })(Param);

  InlineDeferral = {
    generate: function(ns_window) {
      var a1, a2, af, apply_call, assignments, body, call_meth, cn, cnt, cnt_member, constructor_assign, constructor_body, constructor_code, constructor_name, constructor_params, decr, defer_assign, defer_body, defer_code, defer_name, defer_params, dp, if_body, if_cond, if_expr, inc, inner_body, inner_code, inner_params, ip, k, k_member, klass, klass_assign, my_apply, my_if, my_null, ns, ns_obj, ns_val, obj, p1, ret_member, _fulfill_assign, _fulfill_body, _fulfill_call, _fulfill_code, _fulfill_method, _fulfill_name;
      k = new Literal("continuation");
      cnt = new Literal("count");
      cn = new Value(new Literal(tame["const"].Deferrals));
      ns = new Value(new Literal(tame["const"].ns));
      if (ns_window) {
        ns_window.add(new Access(ns));
        ns = ns_window;
      }
      k_member = new Value(new Literal("this"));
      k_member.add(new Access(k));
      p1 = new Param(k_member);
      cnt_member = new Value(new Literal("this"));
      cnt_member.add(new Access(cnt));
      ret_member = new Value(new Literal("this"));
      ret_member.add(new Access(new Value(new Literal(tame["const"].retslot))));
      a1 = new Assign(cnt_member, new Value(new Literal(1)));
      a2 = new Assign(ret_member, NULL());
      constructor_params = [p1];
      constructor_body = new Block([a1, a2]);
      constructor_code = new Code(constructor_params, constructor_body);
      constructor_name = new Value(new Literal("constructor"));
      constructor_assign = new Assign(constructor_name, constructor_code);
      if_expr = new Call(k_member, [ret_member]);
      if_body = new Block([if_expr]);
      decr = new Op('--', cnt_member);
      if_cond = new Op('!', decr);
      my_if = new If(if_cond, if_body);
      _fulfill_body = new Block([my_if]);
      _fulfill_code = new Code([], _fulfill_body);
      _fulfill_name = new Value(new Literal(tame["const"].fulfill));
      _fulfill_assign = new Assign(_fulfill_name, _fulfill_code);
      inc = new Op("++", cnt_member);
      ip = new Literal("inner_params");
      dp = new Literal("defer_params");
      call_meth = new Value(dp);
      af = new Literal(tame["const"].assign_fn);
      call_meth.add(new Access(af, "soak"));
      my_apply = new Literal("apply");
      call_meth.add(new Access(my_apply, "soak"));
      my_null = NULL();
      apply_call = new Call(call_meth, [my_null, new Value(ip)]);
      _fulfill_method = new Value(new Literal("this"));
      _fulfill_method.add(new Access(new Literal(tame["const"].fulfill)));
      _fulfill_call = new Call(_fulfill_method, []);
      inner_body = new Block([apply_call, _fulfill_call]);
      inner_params = [new Param(ip, null, true)];
      inner_code = new Code(inner_params, inner_body, "boundfunc");
      defer_body = new Block([inc, inner_code]);
      defer_params = [new Param(dp)];
      defer_code = new Code(defer_params, defer_body);
      defer_name = new Value(new Literal(tame["const"].defer_method));
      defer_assign = new Assign(defer_name, defer_code);
      assignments = [constructor_assign, _fulfill_assign, defer_assign];
      obj = new Obj(assignments, true);
      body = new Block([new Value(obj)]);
      klass = new Class(null, null, body);
      klass_assign = new Assign(cn, klass, "object");
      ns_obj = new Obj([klass_assign], true);
      ns_val = new Value(ns_obj);
      return new Assign(ns, ns_val);
    }
  };

  unfoldSoak = function(o, parent, name) {
    var ifn;
    if (!(ifn = parent[name].unfoldSoak(o))) return;
    parent[name] = ifn.body;
    ifn.body = new Value(parent);
    return ifn;
  };

  UTILITIES = {
    "extends": function() {
      return "function(child, parent) { for (var key in parent) { if (" + (utility('hasProp')) + ".call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; }";
    },
    bind: function() {
      return 'function(fn, me){ return function(){ return fn.apply(me, arguments); }; }';
    },
    indexOf: function() {
      return "[].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; }";
    },
    hasProp: function() {
      return '{}.hasOwnProperty';
    },
    slice: function() {
      return '[].slice';
    }
  };

  LEVEL_TOP = 1;

  LEVEL_PAREN = 2;

  LEVEL_LIST = 3;

  LEVEL_COND = 4;

  LEVEL_OP = 5;

  LEVEL_ACCESS = 6;

  TAB = '  ';

  IDENTIFIER_STR = "[$A-Za-z_\\x7f-\\uffff][$\\w\\x7f-\\uffff]*";

  IDENTIFIER = RegExp("^" + IDENTIFIER_STR + "$");

  SIMPLENUM = /^[+-]?\d+$/;

  METHOD_DEF = RegExp("^(?:(" + IDENTIFIER_STR + ")\\.prototype(?:\\.(" + IDENTIFIER_STR + ")|\\[(\"(?:[^\\\\\"\\r\\n]|\\\\.)*\"|'(?:[^\\\\'\\r\\n]|\\\\.)*')\\]|\\[(0x[\\da-fA-F]+|\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\]))|(" + IDENTIFIER_STR + ")$");

  IS_STRING = /^['"]/;

  utility = function(name) {
    var ref;
    ref = "__" + name;
    Scope.root.assign(ref, UTILITIES[name]());
    return ref;
  };

  multident = function(code, tab) {
    code = code.replace(/\n/g, '$&' + tab);
    return code.replace(/\s+$/, '');
  };

}).call(this);

};require['./coffee-script'] = new function() {
  var exports = this;
  // Generated by CoffeeScript 1.2.1-pre
(function() {
  var Lexer, RESERVED, compile, fs, lexer, parser, path, tame, vm, _ref,
    __hasProp = {}.hasOwnProperty;

  fs = require('fs');

  path = require('path');

  _ref = require('./lexer'), Lexer = _ref.Lexer, RESERVED = _ref.RESERVED;

  parser = require('./parser').parser;

  tame = require('./tame');

  vm = require('vm');

  if (require.extensions) {
    require.extensions['.coffee'] = function(module, filename) {
      var content;
      content = compile(fs.readFileSync(filename, 'utf8'), {
        filename: filename
      });
      return module._compile(content, filename);
    };
  } else if (require.registerExtension) {
    require.registerExtension('.coffee', function(content) {
      return compile(content);
    });
  }

  exports.VERSION = '1.2.1-pre';

  exports.RESERVED = RESERVED;

  exports.helpers = require('./helpers');

  exports.compile = compile = function(code, options) {
    var header, js, merge;
    if (options == null) options = {};
    merge = exports.helpers.merge;
    try {
      js = (tame.transform(parser.parse(lexer.tokenize(code)))).compile(options);
      if (!options.header) return js;
    } catch (err) {
      if (options.filename) {
        err.message = "In " + options.filename + ", " + err.message;
      }
      throw err;
    }
    header = "Generated by CoffeeScript " + this.VERSION;
    return "// " + header + "\n" + js;
  };

  exports.tokens = function(code, options) {
    return lexer.tokenize(code, options);
  };

  exports.nodes = function(source, options) {
    if (typeof source === 'string') {
      return tame.transform(parser.parse(lexer.tokenize(source, options)));
    } else {
      return tame.transform(parser.parse(source));
    }
  };

  exports.run = function(code, options) {
    var mainModule;
    if (options == null) options = {};
    mainModule = require.main;
    mainModule.filename = process.argv[1] = options.filename ? fs.realpathSync(options.filename) : '.';
    mainModule.moduleCache && (mainModule.moduleCache = {});
    mainModule.paths = require('module')._nodeModulePaths(path.dirname(options.filename));
    if (path.extname(mainModule.filename) !== '.coffee' || require.extensions) {
      return mainModule._compile(compile(code, options), mainModule.filename);
    } else {
      return mainModule._compile(code, mainModule.filename);
    }
  };

  exports.eval = function(code, options) {
    var Module, Script, js, k, o, r, sandbox, v, _i, _len, _module, _ref2, _ref3, _require;
    if (options == null) options = {};
    if (!(code = code.trim())) return;
    Script = vm.Script;
    if (Script) {
      if (options.sandbox != null) {
        if (options.sandbox instanceof Script.createContext().constructor) {
          sandbox = options.sandbox;
        } else {
          sandbox = Script.createContext();
          _ref2 = options.sandbox;
          for (k in _ref2) {
            if (!__hasProp.call(_ref2, k)) continue;
            v = _ref2[k];
            sandbox[k] = v;
          }
        }
        sandbox.global = sandbox.root = sandbox.GLOBAL = sandbox;
      } else {
        sandbox = global;
      }
      sandbox.__filename = options.filename || 'eval';
      sandbox.__dirname = path.dirname(sandbox.__filename);
      if (!(sandbox !== global || sandbox.module || sandbox.require)) {
        Module = require('module');
        sandbox.module = _module = new Module(options.modulename || 'eval');
        sandbox.require = _require = function(path) {
          return Module._load(path, _module, true);
        };
        _module.filename = sandbox.__filename;
        _ref3 = Object.getOwnPropertyNames(require);
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          r = _ref3[_i];
          if (r !== 'paths') _require[r] = require[r];
        }
        _require.paths = _module.paths = Module._nodeModulePaths(process.cwd());
        _require.resolve = function(request) {
          return Module._resolveFilename(request, _module);
        };
      }
    }
    o = {};
    for (k in options) {
      if (!__hasProp.call(options, k)) continue;
      v = options[k];
      o[k] = v;
    }
    o.bare = true;
    js = compile(code, o);
    if (sandbox === global) {
      return vm.runInThisContext(js);
    } else {
      return vm.runInContext(js, sandbox);
    }
  };

  lexer = new Lexer;

  parser.lexer = {
    lex: function() {
      var tag, _ref2;
      _ref2 = this.tokens[this.pos++] || [''], tag = _ref2[0], this.yytext = _ref2[1], this.yylineno = _ref2[2];
      return tag;
    },
    setInput: function(tokens) {
      this.tokens = tokens;
      return this.pos = 0;
    },
    upcomingInput: function() {
      return "";
    }
  };

  parser.yy = require('./nodes');

  exports.tame = tame.runtime;

}).call(this);

};require['./browser'] = new function() {
  var exports = this;
  // Generated by CoffeeScript 1.2.1-pre
(function() {
  var CoffeeScript, runScripts;

  CoffeeScript = require('./coffee-script');

  CoffeeScript.require = require;

  CoffeeScript.eval = function(code, options) {
    return eval(CoffeeScript.compile(code, options));
  };

  CoffeeScript.run = function(code, options) {
    if (options == null) options = {};
    options.bare = true;
    return Function(CoffeeScript.compile(code, options))();
  };

  if (typeof window === "undefined" || window === null) return;

  CoffeeScript.load = function(url, callback) {
    var xhr;
    xhr = new (window.ActiveXObject || XMLHttpRequest)('Microsoft.XMLHTTP');
    xhr.open('GET', url, true);
    if ('overrideMimeType' in xhr) xhr.overrideMimeType('text/plain');
    xhr.onreadystatechange = function() {
      var _ref;
      if (xhr.readyState === 4) {
        if ((_ref = xhr.status) === 0 || _ref === 200) {
          CoffeeScript.run(xhr.responseText);
        } else {
          throw new Error("Could not load " + url);
        }
        if (callback) return callback();
      }
    };
    return xhr.send(null);
  };

  runScripts = function() {
    var coffees, execute, index, length, s, scripts;
    scripts = document.getElementsByTagName('script');
    coffees = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = scripts.length; _i < _len; _i++) {
        s = scripts[_i];
        if (s.type === 'text/coffeescript') _results.push(s);
      }
      return _results;
    })();
    index = 0;
    length = coffees.length;
    (execute = function() {
      var script;
      script = coffees[index++];
      if ((script != null ? script.type : void 0) === 'text/coffeescript') {
        if (script.src) {
          return CoffeeScript.load(script.src, execute);
        } else {
          CoffeeScript.run(script.innerHTML);
          return execute();
        }
      }
    })();
    return null;
  };

  if (window.addEventListener) {
    addEventListener('DOMContentLoaded', runScripts, false);
  } else {
    attachEvent('onload', runScripts);
  }

}).call(this);

};
    return require['./coffee-script'];
  }();

  if (typeof define === 'function' && define.amd) {
    define(function() { return CoffeeScript; });
  } else { 
    root.CoffeeScript = CoffeeScript; 
  }
}(this));